
SpecCFA-TZ_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000923c  0c000200  0c000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  0c00943c  0c00943c  0001943c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c0096e8  0c0096e8  0002e060  2**0
                  CONTENTS
  4 .ARM          00000008  0c0096e8  0c0096e8  000196e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0c0096f0  0c0096f0  0002e060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c0096f0  0c0096f0  000196f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c0096f4  0c0096f4  000196f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  30000000  0c0096f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000060  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          00000404  300000d8  300000d8  000300d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  300004dc  300004dc  000300d8  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0002e060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f02d  00000000  00000000  0002e096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b61  00000000  00000000  0003d0c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  0003fc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d68  00000000  00000000  00040ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b64d  00000000  00000000  00041820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000119b5  00000000  00000000  0006ce6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010ea2f  00000000  00000000  0007e822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018d251  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039d0  00000000  00000000  0018d2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c000200 <__do_global_dtors_aux>:
 c000200:	b510      	push	{r4, lr}
 c000202:	4c05      	ldr	r4, [pc, #20]	; (c000218 <__do_global_dtors_aux+0x18>)
 c000204:	7823      	ldrb	r3, [r4, #0]
 c000206:	b933      	cbnz	r3, c000216 <__do_global_dtors_aux+0x16>
 c000208:	4b04      	ldr	r3, [pc, #16]	; (c00021c <__do_global_dtors_aux+0x1c>)
 c00020a:	b113      	cbz	r3, c000212 <__do_global_dtors_aux+0x12>
 c00020c:	4804      	ldr	r0, [pc, #16]	; (c000220 <__do_global_dtors_aux+0x20>)
 c00020e:	e000      	b.n	c000212 <__do_global_dtors_aux+0x12>
 c000210:	bf00      	nop
 c000212:	2301      	movs	r3, #1
 c000214:	7023      	strb	r3, [r4, #0]
 c000216:	bd10      	pop	{r4, pc}
 c000218:	300000d8 	.word	0x300000d8
 c00021c:	00000000 	.word	0x00000000
 c000220:	0c009424 	.word	0x0c009424

0c000224 <frame_dummy>:
 c000224:	b508      	push	{r3, lr}
 c000226:	4b03      	ldr	r3, [pc, #12]	; (c000234 <frame_dummy+0x10>)
 c000228:	b11b      	cbz	r3, c000232 <frame_dummy+0xe>
 c00022a:	4903      	ldr	r1, [pc, #12]	; (c000238 <frame_dummy+0x14>)
 c00022c:	4803      	ldr	r0, [pc, #12]	; (c00023c <frame_dummy+0x18>)
 c00022e:	e000      	b.n	c000232 <frame_dummy+0xe>
 c000230:	bf00      	nop
 c000232:	bd08      	pop	{r3, pc}
 c000234:	00000000 	.word	0x00000000
 c000238:	300000dc 	.word	0x300000dc
 c00023c:	0c009424 	.word	0x0c009424

0c000240 <strcmp>:
 c000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 c000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 c000248:	2a01      	cmp	r2, #1
 c00024a:	bf28      	it	cs
 c00024c:	429a      	cmpcs	r2, r3
 c00024e:	d0f7      	beq.n	c000240 <strcmp>
 c000250:	1ad0      	subs	r0, r2, r3
 c000252:	4770      	bx	lr

0c000254 <__gnu_cmse_nonsecure_call>:
 c000254:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000258:	4627      	mov	r7, r4
 c00025a:	46a0      	mov	r8, r4
 c00025c:	46a1      	mov	r9, r4
 c00025e:	46a2      	mov	sl, r4
 c000260:	46a3      	mov	fp, r4
 c000262:	46a4      	mov	ip, r4
 c000264:	ed2d 8b10 	vpush	{d8-d15}
 c000268:	f04f 0500 	mov.w	r5, #0
 c00026c:	ec45 5b18 	vmov	d8, r5, r5
 c000270:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000274:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c000278:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c00027c:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000280:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c000284:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c000288:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c00028c:	eef1 5a10 	vmrs	r5, fpscr
 c000290:	f64f 7660 	movw	r6, #65376	; 0xff60
 c000294:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c000298:	4035      	ands	r5, r6
 c00029a:	eee1 5a10 	vmsr	fpscr, r5
 c00029e:	f384 8800 	msr	CPSR_f, r4
 c0002a2:	4625      	mov	r5, r4
 c0002a4:	4626      	mov	r6, r4
 c0002a6:	47a4      	blxns	r4
 c0002a8:	ecbd 8b10 	vpop	{d8-d15}
 c0002ac:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c0002b0 <__aeabi_uldivmod>:
 c0002b0:	b953      	cbnz	r3, c0002c8 <__aeabi_uldivmod+0x18>
 c0002b2:	b94a      	cbnz	r2, c0002c8 <__aeabi_uldivmod+0x18>
 c0002b4:	2900      	cmp	r1, #0
 c0002b6:	bf08      	it	eq
 c0002b8:	2800      	cmpeq	r0, #0
 c0002ba:	bf1c      	itt	ne
 c0002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 c0002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 c0002c4:	f000 b982 	b.w	c0005cc <__aeabi_idiv0>
 c0002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 c0002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 c0002d0:	f000 f806 	bl	c0002e0 <__udivmoddi4>
 c0002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 c0002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c0002dc:	b004      	add	sp, #16
 c0002de:	4770      	bx	lr

0c0002e0 <__udivmoddi4>:
 c0002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0002e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 c0002e6:	4604      	mov	r4, r0
 c0002e8:	460f      	mov	r7, r1
 c0002ea:	2b00      	cmp	r3, #0
 c0002ec:	d148      	bne.n	c000380 <__udivmoddi4+0xa0>
 c0002ee:	428a      	cmp	r2, r1
 c0002f0:	4694      	mov	ip, r2
 c0002f2:	d961      	bls.n	c0003b8 <__udivmoddi4+0xd8>
 c0002f4:	fab2 f382 	clz	r3, r2
 c0002f8:	b143      	cbz	r3, c00030c <__udivmoddi4+0x2c>
 c0002fa:	f1c3 0120 	rsb	r1, r3, #32
 c0002fe:	409f      	lsls	r7, r3
 c000300:	fa02 fc03 	lsl.w	ip, r2, r3
 c000304:	409c      	lsls	r4, r3
 c000306:	fa20 f101 	lsr.w	r1, r0, r1
 c00030a:	430f      	orrs	r7, r1
 c00030c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 c000310:	fa1f fe8c 	uxth.w	lr, ip
 c000314:	0c22      	lsrs	r2, r4, #16
 c000316:	fbb7 f6f1 	udiv	r6, r7, r1
 c00031a:	fb01 7716 	mls	r7, r1, r6, r7
 c00031e:	fb06 f00e 	mul.w	r0, r6, lr
 c000322:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 c000326:	4290      	cmp	r0, r2
 c000328:	d908      	bls.n	c00033c <__udivmoddi4+0x5c>
 c00032a:	eb1c 0202 	adds.w	r2, ip, r2
 c00032e:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 c000332:	d202      	bcs.n	c00033a <__udivmoddi4+0x5a>
 c000334:	4290      	cmp	r0, r2
 c000336:	f200 8137 	bhi.w	c0005a8 <__udivmoddi4+0x2c8>
 c00033a:	463e      	mov	r6, r7
 c00033c:	1a12      	subs	r2, r2, r0
 c00033e:	b2a4      	uxth	r4, r4
 c000340:	fbb2 f0f1 	udiv	r0, r2, r1
 c000344:	fb01 2210 	mls	r2, r1, r0, r2
 c000348:	fb00 fe0e 	mul.w	lr, r0, lr
 c00034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 c000350:	45a6      	cmp	lr, r4
 c000352:	d908      	bls.n	c000366 <__udivmoddi4+0x86>
 c000354:	eb1c 0404 	adds.w	r4, ip, r4
 c000358:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 c00035c:	d202      	bcs.n	c000364 <__udivmoddi4+0x84>
 c00035e:	45a6      	cmp	lr, r4
 c000360:	f200 811c 	bhi.w	c00059c <__udivmoddi4+0x2bc>
 c000364:	4610      	mov	r0, r2
 c000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 c00036a:	eba4 040e 	sub.w	r4, r4, lr
 c00036e:	2600      	movs	r6, #0
 c000370:	b11d      	cbz	r5, c00037a <__udivmoddi4+0x9a>
 c000372:	40dc      	lsrs	r4, r3
 c000374:	2300      	movs	r3, #0
 c000376:	e9c5 4300 	strd	r4, r3, [r5]
 c00037a:	4631      	mov	r1, r6
 c00037c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000380:	428b      	cmp	r3, r1
 c000382:	d909      	bls.n	c000398 <__udivmoddi4+0xb8>
 c000384:	2d00      	cmp	r5, #0
 c000386:	f000 80fd 	beq.w	c000584 <__udivmoddi4+0x2a4>
 c00038a:	2600      	movs	r6, #0
 c00038c:	e9c5 0100 	strd	r0, r1, [r5]
 c000390:	4630      	mov	r0, r6
 c000392:	4631      	mov	r1, r6
 c000394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000398:	fab3 f683 	clz	r6, r3
 c00039c:	2e00      	cmp	r6, #0
 c00039e:	d14b      	bne.n	c000438 <__udivmoddi4+0x158>
 c0003a0:	428b      	cmp	r3, r1
 c0003a2:	f0c0 80f2 	bcc.w	c00058a <__udivmoddi4+0x2aa>
 c0003a6:	4282      	cmp	r2, r0
 c0003a8:	f240 80ef 	bls.w	c00058a <__udivmoddi4+0x2aa>
 c0003ac:	4630      	mov	r0, r6
 c0003ae:	2d00      	cmp	r5, #0
 c0003b0:	d0e3      	beq.n	c00037a <__udivmoddi4+0x9a>
 c0003b2:	e9c5 4700 	strd	r4, r7, [r5]
 c0003b6:	e7e0      	b.n	c00037a <__udivmoddi4+0x9a>
 c0003b8:	b902      	cbnz	r2, c0003bc <__udivmoddi4+0xdc>
 c0003ba:	deff      	udf	#255	; 0xff
 c0003bc:	fab2 f382 	clz	r3, r2
 c0003c0:	2b00      	cmp	r3, #0
 c0003c2:	f040 809d 	bne.w	c000500 <__udivmoddi4+0x220>
 c0003c6:	1a89      	subs	r1, r1, r2
 c0003c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 c0003cc:	b297      	uxth	r7, r2
 c0003ce:	2601      	movs	r6, #1
 c0003d0:	0c20      	lsrs	r0, r4, #16
 c0003d2:	fbb1 f2fe 	udiv	r2, r1, lr
 c0003d6:	fb0e 1112 	mls	r1, lr, r2, r1
 c0003da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c0003de:	fb07 f002 	mul.w	r0, r7, r2
 c0003e2:	4288      	cmp	r0, r1
 c0003e4:	d90f      	bls.n	c000406 <__udivmoddi4+0x126>
 c0003e6:	eb1c 0101 	adds.w	r1, ip, r1
 c0003ea:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 c0003ee:	bf2c      	ite	cs
 c0003f0:	f04f 0901 	movcs.w	r9, #1
 c0003f4:	f04f 0900 	movcc.w	r9, #0
 c0003f8:	4288      	cmp	r0, r1
 c0003fa:	d903      	bls.n	c000404 <__udivmoddi4+0x124>
 c0003fc:	f1b9 0f00 	cmp.w	r9, #0
 c000400:	f000 80cf 	beq.w	c0005a2 <__udivmoddi4+0x2c2>
 c000404:	4642      	mov	r2, r8
 c000406:	1a09      	subs	r1, r1, r0
 c000408:	b2a4      	uxth	r4, r4
 c00040a:	fbb1 f0fe 	udiv	r0, r1, lr
 c00040e:	fb0e 1110 	mls	r1, lr, r0, r1
 c000412:	fb00 f707 	mul.w	r7, r0, r7
 c000416:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 c00041a:	42a7      	cmp	r7, r4
 c00041c:	d908      	bls.n	c000430 <__udivmoddi4+0x150>
 c00041e:	eb1c 0404 	adds.w	r4, ip, r4
 c000422:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 c000426:	d202      	bcs.n	c00042e <__udivmoddi4+0x14e>
 c000428:	42a7      	cmp	r7, r4
 c00042a:	f200 80b4 	bhi.w	c000596 <__udivmoddi4+0x2b6>
 c00042e:	4608      	mov	r0, r1
 c000430:	1be4      	subs	r4, r4, r7
 c000432:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 c000436:	e79b      	b.n	c000370 <__udivmoddi4+0x90>
 c000438:	f1c6 0720 	rsb	r7, r6, #32
 c00043c:	40b3      	lsls	r3, r6
 c00043e:	fa01 f406 	lsl.w	r4, r1, r6
 c000442:	fa22 fc07 	lsr.w	ip, r2, r7
 c000446:	40f9      	lsrs	r1, r7
 c000448:	40b2      	lsls	r2, r6
 c00044a:	ea4c 0c03 	orr.w	ip, ip, r3
 c00044e:	fa20 f307 	lsr.w	r3, r0, r7
 c000452:	ea4f 491c 	mov.w	r9, ip, lsr #16
 c000456:	431c      	orrs	r4, r3
 c000458:	fa1f fe8c 	uxth.w	lr, ip
 c00045c:	fa00 f306 	lsl.w	r3, r0, r6
 c000460:	0c20      	lsrs	r0, r4, #16
 c000462:	fbb1 f8f9 	udiv	r8, r1, r9
 c000466:	fb09 1118 	mls	r1, r9, r8, r1
 c00046a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c00046e:	fb08 f00e 	mul.w	r0, r8, lr
 c000472:	4288      	cmp	r0, r1
 c000474:	d90f      	bls.n	c000496 <__udivmoddi4+0x1b6>
 c000476:	eb1c 0101 	adds.w	r1, ip, r1
 c00047a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 c00047e:	bf2c      	ite	cs
 c000480:	f04f 0b01 	movcs.w	fp, #1
 c000484:	f04f 0b00 	movcc.w	fp, #0
 c000488:	4288      	cmp	r0, r1
 c00048a:	d903      	bls.n	c000494 <__udivmoddi4+0x1b4>
 c00048c:	f1bb 0f00 	cmp.w	fp, #0
 c000490:	f000 808d 	beq.w	c0005ae <__udivmoddi4+0x2ce>
 c000494:	46d0      	mov	r8, sl
 c000496:	1a09      	subs	r1, r1, r0
 c000498:	b2a4      	uxth	r4, r4
 c00049a:	fbb1 f0f9 	udiv	r0, r1, r9
 c00049e:	fb09 1110 	mls	r1, r9, r0, r1
 c0004a2:	fb00 fe0e 	mul.w	lr, r0, lr
 c0004a6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 c0004aa:	458e      	cmp	lr, r1
 c0004ac:	d907      	bls.n	c0004be <__udivmoddi4+0x1de>
 c0004ae:	eb1c 0101 	adds.w	r1, ip, r1
 c0004b2:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 c0004b6:	d201      	bcs.n	c0004bc <__udivmoddi4+0x1dc>
 c0004b8:	458e      	cmp	lr, r1
 c0004ba:	d87f      	bhi.n	c0005bc <__udivmoddi4+0x2dc>
 c0004bc:	4620      	mov	r0, r4
 c0004be:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 c0004c2:	eba1 010e 	sub.w	r1, r1, lr
 c0004c6:	fba0 9802 	umull	r9, r8, r0, r2
 c0004ca:	4541      	cmp	r1, r8
 c0004cc:	464c      	mov	r4, r9
 c0004ce:	46c6      	mov	lr, r8
 c0004d0:	d302      	bcc.n	c0004d8 <__udivmoddi4+0x1f8>
 c0004d2:	d106      	bne.n	c0004e2 <__udivmoddi4+0x202>
 c0004d4:	454b      	cmp	r3, r9
 c0004d6:	d204      	bcs.n	c0004e2 <__udivmoddi4+0x202>
 c0004d8:	3801      	subs	r0, #1
 c0004da:	ebb9 0402 	subs.w	r4, r9, r2
 c0004de:	eb68 0e0c 	sbc.w	lr, r8, ip
 c0004e2:	2d00      	cmp	r5, #0
 c0004e4:	d070      	beq.n	c0005c8 <__udivmoddi4+0x2e8>
 c0004e6:	1b1a      	subs	r2, r3, r4
 c0004e8:	eb61 010e 	sbc.w	r1, r1, lr
 c0004ec:	fa22 f306 	lsr.w	r3, r2, r6
 c0004f0:	fa01 f707 	lsl.w	r7, r1, r7
 c0004f4:	40f1      	lsrs	r1, r6
 c0004f6:	2600      	movs	r6, #0
 c0004f8:	431f      	orrs	r7, r3
 c0004fa:	e9c5 7100 	strd	r7, r1, [r5]
 c0004fe:	e73c      	b.n	c00037a <__udivmoddi4+0x9a>
 c000500:	fa02 fc03 	lsl.w	ip, r2, r3
 c000504:	f1c3 0020 	rsb	r0, r3, #32
 c000508:	fa01 f203 	lsl.w	r2, r1, r3
 c00050c:	fa21 f600 	lsr.w	r6, r1, r0
 c000510:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 c000514:	fa24 f100 	lsr.w	r1, r4, r0
 c000518:	fa1f f78c 	uxth.w	r7, ip
 c00051c:	409c      	lsls	r4, r3
 c00051e:	4311      	orrs	r1, r2
 c000520:	fbb6 f0fe 	udiv	r0, r6, lr
 c000524:	0c0a      	lsrs	r2, r1, #16
 c000526:	fb0e 6610 	mls	r6, lr, r0, r6
 c00052a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 c00052e:	fb00 f607 	mul.w	r6, r0, r7
 c000532:	4296      	cmp	r6, r2
 c000534:	d90e      	bls.n	c000554 <__udivmoddi4+0x274>
 c000536:	eb1c 0202 	adds.w	r2, ip, r2
 c00053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 c00053e:	bf2c      	ite	cs
 c000540:	f04f 0901 	movcs.w	r9, #1
 c000544:	f04f 0900 	movcc.w	r9, #0
 c000548:	4296      	cmp	r6, r2
 c00054a:	d902      	bls.n	c000552 <__udivmoddi4+0x272>
 c00054c:	f1b9 0f00 	cmp.w	r9, #0
 c000550:	d031      	beq.n	c0005b6 <__udivmoddi4+0x2d6>
 c000552:	4640      	mov	r0, r8
 c000554:	1b92      	subs	r2, r2, r6
 c000556:	b289      	uxth	r1, r1
 c000558:	fbb2 f6fe 	udiv	r6, r2, lr
 c00055c:	fb0e 2216 	mls	r2, lr, r6, r2
 c000560:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 c000564:	fb06 f207 	mul.w	r2, r6, r7
 c000568:	428a      	cmp	r2, r1
 c00056a:	d907      	bls.n	c00057c <__udivmoddi4+0x29c>
 c00056c:	eb1c 0101 	adds.w	r1, ip, r1
 c000570:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 c000574:	d201      	bcs.n	c00057a <__udivmoddi4+0x29a>
 c000576:	428a      	cmp	r2, r1
 c000578:	d823      	bhi.n	c0005c2 <__udivmoddi4+0x2e2>
 c00057a:	4646      	mov	r6, r8
 c00057c:	1a89      	subs	r1, r1, r2
 c00057e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 c000582:	e725      	b.n	c0003d0 <__udivmoddi4+0xf0>
 c000584:	462e      	mov	r6, r5
 c000586:	4628      	mov	r0, r5
 c000588:	e6f7      	b.n	c00037a <__udivmoddi4+0x9a>
 c00058a:	1a84      	subs	r4, r0, r2
 c00058c:	eb61 0303 	sbc.w	r3, r1, r3
 c000590:	2001      	movs	r0, #1
 c000592:	461f      	mov	r7, r3
 c000594:	e70b      	b.n	c0003ae <__udivmoddi4+0xce>
 c000596:	4464      	add	r4, ip
 c000598:	3802      	subs	r0, #2
 c00059a:	e749      	b.n	c000430 <__udivmoddi4+0x150>
 c00059c:	4464      	add	r4, ip
 c00059e:	3802      	subs	r0, #2
 c0005a0:	e6e1      	b.n	c000366 <__udivmoddi4+0x86>
 c0005a2:	3a02      	subs	r2, #2
 c0005a4:	4461      	add	r1, ip
 c0005a6:	e72e      	b.n	c000406 <__udivmoddi4+0x126>
 c0005a8:	3e02      	subs	r6, #2
 c0005aa:	4462      	add	r2, ip
 c0005ac:	e6c6      	b.n	c00033c <__udivmoddi4+0x5c>
 c0005ae:	f1a8 0802 	sub.w	r8, r8, #2
 c0005b2:	4461      	add	r1, ip
 c0005b4:	e76f      	b.n	c000496 <__udivmoddi4+0x1b6>
 c0005b6:	3802      	subs	r0, #2
 c0005b8:	4462      	add	r2, ip
 c0005ba:	e7cb      	b.n	c000554 <__udivmoddi4+0x274>
 c0005bc:	3802      	subs	r0, #2
 c0005be:	4461      	add	r1, ip
 c0005c0:	e77d      	b.n	c0004be <__udivmoddi4+0x1de>
 c0005c2:	3e02      	subs	r6, #2
 c0005c4:	4461      	add	r1, ip
 c0005c6:	e7d9      	b.n	c00057c <__udivmoddi4+0x29c>
 c0005c8:	462e      	mov	r6, r5
 c0005ca:	e6d6      	b.n	c00037a <__udivmoddi4+0x9a>

0c0005cc <__aeabi_idiv0>:
 c0005cc:	4770      	bx	lr
 c0005ce:	bf00      	nop

0c0005d0 <load32>:
  uint16_t x;
  memcpy(&x, b, 2);
  return x;
}

inline static uint32_t load32(uint8_t *b) {
 c0005d0:	b480      	push	{r7}
 c0005d2:	b085      	sub	sp, #20
 c0005d4:	af00      	add	r7, sp, #0
 c0005d6:	6078      	str	r0, [r7, #4]
 c0005d8:	687b      	ldr	r3, [r7, #4]
 c0005da:	681b      	ldr	r3, [r3, #0]
  uint32_t x;
  memcpy(&x, b, 4);
 c0005dc:	60fb      	str	r3, [r7, #12]
  return x;
 c0005de:	68fb      	ldr	r3, [r7, #12]
}
 c0005e0:	4618      	mov	r0, r3
 c0005e2:	3714      	adds	r7, #20
 c0005e4:	46bd      	mov	sp, r7
 c0005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0005ea:	4770      	bx	lr

0c0005ec <store32>:
  return x;
}

inline static void store16(uint8_t *b, uint16_t i) { memcpy(b, &i, 2); }

inline static void store32(uint8_t *b, uint32_t i) { memcpy(b, &i, 4); }
 c0005ec:	b480      	push	{r7}
 c0005ee:	b083      	sub	sp, #12
 c0005f0:	af00      	add	r7, sp, #0
 c0005f2:	6078      	str	r0, [r7, #4]
 c0005f4:	6039      	str	r1, [r7, #0]
 c0005f6:	683a      	ldr	r2, [r7, #0]
 c0005f8:	687b      	ldr	r3, [r7, #4]
 c0005fa:	601a      	str	r2, [r3, #0]
 c0005fc:	bf00      	nop
 c0005fe:	370c      	adds	r7, #12
 c000600:	46bd      	mov	sp, r7
 c000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000606:	4770      	bx	lr

0c000608 <store64>:

inline static void store64(uint8_t *b, uint64_t i) { memcpy(b, &i, 8); }
 c000608:	b580      	push	{r7, lr}
 c00060a:	b084      	sub	sp, #16
 c00060c:	af00      	add	r7, sp, #0
 c00060e:	60f8      	str	r0, [r7, #12]
 c000610:	e9c7 2300 	strd	r2, r3, [r7]
 c000614:	463b      	mov	r3, r7
 c000616:	2208      	movs	r2, #8
 c000618:	4619      	mov	r1, r3
 c00061a:	68f8      	ldr	r0, [r7, #12]
 c00061c:	f007 fea6 	bl	c00836c <memcpy>
 c000620:	bf00      	nop
 c000622:	3710      	adds	r7, #16
 c000624:	46bd      	mov	sp, r7
 c000626:	bd80      	pop	{r7, pc}

0c000628 <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes>:

#include "Hacl_SHA2_256.h"

static void
Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes(uint32_t *output, uint8_t *input, uint32_t len)
{
 c000628:	b580      	push	{r7, lr}
 c00062a:	b088      	sub	sp, #32
 c00062c:	af00      	add	r7, sp, #0
 c00062e:	60f8      	str	r0, [r7, #12]
 c000630:	60b9      	str	r1, [r7, #8]
 c000632:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c000634:	2300      	movs	r3, #0
 c000636:	61fb      	str	r3, [r7, #28]
 c000638:	e021      	b.n	c00067e <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes+0x56>
  {
    uint8_t *x0 = input + (uint32_t)4U * i;
 c00063a:	69fb      	ldr	r3, [r7, #28]
 c00063c:	009b      	lsls	r3, r3, #2
 c00063e:	68ba      	ldr	r2, [r7, #8]
 c000640:	4413      	add	r3, r2
 c000642:	61bb      	str	r3, [r7, #24]
    uint32_t inputi = load32_be(x0);
 c000644:	69b8      	ldr	r0, [r7, #24]
 c000646:	f7ff ffc3 	bl	c0005d0 <load32>
 c00064a:	6178      	str	r0, [r7, #20]
 c00064c:	697b      	ldr	r3, [r7, #20]
 c00064e:	0e1a      	lsrs	r2, r3, #24
 c000650:	697b      	ldr	r3, [r7, #20]
 c000652:	0a1b      	lsrs	r3, r3, #8
 c000654:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c000658:	431a      	orrs	r2, r3
 c00065a:	697b      	ldr	r3, [r7, #20]
 c00065c:	021b      	lsls	r3, r3, #8
 c00065e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c000662:	431a      	orrs	r2, r3
 c000664:	697b      	ldr	r3, [r7, #20]
 c000666:	061b      	lsls	r3, r3, #24
 c000668:	4313      	orrs	r3, r2
 c00066a:	613b      	str	r3, [r7, #16]
    output[i] = inputi;
 c00066c:	69fb      	ldr	r3, [r7, #28]
 c00066e:	009b      	lsls	r3, r3, #2
 c000670:	68fa      	ldr	r2, [r7, #12]
 c000672:	4413      	add	r3, r2
 c000674:	693a      	ldr	r2, [r7, #16]
 c000676:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c000678:	69fb      	ldr	r3, [r7, #28]
 c00067a:	3301      	adds	r3, #1
 c00067c:	61fb      	str	r3, [r7, #28]
 c00067e:	69fa      	ldr	r2, [r7, #28]
 c000680:	687b      	ldr	r3, [r7, #4]
 c000682:	429a      	cmp	r2, r3
 c000684:	d3d9      	bcc.n	c00063a <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes+0x12>
  }
}
 c000686:	bf00      	nop
 c000688:	bf00      	nop
 c00068a:	3720      	adds	r7, #32
 c00068c:	46bd      	mov	sp, r7
 c00068e:	bd80      	pop	{r7, pc}

0c000690 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes>:

static void
Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes(uint8_t *output, uint32_t *input, uint32_t len)
{
 c000690:	b580      	push	{r7, lr}
 c000692:	b088      	sub	sp, #32
 c000694:	af00      	add	r7, sp, #0
 c000696:	60f8      	str	r0, [r7, #12]
 c000698:	60b9      	str	r1, [r7, #8]
 c00069a:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c00069c:	2300      	movs	r3, #0
 c00069e:	61fb      	str	r3, [r7, #28]
 c0006a0:	e022      	b.n	c0006e8 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes+0x58>
  {
    uint32_t hd1 = input[i];
 c0006a2:	69fb      	ldr	r3, [r7, #28]
 c0006a4:	009b      	lsls	r3, r3, #2
 c0006a6:	68ba      	ldr	r2, [r7, #8]
 c0006a8:	4413      	add	r3, r2
 c0006aa:	681b      	ldr	r3, [r3, #0]
 c0006ac:	61bb      	str	r3, [r7, #24]
    uint8_t *x0 = output + (uint32_t)4U * i;
 c0006ae:	69fb      	ldr	r3, [r7, #28]
 c0006b0:	009b      	lsls	r3, r3, #2
 c0006b2:	68fa      	ldr	r2, [r7, #12]
 c0006b4:	4413      	add	r3, r2
 c0006b6:	617b      	str	r3, [r7, #20]
    store32_be(x0, hd1);
 c0006b8:	69bb      	ldr	r3, [r7, #24]
 c0006ba:	613b      	str	r3, [r7, #16]
 c0006bc:	693b      	ldr	r3, [r7, #16]
 c0006be:	0e1a      	lsrs	r2, r3, #24
 c0006c0:	693b      	ldr	r3, [r7, #16]
 c0006c2:	0a1b      	lsrs	r3, r3, #8
 c0006c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c0006c8:	431a      	orrs	r2, r3
 c0006ca:	693b      	ldr	r3, [r7, #16]
 c0006cc:	021b      	lsls	r3, r3, #8
 c0006ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c0006d2:	431a      	orrs	r2, r3
 c0006d4:	693b      	ldr	r3, [r7, #16]
 c0006d6:	061b      	lsls	r3, r3, #24
 c0006d8:	4313      	orrs	r3, r2
 c0006da:	4619      	mov	r1, r3
 c0006dc:	6978      	ldr	r0, [r7, #20]
 c0006de:	f7ff ff85 	bl	c0005ec <store32>
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c0006e2:	69fb      	ldr	r3, [r7, #28]
 c0006e4:	3301      	adds	r3, #1
 c0006e6:	61fb      	str	r3, [r7, #28]
 c0006e8:	69fa      	ldr	r2, [r7, #28]
 c0006ea:	687b      	ldr	r3, [r7, #4]
 c0006ec:	429a      	cmp	r2, r3
 c0006ee:	d3d8      	bcc.n	c0006a2 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes+0x12>
  }
}
 c0006f0:	bf00      	nop
 c0006f2:	bf00      	nop
 c0006f4:	3720      	adds	r7, #32
 c0006f6:	46bd      	mov	sp, r7
 c0006f8:	bd80      	pop	{r7, pc}
	...

0c0006fc <Hacl_Impl_SHA2_256_init>:

static void Hacl_Impl_SHA2_256_init(uint32_t *state)
{
 c0006fc:	b480      	push	{r7}
 c0006fe:	b0a3      	sub	sp, #140	; 0x8c
 c000700:	af00      	add	r7, sp, #0
 c000702:	6078      	str	r0, [r7, #4]
  uint32_t *k1 = state;
 c000704:	687b      	ldr	r3, [r7, #4]
 c000706:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t *h_01 = state + (uint32_t)128U;
 c00070a:	687b      	ldr	r3, [r7, #4]
 c00070c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 c000710:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t *p10 = k1;
 c000714:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000718:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t *p20 = k1 + (uint32_t)16U;
 c00071a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c00071e:	3340      	adds	r3, #64	; 0x40
 c000720:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t *p3 = k1 + (uint32_t)32U;
 c000722:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000726:	3380      	adds	r3, #128	; 0x80
 c000728:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t *p4 = k1 + (uint32_t)48U;
 c00072a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c00072e:	33c0      	adds	r3, #192	; 0xc0
 c000730:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t *p11 = p10;
 c000732:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 c000734:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t *p21 = p10 + (uint32_t)8U;
 c000736:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 c000738:	3320      	adds	r3, #32
 c00073a:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t *p12 = p11;
 c00073c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00073e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t *p22 = p11 + (uint32_t)4U;
 c000740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c000742:	3310      	adds	r3, #16
 c000744:	663b      	str	r3, [r7, #96]	; 0x60
  p12[0U] = (uint32_t)0x428a2f98U;
 c000746:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c000748:	4a8d      	ldr	r2, [pc, #564]	; (c000980 <Hacl_Impl_SHA2_256_init+0x284>)
 c00074a:	601a      	str	r2, [r3, #0]
  p12[1U] = (uint32_t)0x71374491U;
 c00074c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c00074e:	3304      	adds	r3, #4
 c000750:	4a8c      	ldr	r2, [pc, #560]	; (c000984 <Hacl_Impl_SHA2_256_init+0x288>)
 c000752:	601a      	str	r2, [r3, #0]
  p12[2U] = (uint32_t)0xb5c0fbcfU;
 c000754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c000756:	3308      	adds	r3, #8
 c000758:	4a8b      	ldr	r2, [pc, #556]	; (c000988 <Hacl_Impl_SHA2_256_init+0x28c>)
 c00075a:	601a      	str	r2, [r3, #0]
  p12[3U] = (uint32_t)0xe9b5dba5U;
 c00075c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c00075e:	330c      	adds	r3, #12
 c000760:	4a8a      	ldr	r2, [pc, #552]	; (c00098c <Hacl_Impl_SHA2_256_init+0x290>)
 c000762:	601a      	str	r2, [r3, #0]
  p22[0U] = (uint32_t)0x3956c25bU;
 c000764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c000766:	4a8a      	ldr	r2, [pc, #552]	; (c000990 <Hacl_Impl_SHA2_256_init+0x294>)
 c000768:	601a      	str	r2, [r3, #0]
  p22[1U] = (uint32_t)0x59f111f1U;
 c00076a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c00076c:	3304      	adds	r3, #4
 c00076e:	4a89      	ldr	r2, [pc, #548]	; (c000994 <Hacl_Impl_SHA2_256_init+0x298>)
 c000770:	601a      	str	r2, [r3, #0]
  p22[2U] = (uint32_t)0x923f82a4U;
 c000772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c000774:	3308      	adds	r3, #8
 c000776:	4a88      	ldr	r2, [pc, #544]	; (c000998 <Hacl_Impl_SHA2_256_init+0x29c>)
 c000778:	601a      	str	r2, [r3, #0]
  p22[3U] = (uint32_t)0xab1c5ed5U;
 c00077a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c00077c:	330c      	adds	r3, #12
 c00077e:	4a87      	ldr	r2, [pc, #540]	; (c00099c <Hacl_Impl_SHA2_256_init+0x2a0>)
 c000780:	601a      	str	r2, [r3, #0]
  uint32_t *p13 = p21;
 c000782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c000784:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t *p23 = p21 + (uint32_t)4U;
 c000786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c000788:	3310      	adds	r3, #16
 c00078a:	65bb      	str	r3, [r7, #88]	; 0x58
  p13[0U] = (uint32_t)0xd807aa98U;
 c00078c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00078e:	4a84      	ldr	r2, [pc, #528]	; (c0009a0 <Hacl_Impl_SHA2_256_init+0x2a4>)
 c000790:	601a      	str	r2, [r3, #0]
  p13[1U] = (uint32_t)0x12835b01U;
 c000792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c000794:	3304      	adds	r3, #4
 c000796:	4a83      	ldr	r2, [pc, #524]	; (c0009a4 <Hacl_Impl_SHA2_256_init+0x2a8>)
 c000798:	601a      	str	r2, [r3, #0]
  p13[2U] = (uint32_t)0x243185beU;
 c00079a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00079c:	3308      	adds	r3, #8
 c00079e:	4a82      	ldr	r2, [pc, #520]	; (c0009a8 <Hacl_Impl_SHA2_256_init+0x2ac>)
 c0007a0:	601a      	str	r2, [r3, #0]
  p13[3U] = (uint32_t)0x550c7dc3U;
 c0007a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c0007a4:	330c      	adds	r3, #12
 c0007a6:	4a81      	ldr	r2, [pc, #516]	; (c0009ac <Hacl_Impl_SHA2_256_init+0x2b0>)
 c0007a8:	601a      	str	r2, [r3, #0]
  p23[0U] = (uint32_t)0x72be5d74U;
 c0007aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0007ac:	4a80      	ldr	r2, [pc, #512]	; (c0009b0 <Hacl_Impl_SHA2_256_init+0x2b4>)
 c0007ae:	601a      	str	r2, [r3, #0]
  p23[1U] = (uint32_t)0x80deb1feU;
 c0007b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0007b2:	3304      	adds	r3, #4
 c0007b4:	4a7f      	ldr	r2, [pc, #508]	; (c0009b4 <Hacl_Impl_SHA2_256_init+0x2b8>)
 c0007b6:	601a      	str	r2, [r3, #0]
  p23[2U] = (uint32_t)0x9bdc06a7U;
 c0007b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0007ba:	3308      	adds	r3, #8
 c0007bc:	4a7e      	ldr	r2, [pc, #504]	; (c0009b8 <Hacl_Impl_SHA2_256_init+0x2bc>)
 c0007be:	601a      	str	r2, [r3, #0]
  p23[3U] = (uint32_t)0xc19bf174U;
 c0007c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0007c2:	330c      	adds	r3, #12
 c0007c4:	4a7d      	ldr	r2, [pc, #500]	; (c0009bc <Hacl_Impl_SHA2_256_init+0x2c0>)
 c0007c6:	601a      	str	r2, [r3, #0]
  uint32_t *p14 = p20;
 c0007c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c0007ca:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t *p24 = p20 + (uint32_t)8U;
 c0007cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c0007ce:	3320      	adds	r3, #32
 c0007d0:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t *p15 = p14;
 c0007d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c0007d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t *p25 = p14 + (uint32_t)4U;
 c0007d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c0007d8:	3310      	adds	r3, #16
 c0007da:	64bb      	str	r3, [r7, #72]	; 0x48
  p15[0U] = (uint32_t)0xe49b69c1U;
 c0007dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0007de:	4a78      	ldr	r2, [pc, #480]	; (c0009c0 <Hacl_Impl_SHA2_256_init+0x2c4>)
 c0007e0:	601a      	str	r2, [r3, #0]
  p15[1U] = (uint32_t)0xefbe4786U;
 c0007e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0007e4:	3304      	adds	r3, #4
 c0007e6:	4a77      	ldr	r2, [pc, #476]	; (c0009c4 <Hacl_Impl_SHA2_256_init+0x2c8>)
 c0007e8:	601a      	str	r2, [r3, #0]
  p15[2U] = (uint32_t)0x0fc19dc6U;
 c0007ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0007ec:	3308      	adds	r3, #8
 c0007ee:	4a76      	ldr	r2, [pc, #472]	; (c0009c8 <Hacl_Impl_SHA2_256_init+0x2cc>)
 c0007f0:	601a      	str	r2, [r3, #0]
  p15[3U] = (uint32_t)0x240ca1ccU;
 c0007f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0007f4:	330c      	adds	r3, #12
 c0007f6:	4a75      	ldr	r2, [pc, #468]	; (c0009cc <Hacl_Impl_SHA2_256_init+0x2d0>)
 c0007f8:	601a      	str	r2, [r3, #0]
  p25[0U] = (uint32_t)0x2de92c6fU;
 c0007fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c0007fc:	4a74      	ldr	r2, [pc, #464]	; (c0009d0 <Hacl_Impl_SHA2_256_init+0x2d4>)
 c0007fe:	601a      	str	r2, [r3, #0]
  p25[1U] = (uint32_t)0x4a7484aaU;
 c000800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c000802:	3304      	adds	r3, #4
 c000804:	4a73      	ldr	r2, [pc, #460]	; (c0009d4 <Hacl_Impl_SHA2_256_init+0x2d8>)
 c000806:	601a      	str	r2, [r3, #0]
  p25[2U] = (uint32_t)0x5cb0a9dcU;
 c000808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c00080a:	3308      	adds	r3, #8
 c00080c:	4a72      	ldr	r2, [pc, #456]	; (c0009d8 <Hacl_Impl_SHA2_256_init+0x2dc>)
 c00080e:	601a      	str	r2, [r3, #0]
  p25[3U] = (uint32_t)0x76f988daU;
 c000810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c000812:	330c      	adds	r3, #12
 c000814:	4a71      	ldr	r2, [pc, #452]	; (c0009dc <Hacl_Impl_SHA2_256_init+0x2e0>)
 c000816:	601a      	str	r2, [r3, #0]
  uint32_t *p16 = p24;
 c000818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00081a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t *p26 = p24 + (uint32_t)4U;
 c00081c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00081e:	3310      	adds	r3, #16
 c000820:	643b      	str	r3, [r7, #64]	; 0x40
  p16[0U] = (uint32_t)0x983e5152U;
 c000822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c000824:	4a6e      	ldr	r2, [pc, #440]	; (c0009e0 <Hacl_Impl_SHA2_256_init+0x2e4>)
 c000826:	601a      	str	r2, [r3, #0]
  p16[1U] = (uint32_t)0xa831c66dU;
 c000828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c00082a:	3304      	adds	r3, #4
 c00082c:	4a6d      	ldr	r2, [pc, #436]	; (c0009e4 <Hacl_Impl_SHA2_256_init+0x2e8>)
 c00082e:	601a      	str	r2, [r3, #0]
  p16[2U] = (uint32_t)0xb00327c8U;
 c000830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c000832:	3308      	adds	r3, #8
 c000834:	4a6c      	ldr	r2, [pc, #432]	; (c0009e8 <Hacl_Impl_SHA2_256_init+0x2ec>)
 c000836:	601a      	str	r2, [r3, #0]
  p16[3U] = (uint32_t)0xbf597fc7U;
 c000838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c00083a:	330c      	adds	r3, #12
 c00083c:	4a6b      	ldr	r2, [pc, #428]	; (c0009ec <Hacl_Impl_SHA2_256_init+0x2f0>)
 c00083e:	601a      	str	r2, [r3, #0]
  p26[0U] = (uint32_t)0xc6e00bf3U;
 c000840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c000842:	4a6b      	ldr	r2, [pc, #428]	; (c0009f0 <Hacl_Impl_SHA2_256_init+0x2f4>)
 c000844:	601a      	str	r2, [r3, #0]
  p26[1U] = (uint32_t)0xd5a79147U;
 c000846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c000848:	3304      	adds	r3, #4
 c00084a:	4a6a      	ldr	r2, [pc, #424]	; (c0009f4 <Hacl_Impl_SHA2_256_init+0x2f8>)
 c00084c:	601a      	str	r2, [r3, #0]
  p26[2U] = (uint32_t)0x06ca6351U;
 c00084e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c000850:	3308      	adds	r3, #8
 c000852:	4a69      	ldr	r2, [pc, #420]	; (c0009f8 <Hacl_Impl_SHA2_256_init+0x2fc>)
 c000854:	601a      	str	r2, [r3, #0]
  p26[3U] = (uint32_t)0x14292967U;
 c000856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c000858:	330c      	adds	r3, #12
 c00085a:	4a68      	ldr	r2, [pc, #416]	; (c0009fc <Hacl_Impl_SHA2_256_init+0x300>)
 c00085c:	601a      	str	r2, [r3, #0]
  uint32_t *p17 = p3;
 c00085e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c000860:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t *p27 = p3 + (uint32_t)8U;
 c000862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c000864:	3320      	adds	r3, #32
 c000866:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t *p18 = p17;
 c000868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c00086a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t *p28 = p17 + (uint32_t)4U;
 c00086c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c00086e:	3310      	adds	r3, #16
 c000870:	633b      	str	r3, [r7, #48]	; 0x30
  p18[0U] = (uint32_t)0x27b70a85U;
 c000872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c000874:	4a62      	ldr	r2, [pc, #392]	; (c000a00 <Hacl_Impl_SHA2_256_init+0x304>)
 c000876:	601a      	str	r2, [r3, #0]
  p18[1U] = (uint32_t)0x2e1b2138U;
 c000878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00087a:	3304      	adds	r3, #4
 c00087c:	4a61      	ldr	r2, [pc, #388]	; (c000a04 <Hacl_Impl_SHA2_256_init+0x308>)
 c00087e:	601a      	str	r2, [r3, #0]
  p18[2U] = (uint32_t)0x4d2c6dfcU;
 c000880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c000882:	3308      	adds	r3, #8
 c000884:	4a60      	ldr	r2, [pc, #384]	; (c000a08 <Hacl_Impl_SHA2_256_init+0x30c>)
 c000886:	601a      	str	r2, [r3, #0]
  p18[3U] = (uint32_t)0x53380d13U;
 c000888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00088a:	330c      	adds	r3, #12
 c00088c:	4a5f      	ldr	r2, [pc, #380]	; (c000a0c <Hacl_Impl_SHA2_256_init+0x310>)
 c00088e:	601a      	str	r2, [r3, #0]
  p28[0U] = (uint32_t)0x650a7354U;
 c000890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c000892:	4a5f      	ldr	r2, [pc, #380]	; (c000a10 <Hacl_Impl_SHA2_256_init+0x314>)
 c000894:	601a      	str	r2, [r3, #0]
  p28[1U] = (uint32_t)0x766a0abbU;
 c000896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c000898:	3304      	adds	r3, #4
 c00089a:	4a5e      	ldr	r2, [pc, #376]	; (c000a14 <Hacl_Impl_SHA2_256_init+0x318>)
 c00089c:	601a      	str	r2, [r3, #0]
  p28[2U] = (uint32_t)0x81c2c92eU;
 c00089e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c0008a0:	3308      	adds	r3, #8
 c0008a2:	4a5d      	ldr	r2, [pc, #372]	; (c000a18 <Hacl_Impl_SHA2_256_init+0x31c>)
 c0008a4:	601a      	str	r2, [r3, #0]
  p28[3U] = (uint32_t)0x92722c85U;
 c0008a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c0008a8:	330c      	adds	r3, #12
 c0008aa:	4a5c      	ldr	r2, [pc, #368]	; (c000a1c <Hacl_Impl_SHA2_256_init+0x320>)
 c0008ac:	601a      	str	r2, [r3, #0]
  uint32_t *p19 = p27;
 c0008ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c0008b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t *p29 = p27 + (uint32_t)4U;
 c0008b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c0008b4:	3310      	adds	r3, #16
 c0008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  p19[0U] = (uint32_t)0xa2bfe8a1U;
 c0008b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0008ba:	4a59      	ldr	r2, [pc, #356]	; (c000a20 <Hacl_Impl_SHA2_256_init+0x324>)
 c0008bc:	601a      	str	r2, [r3, #0]
  p19[1U] = (uint32_t)0xa81a664bU;
 c0008be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0008c0:	3304      	adds	r3, #4
 c0008c2:	4a58      	ldr	r2, [pc, #352]	; (c000a24 <Hacl_Impl_SHA2_256_init+0x328>)
 c0008c4:	601a      	str	r2, [r3, #0]
  p19[2U] = (uint32_t)0xc24b8b70U;
 c0008c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0008c8:	3308      	adds	r3, #8
 c0008ca:	4a57      	ldr	r2, [pc, #348]	; (c000a28 <Hacl_Impl_SHA2_256_init+0x32c>)
 c0008cc:	601a      	str	r2, [r3, #0]
  p19[3U] = (uint32_t)0xc76c51a3U;
 c0008ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0008d0:	330c      	adds	r3, #12
 c0008d2:	4a56      	ldr	r2, [pc, #344]	; (c000a2c <Hacl_Impl_SHA2_256_init+0x330>)
 c0008d4:	601a      	str	r2, [r3, #0]
  p29[0U] = (uint32_t)0xd192e819U;
 c0008d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0008d8:	4a55      	ldr	r2, [pc, #340]	; (c000a30 <Hacl_Impl_SHA2_256_init+0x334>)
 c0008da:	601a      	str	r2, [r3, #0]
  p29[1U] = (uint32_t)0xd6990624U;
 c0008dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0008de:	3304      	adds	r3, #4
 c0008e0:	4a54      	ldr	r2, [pc, #336]	; (c000a34 <Hacl_Impl_SHA2_256_init+0x338>)
 c0008e2:	601a      	str	r2, [r3, #0]
  p29[2U] = (uint32_t)0xf40e3585U;
 c0008e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0008e6:	3308      	adds	r3, #8
 c0008e8:	4a53      	ldr	r2, [pc, #332]	; (c000a38 <Hacl_Impl_SHA2_256_init+0x33c>)
 c0008ea:	601a      	str	r2, [r3, #0]
  p29[3U] = (uint32_t)0x106aa070U;
 c0008ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0008ee:	330c      	adds	r3, #12
 c0008f0:	4a52      	ldr	r2, [pc, #328]	; (c000a3c <Hacl_Impl_SHA2_256_init+0x340>)
 c0008f2:	601a      	str	r2, [r3, #0]
  uint32_t *p110 = p4;
 c0008f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c0008f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t *p210 = p4 + (uint32_t)8U;
 c0008f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c0008fa:	3320      	adds	r3, #32
 c0008fc:	623b      	str	r3, [r7, #32]
  uint32_t *p1 = p110;
 c0008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c000900:	61fb      	str	r3, [r7, #28]
  uint32_t *p211 = p110 + (uint32_t)4U;
 c000902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c000904:	3310      	adds	r3, #16
 c000906:	61bb      	str	r3, [r7, #24]
  p1[0U] = (uint32_t)0x19a4c116U;
 c000908:	69fb      	ldr	r3, [r7, #28]
 c00090a:	4a4d      	ldr	r2, [pc, #308]	; (c000a40 <Hacl_Impl_SHA2_256_init+0x344>)
 c00090c:	601a      	str	r2, [r3, #0]
  p1[1U] = (uint32_t)0x1e376c08U;
 c00090e:	69fb      	ldr	r3, [r7, #28]
 c000910:	3304      	adds	r3, #4
 c000912:	4a4c      	ldr	r2, [pc, #304]	; (c000a44 <Hacl_Impl_SHA2_256_init+0x348>)
 c000914:	601a      	str	r2, [r3, #0]
  p1[2U] = (uint32_t)0x2748774cU;
 c000916:	69fb      	ldr	r3, [r7, #28]
 c000918:	3308      	adds	r3, #8
 c00091a:	4a4b      	ldr	r2, [pc, #300]	; (c000a48 <Hacl_Impl_SHA2_256_init+0x34c>)
 c00091c:	601a      	str	r2, [r3, #0]
  p1[3U] = (uint32_t)0x34b0bcb5U;
 c00091e:	69fb      	ldr	r3, [r7, #28]
 c000920:	330c      	adds	r3, #12
 c000922:	4a4a      	ldr	r2, [pc, #296]	; (c000a4c <Hacl_Impl_SHA2_256_init+0x350>)
 c000924:	601a      	str	r2, [r3, #0]
  p211[0U] = (uint32_t)0x391c0cb3U;
 c000926:	69bb      	ldr	r3, [r7, #24]
 c000928:	4a49      	ldr	r2, [pc, #292]	; (c000a50 <Hacl_Impl_SHA2_256_init+0x354>)
 c00092a:	601a      	str	r2, [r3, #0]
  p211[1U] = (uint32_t)0x4ed8aa4aU;
 c00092c:	69bb      	ldr	r3, [r7, #24]
 c00092e:	3304      	adds	r3, #4
 c000930:	4a48      	ldr	r2, [pc, #288]	; (c000a54 <Hacl_Impl_SHA2_256_init+0x358>)
 c000932:	601a      	str	r2, [r3, #0]
  p211[2U] = (uint32_t)0x5b9cca4fU;
 c000934:	69bb      	ldr	r3, [r7, #24]
 c000936:	3308      	adds	r3, #8
 c000938:	4a47      	ldr	r2, [pc, #284]	; (c000a58 <Hacl_Impl_SHA2_256_init+0x35c>)
 c00093a:	601a      	str	r2, [r3, #0]
  p211[3U] = (uint32_t)0x682e6ff3U;
 c00093c:	69bb      	ldr	r3, [r7, #24]
 c00093e:	330c      	adds	r3, #12
 c000940:	4a46      	ldr	r2, [pc, #280]	; (c000a5c <Hacl_Impl_SHA2_256_init+0x360>)
 c000942:	601a      	str	r2, [r3, #0]
  uint32_t *p111 = p210;
 c000944:	6a3b      	ldr	r3, [r7, #32]
 c000946:	617b      	str	r3, [r7, #20]
  uint32_t *p212 = p210 + (uint32_t)4U;
 c000948:	6a3b      	ldr	r3, [r7, #32]
 c00094a:	3310      	adds	r3, #16
 c00094c:	613b      	str	r3, [r7, #16]
  p111[0U] = (uint32_t)0x748f82eeU;
 c00094e:	697b      	ldr	r3, [r7, #20]
 c000950:	4a43      	ldr	r2, [pc, #268]	; (c000a60 <Hacl_Impl_SHA2_256_init+0x364>)
 c000952:	601a      	str	r2, [r3, #0]
  p111[1U] = (uint32_t)0x78a5636fU;
 c000954:	697b      	ldr	r3, [r7, #20]
 c000956:	3304      	adds	r3, #4
 c000958:	4a42      	ldr	r2, [pc, #264]	; (c000a64 <Hacl_Impl_SHA2_256_init+0x368>)
 c00095a:	601a      	str	r2, [r3, #0]
  p111[2U] = (uint32_t)0x84c87814U;
 c00095c:	697b      	ldr	r3, [r7, #20]
 c00095e:	3308      	adds	r3, #8
 c000960:	4a41      	ldr	r2, [pc, #260]	; (c000a68 <Hacl_Impl_SHA2_256_init+0x36c>)
 c000962:	601a      	str	r2, [r3, #0]
  p111[3U] = (uint32_t)0x8cc70208U;
 c000964:	697b      	ldr	r3, [r7, #20]
 c000966:	330c      	adds	r3, #12
 c000968:	4a40      	ldr	r2, [pc, #256]	; (c000a6c <Hacl_Impl_SHA2_256_init+0x370>)
 c00096a:	601a      	str	r2, [r3, #0]
  p212[0U] = (uint32_t)0x90befffaU;
 c00096c:	693b      	ldr	r3, [r7, #16]
 c00096e:	4a40      	ldr	r2, [pc, #256]	; (c000a70 <Hacl_Impl_SHA2_256_init+0x374>)
 c000970:	601a      	str	r2, [r3, #0]
  p212[1U] = (uint32_t)0xa4506cebU;
 c000972:	693b      	ldr	r3, [r7, #16]
 c000974:	3304      	adds	r3, #4
 c000976:	4a3f      	ldr	r2, [pc, #252]	; (c000a74 <Hacl_Impl_SHA2_256_init+0x378>)
 c000978:	601a      	str	r2, [r3, #0]
  p212[2U] = (uint32_t)0xbef9a3f7U;
 c00097a:	693b      	ldr	r3, [r7, #16]
 c00097c:	e07c      	b.n	c000a78 <Hacl_Impl_SHA2_256_init+0x37c>
 c00097e:	bf00      	nop
 c000980:	428a2f98 	.word	0x428a2f98
 c000984:	71374491 	.word	0x71374491
 c000988:	b5c0fbcf 	.word	0xb5c0fbcf
 c00098c:	e9b5dba5 	.word	0xe9b5dba5
 c000990:	3956c25b 	.word	0x3956c25b
 c000994:	59f111f1 	.word	0x59f111f1
 c000998:	923f82a4 	.word	0x923f82a4
 c00099c:	ab1c5ed5 	.word	0xab1c5ed5
 c0009a0:	d807aa98 	.word	0xd807aa98
 c0009a4:	12835b01 	.word	0x12835b01
 c0009a8:	243185be 	.word	0x243185be
 c0009ac:	550c7dc3 	.word	0x550c7dc3
 c0009b0:	72be5d74 	.word	0x72be5d74
 c0009b4:	80deb1fe 	.word	0x80deb1fe
 c0009b8:	9bdc06a7 	.word	0x9bdc06a7
 c0009bc:	c19bf174 	.word	0xc19bf174
 c0009c0:	e49b69c1 	.word	0xe49b69c1
 c0009c4:	efbe4786 	.word	0xefbe4786
 c0009c8:	0fc19dc6 	.word	0x0fc19dc6
 c0009cc:	240ca1cc 	.word	0x240ca1cc
 c0009d0:	2de92c6f 	.word	0x2de92c6f
 c0009d4:	4a7484aa 	.word	0x4a7484aa
 c0009d8:	5cb0a9dc 	.word	0x5cb0a9dc
 c0009dc:	76f988da 	.word	0x76f988da
 c0009e0:	983e5152 	.word	0x983e5152
 c0009e4:	a831c66d 	.word	0xa831c66d
 c0009e8:	b00327c8 	.word	0xb00327c8
 c0009ec:	bf597fc7 	.word	0xbf597fc7
 c0009f0:	c6e00bf3 	.word	0xc6e00bf3
 c0009f4:	d5a79147 	.word	0xd5a79147
 c0009f8:	06ca6351 	.word	0x06ca6351
 c0009fc:	14292967 	.word	0x14292967
 c000a00:	27b70a85 	.word	0x27b70a85
 c000a04:	2e1b2138 	.word	0x2e1b2138
 c000a08:	4d2c6dfc 	.word	0x4d2c6dfc
 c000a0c:	53380d13 	.word	0x53380d13
 c000a10:	650a7354 	.word	0x650a7354
 c000a14:	766a0abb 	.word	0x766a0abb
 c000a18:	81c2c92e 	.word	0x81c2c92e
 c000a1c:	92722c85 	.word	0x92722c85
 c000a20:	a2bfe8a1 	.word	0xa2bfe8a1
 c000a24:	a81a664b 	.word	0xa81a664b
 c000a28:	c24b8b70 	.word	0xc24b8b70
 c000a2c:	c76c51a3 	.word	0xc76c51a3
 c000a30:	d192e819 	.word	0xd192e819
 c000a34:	d6990624 	.word	0xd6990624
 c000a38:	f40e3585 	.word	0xf40e3585
 c000a3c:	106aa070 	.word	0x106aa070
 c000a40:	19a4c116 	.word	0x19a4c116
 c000a44:	1e376c08 	.word	0x1e376c08
 c000a48:	2748774c 	.word	0x2748774c
 c000a4c:	34b0bcb5 	.word	0x34b0bcb5
 c000a50:	391c0cb3 	.word	0x391c0cb3
 c000a54:	4ed8aa4a 	.word	0x4ed8aa4a
 c000a58:	5b9cca4f 	.word	0x5b9cca4f
 c000a5c:	682e6ff3 	.word	0x682e6ff3
 c000a60:	748f82ee 	.word	0x748f82ee
 c000a64:	78a5636f 	.word	0x78a5636f
 c000a68:	84c87814 	.word	0x84c87814
 c000a6c:	8cc70208 	.word	0x8cc70208
 c000a70:	90befffa 	.word	0x90befffa
 c000a74:	a4506ceb 	.word	0xa4506ceb
 c000a78:	3308      	adds	r3, #8
 c000a7a:	4a18      	ldr	r2, [pc, #96]	; (c000adc <Hacl_Impl_SHA2_256_init+0x3e0>)
 c000a7c:	601a      	str	r2, [r3, #0]
  p212[3U] = (uint32_t)0xc67178f2U;
 c000a7e:	693b      	ldr	r3, [r7, #16]
 c000a80:	330c      	adds	r3, #12
 c000a82:	4a17      	ldr	r2, [pc, #92]	; (c000ae0 <Hacl_Impl_SHA2_256_init+0x3e4>)
 c000a84:	601a      	str	r2, [r3, #0]
  uint32_t *p112 = h_01;
 c000a86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000a8a:	60fb      	str	r3, [r7, #12]
  uint32_t *p2 = h_01 + (uint32_t)4U;
 c000a8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000a90:	3310      	adds	r3, #16
 c000a92:	60bb      	str	r3, [r7, #8]
  p112[0U] = (uint32_t)0x6a09e667U;
 c000a94:	68fb      	ldr	r3, [r7, #12]
 c000a96:	4a13      	ldr	r2, [pc, #76]	; (c000ae4 <Hacl_Impl_SHA2_256_init+0x3e8>)
 c000a98:	601a      	str	r2, [r3, #0]
  p112[1U] = (uint32_t)0xbb67ae85U;
 c000a9a:	68fb      	ldr	r3, [r7, #12]
 c000a9c:	3304      	adds	r3, #4
 c000a9e:	4a12      	ldr	r2, [pc, #72]	; (c000ae8 <Hacl_Impl_SHA2_256_init+0x3ec>)
 c000aa0:	601a      	str	r2, [r3, #0]
  p112[2U] = (uint32_t)0x3c6ef372U;
 c000aa2:	68fb      	ldr	r3, [r7, #12]
 c000aa4:	3308      	adds	r3, #8
 c000aa6:	4a11      	ldr	r2, [pc, #68]	; (c000aec <Hacl_Impl_SHA2_256_init+0x3f0>)
 c000aa8:	601a      	str	r2, [r3, #0]
  p112[3U] = (uint32_t)0xa54ff53aU;
 c000aaa:	68fb      	ldr	r3, [r7, #12]
 c000aac:	330c      	adds	r3, #12
 c000aae:	4a10      	ldr	r2, [pc, #64]	; (c000af0 <Hacl_Impl_SHA2_256_init+0x3f4>)
 c000ab0:	601a      	str	r2, [r3, #0]
  p2[0U] = (uint32_t)0x510e527fU;
 c000ab2:	68bb      	ldr	r3, [r7, #8]
 c000ab4:	4a0f      	ldr	r2, [pc, #60]	; (c000af4 <Hacl_Impl_SHA2_256_init+0x3f8>)
 c000ab6:	601a      	str	r2, [r3, #0]
  p2[1U] = (uint32_t)0x9b05688cU;
 c000ab8:	68bb      	ldr	r3, [r7, #8]
 c000aba:	3304      	adds	r3, #4
 c000abc:	4a0e      	ldr	r2, [pc, #56]	; (c000af8 <Hacl_Impl_SHA2_256_init+0x3fc>)
 c000abe:	601a      	str	r2, [r3, #0]
  p2[2U] = (uint32_t)0x1f83d9abU;
 c000ac0:	68bb      	ldr	r3, [r7, #8]
 c000ac2:	3308      	adds	r3, #8
 c000ac4:	4a0d      	ldr	r2, [pc, #52]	; (c000afc <Hacl_Impl_SHA2_256_init+0x400>)
 c000ac6:	601a      	str	r2, [r3, #0]
  p2[3U] = (uint32_t)0x5be0cd19U;
 c000ac8:	68bb      	ldr	r3, [r7, #8]
 c000aca:	330c      	adds	r3, #12
 c000acc:	4a0c      	ldr	r2, [pc, #48]	; (c000b00 <Hacl_Impl_SHA2_256_init+0x404>)
 c000ace:	601a      	str	r2, [r3, #0]
}
 c000ad0:	bf00      	nop
 c000ad2:	378c      	adds	r7, #140	; 0x8c
 c000ad4:	46bd      	mov	sp, r7
 c000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ada:	4770      	bx	lr
 c000adc:	bef9a3f7 	.word	0xbef9a3f7
 c000ae0:	c67178f2 	.word	0xc67178f2
 c000ae4:	6a09e667 	.word	0x6a09e667
 c000ae8:	bb67ae85 	.word	0xbb67ae85
 c000aec:	3c6ef372 	.word	0x3c6ef372
 c000af0:	a54ff53a 	.word	0xa54ff53a
 c000af4:	510e527f 	.word	0x510e527f
 c000af8:	9b05688c 	.word	0x9b05688c
 c000afc:	1f83d9ab 	.word	0x1f83d9ab
 c000b00:	5be0cd19 	.word	0x5be0cd19

0c000b04 <Hacl_Impl_SHA2_256_update>:

static void Hacl_Impl_SHA2_256_update(uint32_t *state, uint8_t *data)
{
 c000b04:	b580      	push	{r7, lr}
 c000b06:	b0bc      	sub	sp, #240	; 0xf0
 c000b08:	af00      	add	r7, sp, #0
 c000b0a:	6078      	str	r0, [r7, #4]
 c000b0c:	6039      	str	r1, [r7, #0]
  uint32_t data_w[16U] = { 0U };
 c000b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c000b12:	2240      	movs	r2, #64	; 0x40
 c000b14:	2100      	movs	r1, #0
 c000b16:	4618      	mov	r0, r3
 c000b18:	f007 fc35 	bl	c008386 <memset>
  Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes(data_w, data, (uint32_t)16U);
 c000b1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c000b20:	2210      	movs	r2, #16
 c000b22:	6839      	ldr	r1, [r7, #0]
 c000b24:	4618      	mov	r0, r3
 c000b26:	f7ff fd7f 	bl	c000628 <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes>
  uint32_t *hash_w = state + (uint32_t)128U;
 c000b2a:	687b      	ldr	r3, [r7, #4]
 c000b2c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 c000b30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t *ws_w = state + (uint32_t)64U;
 c000b34:	687b      	ldr	r3, [r7, #4]
 c000b36:	f503 7380 	add.w	r3, r3, #256	; 0x100
 c000b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t *k_w = state;
 c000b3e:	687b      	ldr	r3, [r7, #4]
 c000b40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  uint32_t *counter_w = state + (uint32_t)136U;
 c000b44:	687b      	ldr	r3, [r7, #4]
 c000b46:	f503 7308 	add.w	r3, r3, #544	; 0x220
 c000b4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)16U; i = i + (uint32_t)1U)
 c000b4e:	2300      	movs	r3, #0
 c000b50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c000b54:	e014      	b.n	c000b80 <Hacl_Impl_SHA2_256_update+0x7c>
  {
    uint32_t b = data_w[i];
 c000b56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000b5a:	009b      	lsls	r3, r3, #2
 c000b5c:	33f0      	adds	r3, #240	; 0xf0
 c000b5e:	443b      	add	r3, r7
 c000b60:	f853 3cc4 	ldr.w	r3, [r3, #-196]
 c000b64:	66fb      	str	r3, [r7, #108]	; 0x6c
    ws_w[i] = b;
 c000b66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000b6a:	009b      	lsls	r3, r3, #2
 c000b6c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000b70:	4413      	add	r3, r2
 c000b72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 c000b74:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)16U; i = i + (uint32_t)1U)
 c000b76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000b7a:	3301      	adds	r3, #1
 c000b7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c000b80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000b84:	2b0f      	cmp	r3, #15
 c000b86:	d9e6      	bls.n	c000b56 <Hacl_Impl_SHA2_256_update+0x52>
  }
  for (uint32_t i = (uint32_t)16U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000b88:	2310      	movs	r3, #16
 c000b8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 c000b8e:	e050      	b.n	c000c32 <Hacl_Impl_SHA2_256_update+0x12e>
  {
    uint32_t t16 = ws_w[i - (uint32_t)16U];
 c000b90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000b94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c000b98:	3b10      	subs	r3, #16
 c000b9a:	009b      	lsls	r3, r3, #2
 c000b9c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000ba0:	4413      	add	r3, r2
 c000ba2:	681b      	ldr	r3, [r3, #0]
 c000ba4:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint32_t t15 = ws_w[i - (uint32_t)15U];
 c000ba6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000baa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c000bae:	3b0f      	subs	r3, #15
 c000bb0:	009b      	lsls	r3, r3, #2
 c000bb2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000bb6:	4413      	add	r3, r2
 c000bb8:	681b      	ldr	r3, [r3, #0]
 c000bba:	67bb      	str	r3, [r7, #120]	; 0x78
    uint32_t t7 = ws_w[i - (uint32_t)7U];
 c000bbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000bc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c000bc4:	3b07      	subs	r3, #7
 c000bc6:	009b      	lsls	r3, r3, #2
 c000bc8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000bcc:	4413      	add	r3, r2
 c000bce:	681b      	ldr	r3, [r3, #0]
 c000bd0:	677b      	str	r3, [r7, #116]	; 0x74
    uint32_t t2 = ws_w[i - (uint32_t)2U];
 c000bd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000bd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c000bda:	3b02      	subs	r3, #2
 c000bdc:	009b      	lsls	r3, r3, #2
 c000bde:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000be2:	4413      	add	r3, r2
 c000be4:	681b      	ldr	r3, [r3, #0]
 c000be6:	673b      	str	r3, [r7, #112]	; 0x70
    ws_w[i] =
      ((t2 >> (uint32_t)17U | t2 << ((uint32_t)32U - (uint32_t)17U))
 c000be8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c000bea:	ea4f 4273 	mov.w	r2, r3, ror #17
      ^ ((t2 >> (uint32_t)19U | t2 << ((uint32_t)32U - (uint32_t)19U)) ^ t2 >> (uint32_t)10U))
 c000bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c000bf0:	ea4f 41f3 	mov.w	r1, r3, ror #19
 c000bf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c000bf6:	0a9b      	lsrs	r3, r3, #10
 c000bf8:	404b      	eors	r3, r1
 c000bfa:	405a      	eors	r2, r3
      +
 c000bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c000bfe:	441a      	add	r2, r3
        t7
        +
          ((t15 >> (uint32_t)7U | t15 << ((uint32_t)32U - (uint32_t)7U))
 c000c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c000c02:	ea4f 11f3 	mov.w	r1, r3, ror #7
          ^ ((t15 >> (uint32_t)18U | t15 << ((uint32_t)32U - (uint32_t)18U)) ^ t15 >> (uint32_t)3U))
 c000c06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c000c08:	ea4f 40b3 	mov.w	r0, r3, ror #18
 c000c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c000c0e:	08db      	lsrs	r3, r3, #3
 c000c10:	4043      	eors	r3, r0
 c000c12:	404b      	eors	r3, r1
        +
 c000c14:	18d1      	adds	r1, r2, r3
    ws_w[i] =
 c000c16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000c1a:	009b      	lsls	r3, r3, #2
 c000c1c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000c20:	4413      	add	r3, r2
          + t16;
 c000c22:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 c000c24:	440a      	add	r2, r1
    ws_w[i] =
 c000c26:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)16U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000c28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000c2c:	3301      	adds	r3, #1
 c000c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 c000c32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000c36:	2b3f      	cmp	r3, #63	; 0x3f
 c000c38:	d9aa      	bls.n	c000b90 <Hacl_Impl_SHA2_256_update+0x8c>
  }
  uint32_t hash_0[8U] = { 0U };
 c000c3a:	f107 030c 	add.w	r3, r7, #12
 c000c3e:	2220      	movs	r2, #32
 c000c40:	2100      	movs	r1, #0
 c000c42:	4618      	mov	r0, r3
 c000c44:	f007 fb9f 	bl	c008386 <memset>
  memcpy(hash_0, hash_w, (uint32_t)8U * sizeof hash_w[0U]);
 c000c48:	f107 030c 	add.w	r3, r7, #12
 c000c4c:	2220      	movs	r2, #32
 c000c4e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 c000c52:	4618      	mov	r0, r3
 c000c54:	f007 fb8a 	bl	c00836c <memcpy>
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000c58:	2300      	movs	r3, #0
 c000c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c000c5e:	e0b8      	b.n	c000dd2 <Hacl_Impl_SHA2_256_update+0x2ce>
  {
    uint32_t a = hash_0[0U];
 c000c60:	68fb      	ldr	r3, [r7, #12]
 c000c62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    uint32_t b = hash_0[1U];
 c000c66:	693b      	ldr	r3, [r7, #16]
 c000c68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    uint32_t c = hash_0[2U];
 c000c6c:	697b      	ldr	r3, [r7, #20]
 c000c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    uint32_t d = hash_0[3U];
 c000c72:	69bb      	ldr	r3, [r7, #24]
 c000c74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint32_t e = hash_0[4U];
 c000c78:	69fb      	ldr	r3, [r7, #28]
 c000c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    uint32_t f1 = hash_0[5U];
 c000c7e:	6a3b      	ldr	r3, [r7, #32]
 c000c80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    uint32_t g = hash_0[6U];
 c000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c000c86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    uint32_t h = hash_0[7U];
 c000c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c000c8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    uint32_t kt = k_w[i];
 c000c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000c94:	009b      	lsls	r3, r3, #2
 c000c96:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 c000c9a:	4413      	add	r3, r2
 c000c9c:	681b      	ldr	r3, [r3, #0]
 c000c9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint32_t wst = ws_w[i];
 c000ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000ca6:	009b      	lsls	r3, r3, #2
 c000ca8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000cac:	4413      	add	r3, r2
 c000cae:	681b      	ldr	r3, [r3, #0]
 c000cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint32_t
    t1 =
      h
      +
        ((e >> (uint32_t)6U | e << ((uint32_t)32U - (uint32_t)6U))
 c000cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000cb8:	ea4f 12b3 	mov.w	r2, r3, ror #6
        ^
          ((e >> (uint32_t)11U | e << ((uint32_t)32U - (uint32_t)11U))
 c000cbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000cc0:	ea4f 21f3 	mov.w	r1, r3, ror #11
          ^ (e >> (uint32_t)25U | e << ((uint32_t)32U - (uint32_t)25U))))
 c000cc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000cc8:	ea4f 6373 	mov.w	r3, r3, ror #25
 c000ccc:	404b      	eors	r3, r1
        ^
 c000cce:	405a      	eors	r2, r3
      +
 c000cd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 c000cd4:	441a      	add	r2, r3
      + ((e & f1) ^ (~e & g))
 c000cd6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 c000cda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 c000cde:	4019      	ands	r1, r3
 c000ce0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000ce4:	43d8      	mvns	r0, r3
 c000ce6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 c000cea:	4003      	ands	r3, r0
 c000cec:	404b      	eors	r3, r1
 c000cee:	441a      	add	r2, r3
      + kt
 c000cf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 c000cf4:	4413      	add	r3, r2
    t1 =
 c000cf6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 c000cfa:	4413      	add	r3, r2
 c000cfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      + wst;
    uint32_t
    t2 =
      ((a >> (uint32_t)2U | a << ((uint32_t)32U - (uint32_t)2U))
 c000d00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c000d04:	ea4f 02b3 	mov.w	r2, r3, ror #2
      ^
        ((a >> (uint32_t)13U | a << ((uint32_t)32U - (uint32_t)13U))
 c000d08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c000d0c:	ea4f 3173 	mov.w	r1, r3, ror #13
        ^ (a >> (uint32_t)22U | a << ((uint32_t)32U - (uint32_t)22U))))
 c000d10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c000d14:	ea4f 53b3 	mov.w	r3, r3, ror #22
 c000d18:	404b      	eors	r3, r1
      ^
 c000d1a:	405a      	eors	r2, r3
      + ((a & b) ^ ((a & c) ^ (b & c)));
 c000d1c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 c000d20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c000d24:	4019      	ands	r1, r3
 c000d26:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 c000d2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c000d2e:	4058      	eors	r0, r3
 c000d30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000d34:	4003      	ands	r3, r0
 c000d36:	404b      	eors	r3, r1
    t2 =
 c000d38:	4413      	add	r3, r2
 c000d3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    uint32_t x1 = t1 + t2;
 c000d3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 c000d42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c000d46:	4413      	add	r3, r2
 c000d48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint32_t x5 = d + t1;
 c000d4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 c000d50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 c000d54:	4413      	add	r3, r2
 c000d56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    uint32_t *p1 = hash_0;
 c000d5a:	f107 030c 	add.w	r3, r7, #12
 c000d5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint32_t *p2 = hash_0 + (uint32_t)4U;
 c000d62:	f107 030c 	add.w	r3, r7, #12
 c000d66:	3310      	adds	r3, #16
 c000d68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    p1[0U] = x1;
 c000d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000d70:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 c000d74:	601a      	str	r2, [r3, #0]
    p1[1U] = a;
 c000d76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000d7a:	3304      	adds	r3, #4
 c000d7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 c000d80:	601a      	str	r2, [r3, #0]
    p1[2U] = b;
 c000d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000d86:	3308      	adds	r3, #8
 c000d88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 c000d8c:	601a      	str	r2, [r3, #0]
    p1[3U] = c;
 c000d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000d92:	330c      	adds	r3, #12
 c000d94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 c000d98:	601a      	str	r2, [r3, #0]
    p2[0U] = x5;
 c000d9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000d9e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 c000da2:	601a      	str	r2, [r3, #0]
    p2[1U] = e;
 c000da4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000da8:	3304      	adds	r3, #4
 c000daa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 c000dae:	601a      	str	r2, [r3, #0]
    p2[2U] = f1;
 c000db0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000db4:	3308      	adds	r3, #8
 c000db6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 c000dba:	601a      	str	r2, [r3, #0]
    p2[3U] = g;
 c000dbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000dc0:	330c      	adds	r3, #12
 c000dc2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 c000dc6:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000dcc:	3301      	adds	r3, #1
 c000dce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c000dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000dd6:	2b3f      	cmp	r3, #63	; 0x3f
 c000dd8:	f67f af42 	bls.w	c000c60 <Hacl_Impl_SHA2_256_update+0x15c>
  }
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)8U; i = i + (uint32_t)1U)
 c000ddc:	2300      	movs	r3, #0
 c000dde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c000de2:	e022      	b.n	c000e2a <Hacl_Impl_SHA2_256_update+0x326>
  {
    uint32_t xi = hash_w[i];
 c000de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000de8:	009b      	lsls	r3, r3, #2
 c000dea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 c000dee:	4413      	add	r3, r2
 c000df0:	681b      	ldr	r3, [r3, #0]
 c000df2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    uint32_t yi = hash_0[i];
 c000df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000dfa:	009b      	lsls	r3, r3, #2
 c000dfc:	33f0      	adds	r3, #240	; 0xf0
 c000dfe:	443b      	add	r3, r7
 c000e00:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 c000e04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    hash_w[i] = xi + yi;
 c000e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000e0c:	009b      	lsls	r3, r3, #2
 c000e0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 c000e12:	4413      	add	r3, r2
 c000e14:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 c000e18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 c000e1c:	440a      	add	r2, r1
 c000e1e:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)8U; i = i + (uint32_t)1U)
 c000e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000e24:	3301      	adds	r3, #1
 c000e26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c000e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000e2e:	2b07      	cmp	r3, #7
 c000e30:	d9d8      	bls.n	c000de4 <Hacl_Impl_SHA2_256_update+0x2e0>
  }
  uint32_t c0 = counter_w[0U];
 c000e32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 c000e36:	681b      	ldr	r3, [r3, #0]
 c000e38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  uint32_t one1 = (uint32_t)1U;
 c000e3c:	2301      	movs	r3, #1
 c000e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  counter_w[0U] = c0 + one1;
 c000e42:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 c000e46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 c000e4a:	441a      	add	r2, r3
 c000e4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 c000e50:	601a      	str	r2, [r3, #0]
}
 c000e52:	bf00      	nop
 c000e54:	37f0      	adds	r7, #240	; 0xf0
 c000e56:	46bd      	mov	sp, r7
 c000e58:	bd80      	pop	{r7, pc}

0c000e5a <Hacl_Impl_SHA2_256_update_multi>:

static void Hacl_Impl_SHA2_256_update_multi(uint32_t *state, uint8_t *data, uint32_t n1)
{
 c000e5a:	b580      	push	{r7, lr}
 c000e5c:	b086      	sub	sp, #24
 c000e5e:	af00      	add	r7, sp, #0
 c000e60:	60f8      	str	r0, [r7, #12]
 c000e62:	60b9      	str	r1, [r7, #8]
 c000e64:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < n1; i = i + (uint32_t)1U)
 c000e66:	2300      	movs	r3, #0
 c000e68:	617b      	str	r3, [r7, #20]
 c000e6a:	e00b      	b.n	c000e84 <Hacl_Impl_SHA2_256_update_multi+0x2a>
  {
    uint8_t *b = data + i * (uint32_t)64U;
 c000e6c:	697b      	ldr	r3, [r7, #20]
 c000e6e:	019b      	lsls	r3, r3, #6
 c000e70:	68ba      	ldr	r2, [r7, #8]
 c000e72:	4413      	add	r3, r2
 c000e74:	613b      	str	r3, [r7, #16]
    Hacl_Impl_SHA2_256_update(state, b);
 c000e76:	6939      	ldr	r1, [r7, #16]
 c000e78:	68f8      	ldr	r0, [r7, #12]
 c000e7a:	f7ff fe43 	bl	c000b04 <Hacl_Impl_SHA2_256_update>
  for (uint32_t i = (uint32_t)0U; i < n1; i = i + (uint32_t)1U)
 c000e7e:	697b      	ldr	r3, [r7, #20]
 c000e80:	3301      	adds	r3, #1
 c000e82:	617b      	str	r3, [r7, #20]
 c000e84:	697a      	ldr	r2, [r7, #20]
 c000e86:	687b      	ldr	r3, [r7, #4]
 c000e88:	429a      	cmp	r2, r3
 c000e8a:	d3ef      	bcc.n	c000e6c <Hacl_Impl_SHA2_256_update_multi+0x12>
  }
}
 c000e8c:	bf00      	nop
 c000e8e:	bf00      	nop
 c000e90:	3718      	adds	r7, #24
 c000e92:	46bd      	mov	sp, r7
 c000e94:	bd80      	pop	{r7, pc}

0c000e96 <Hacl_Impl_SHA2_256_update_last>:

static void Hacl_Impl_SHA2_256_update_last(uint32_t *state, uint8_t *data, uint32_t len)
{
 c000e96:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c000e9a:	b0ba      	sub	sp, #232	; 0xe8
 c000e9c:	af00      	add	r7, sp, #0
 c000e9e:	6278      	str	r0, [r7, #36]	; 0x24
 c000ea0:	6239      	str	r1, [r7, #32]
 c000ea2:	61fa      	str	r2, [r7, #28]
  uint8_t blocks[128U] = { 0U };
 c000ea4:	2300      	movs	r3, #0
 c000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 c000ea8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 c000eac:	237c      	movs	r3, #124	; 0x7c
 c000eae:	461a      	mov	r2, r3
 c000eb0:	2100      	movs	r1, #0
 c000eb2:	f007 fa68 	bl	c008386 <memset>
  uint32_t nb;
  if (len < (uint32_t)56U)
 c000eb6:	69fb      	ldr	r3, [r7, #28]
 c000eb8:	2b37      	cmp	r3, #55	; 0x37
 c000eba:	d803      	bhi.n	c000ec4 <Hacl_Impl_SHA2_256_update_last+0x2e>
    nb = (uint32_t)1U;
 c000ebc:	2301      	movs	r3, #1
 c000ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c000ec2:	e002      	b.n	c000eca <Hacl_Impl_SHA2_256_update_last+0x34>
  else
    nb = (uint32_t)2U;
 c000ec4:	2302      	movs	r3, #2
 c000ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint8_t *final_blocks;
  if (len < (uint32_t)56U)
 c000eca:	69fb      	ldr	r3, [r7, #28]
 c000ecc:	2b37      	cmp	r3, #55	; 0x37
 c000ece:	d805      	bhi.n	c000edc <Hacl_Impl_SHA2_256_update_last+0x46>
    final_blocks = blocks + (uint32_t)64U;
 c000ed0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 c000ed4:	3340      	adds	r3, #64	; 0x40
 c000ed6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c000eda:	e003      	b.n	c000ee4 <Hacl_Impl_SHA2_256_update_last+0x4e>
  else
    final_blocks = blocks;
 c000edc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 c000ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  memcpy(final_blocks, data, len * sizeof data[0U]);
 c000ee4:	69fa      	ldr	r2, [r7, #28]
 c000ee6:	6a39      	ldr	r1, [r7, #32]
 c000ee8:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 c000eec:	f007 fa3e 	bl	c00836c <memcpy>
  uint32_t n1 = state[136U];
 c000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c000ef2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 c000ef6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint8_t *padding = final_blocks + len;
 c000efa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 c000efe:	69fb      	ldr	r3, [r7, #28]
 c000f00:	4413      	add	r3, r2
 c000f02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t
  pad0len = ((uint32_t)64U - (len + (uint32_t)8U + (uint32_t)1U) % (uint32_t)64U) % (uint32_t)64U;
 c000f06:	69fa      	ldr	r2, [r7, #28]
 c000f08:	f06f 0308 	mvn.w	r3, #8
 c000f0c:	1a9b      	subs	r3, r3, r2
 c000f0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c000f12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  uint8_t *buf1 = padding;
 c000f16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 c000f1a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  uint8_t *buf2 = padding + (uint32_t)1U + pad0len;
 c000f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 c000f22:	3301      	adds	r3, #1
 c000f24:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000f28:	4413      	add	r3, r2
 c000f2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  uint64_t
  encodedlen = ((uint64_t)n1 * (uint64_t)(uint32_t)64U + (uint64_t)len) * (uint64_t)(uint32_t)8U;
 c000f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 c000f32:	2200      	movs	r2, #0
 c000f34:	4698      	mov	r8, r3
 c000f36:	4691      	mov	r9, r2
 c000f38:	f04f 0200 	mov.w	r2, #0
 c000f3c:	f04f 0300 	mov.w	r3, #0
 c000f40:	ea4f 1389 	mov.w	r3, r9, lsl #6
 c000f44:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 c000f48:	ea4f 1288 	mov.w	r2, r8, lsl #6
 c000f4c:	69f9      	ldr	r1, [r7, #28]
 c000f4e:	2000      	movs	r0, #0
 c000f50:	6139      	str	r1, [r7, #16]
 c000f52:	6178      	str	r0, [r7, #20]
 c000f54:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 c000f58:	4641      	mov	r1, r8
 c000f5a:	1854      	adds	r4, r2, r1
 c000f5c:	4649      	mov	r1, r9
 c000f5e:	eb43 0101 	adc.w	r1, r3, r1
 c000f62:	460d      	mov	r5, r1
 c000f64:	f04f 0200 	mov.w	r2, #0
 c000f68:	f04f 0300 	mov.w	r3, #0
 c000f6c:	00eb      	lsls	r3, r5, #3
 c000f6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 c000f72:	00e2      	lsls	r2, r4, #3
 c000f74:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  buf1[0U] = (uint8_t)0x80U;
 c000f78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 c000f7c:	2280      	movs	r2, #128	; 0x80
 c000f7e:	701a      	strb	r2, [r3, #0]
  store64_be(buf2, encodedlen);
 c000f80:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 c000f84:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 c000f88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c000f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 c000f90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000f94:	0e1a      	lsrs	r2, r3, #24
 c000f96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000f9a:	0a1b      	lsrs	r3, r3, #8
 c000f9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c000fa0:	431a      	orrs	r2, r3
 c000fa2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000fa6:	021b      	lsls	r3, r3, #8
 c000fa8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c000fac:	431a      	orrs	r2, r3
 c000fae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000fb2:	061b      	lsls	r3, r3, #24
 c000fb4:	4313      	orrs	r3, r2
 c000fb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 c000fba:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 c000fbe:	f04f 0200 	mov.w	r2, #0
 c000fc2:	f04f 0300 	mov.w	r3, #0
 c000fc6:	000a      	movs	r2, r1
 c000fc8:	2300      	movs	r3, #0
 c000fca:	4613      	mov	r3, r2
 c000fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 c000fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000fd4:	0e1a      	lsrs	r2, r3, #24
 c000fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000fda:	0a1b      	lsrs	r3, r3, #8
 c000fdc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c000fe0:	431a      	orrs	r2, r3
 c000fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000fe6:	021b      	lsls	r3, r3, #8
 c000fe8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c000fec:	431a      	orrs	r2, r3
 c000fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000ff2:	061b      	lsls	r3, r3, #24
 c000ff4:	4313      	orrs	r3, r2
 c000ff6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 c000ffa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c000ffe:	2200      	movs	r2, #0
 c001000:	60bb      	str	r3, [r7, #8]
 c001002:	60fa      	str	r2, [r7, #12]
 c001004:	f04f 0200 	mov.w	r2, #0
 c001008:	f04f 0300 	mov.w	r3, #0
 c00100c:	68b9      	ldr	r1, [r7, #8]
 c00100e:	000b      	movs	r3, r1
 c001010:	2200      	movs	r2, #0
 c001012:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 c001016:	2000      	movs	r0, #0
 c001018:	468a      	mov	sl, r1
 c00101a:	4683      	mov	fp, r0
 c00101c:	ea42 010a 	orr.w	r1, r2, sl
 c001020:	6039      	str	r1, [r7, #0]
 c001022:	ea43 030b 	orr.w	r3, r3, fp
 c001026:	607b      	str	r3, [r7, #4]
 c001028:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00102c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 c001030:	f7ff faea 	bl	c000608 <store64>
  Hacl_Impl_SHA2_256_update_multi(state, final_blocks, nb);
 c001034:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 c001038:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 c00103c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 c00103e:	f7ff ff0c 	bl	c000e5a <Hacl_Impl_SHA2_256_update_multi>
}
 c001042:	bf00      	nop
 c001044:	37e8      	adds	r7, #232	; 0xe8
 c001046:	46bd      	mov	sp, r7
 c001048:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0c00104c <Hacl_Impl_SHA2_256_finish>:

static void Hacl_Impl_SHA2_256_finish(uint32_t *state, uint8_t *hash1)
{
 c00104c:	b580      	push	{r7, lr}
 c00104e:	b084      	sub	sp, #16
 c001050:	af00      	add	r7, sp, #0
 c001052:	6078      	str	r0, [r7, #4]
 c001054:	6039      	str	r1, [r7, #0]
  uint32_t *hash_w = state + (uint32_t)128U;
 c001056:	687b      	ldr	r3, [r7, #4]
 c001058:	f503 7300 	add.w	r3, r3, #512	; 0x200
 c00105c:	60fb      	str	r3, [r7, #12]
  Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes(hash1, hash_w, (uint32_t)8U);
 c00105e:	2208      	movs	r2, #8
 c001060:	68f9      	ldr	r1, [r7, #12]
 c001062:	6838      	ldr	r0, [r7, #0]
 c001064:	f7ff fb14 	bl	c000690 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes>
}
 c001068:	bf00      	nop
 c00106a:	3710      	adds	r7, #16
 c00106c:	46bd      	mov	sp, r7
 c00106e:	bd80      	pop	{r7, pc}

0c001070 <Hacl_Impl_SHA2_256_hash>:

static void Hacl_Impl_SHA2_256_hash(uint8_t *hash1, uint8_t *input, uint32_t len)
{
 c001070:	b580      	push	{r7, lr}
 c001072:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 c001076:	af00      	add	r7, sp, #0
 c001078:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c00107c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 c001080:	6018      	str	r0, [r3, #0]
 c001082:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001086:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 c00108a:	6019      	str	r1, [r3, #0]
 c00108c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001090:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 c001094:	601a      	str	r2, [r3, #0]
  uint32_t state[137U] = { 0U };
 c001096:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c00109a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 c00109e:	4618      	mov	r0, r3
 c0010a0:	f44f 7309 	mov.w	r3, #548	; 0x224
 c0010a4:	461a      	mov	r2, r3
 c0010a6:	2100      	movs	r1, #0
 c0010a8:	f007 f96d 	bl	c008386 <memset>
  uint32_t n1 = len / (uint32_t)64U;
 c0010ac:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c0010b0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 c0010b4:	681b      	ldr	r3, [r3, #0]
 c0010b6:	099b      	lsrs	r3, r3, #6
 c0010b8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
  uint32_t r = len % (uint32_t)64U;
 c0010bc:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c0010c0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 c0010c4:	681b      	ldr	r3, [r3, #0]
 c0010c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c0010ca:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
  uint8_t *input_blocks = input;
 c0010ce:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c0010d2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 c0010d6:	681b      	ldr	r3, [r3, #0]
 c0010d8:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  uint8_t *input_last = input + n1 * (uint32_t)64U;
 c0010dc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 c0010e0:	019b      	lsls	r3, r3, #6
 c0010e2:	f507 7212 	add.w	r2, r7, #584	; 0x248
 c0010e6:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 c0010ea:	6812      	ldr	r2, [r2, #0]
 c0010ec:	4413      	add	r3, r2
 c0010ee:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
  Hacl_Impl_SHA2_256_init(state);
 c0010f2:	f107 0314 	add.w	r3, r7, #20
 c0010f6:	4618      	mov	r0, r3
 c0010f8:	f7ff fb00 	bl	c0006fc <Hacl_Impl_SHA2_256_init>
  Hacl_Impl_SHA2_256_update_multi(state, input_blocks, n1);
 c0010fc:	f107 0314 	add.w	r3, r7, #20
 c001100:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 c001104:	f8d7 123c 	ldr.w	r1, [r7, #572]	; 0x23c
 c001108:	4618      	mov	r0, r3
 c00110a:	f7ff fea6 	bl	c000e5a <Hacl_Impl_SHA2_256_update_multi>
  Hacl_Impl_SHA2_256_update_last(state, input_last, r);
 c00110e:	f107 0314 	add.w	r3, r7, #20
 c001112:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 c001116:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 c00111a:	4618      	mov	r0, r3
 c00111c:	f7ff febb 	bl	c000e96 <Hacl_Impl_SHA2_256_update_last>
  Hacl_Impl_SHA2_256_finish(state, hash1);
 c001120:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001124:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 c001128:	f107 0214 	add.w	r2, r7, #20
 c00112c:	6819      	ldr	r1, [r3, #0]
 c00112e:	4610      	mov	r0, r2
 c001130:	f7ff ff8c 	bl	c00104c <Hacl_Impl_SHA2_256_finish>
}
 c001134:	bf00      	nop
 c001136:	f507 7712 	add.w	r7, r7, #584	; 0x248
 c00113a:	46bd      	mov	sp, r7
 c00113c:	bd80      	pop	{r7, pc}

0c00113e <Hacl_SHA2_256_hash>:
{
  Hacl_Impl_SHA2_256_finish(state, hash1);
}

void Hacl_SHA2_256_hash(uint8_t *hash1, uint8_t *input, uint32_t len)
{
 c00113e:	b580      	push	{r7, lr}
 c001140:	b084      	sub	sp, #16
 c001142:	af00      	add	r7, sp, #0
 c001144:	60f8      	str	r0, [r7, #12]
 c001146:	60b9      	str	r1, [r7, #8]
 c001148:	607a      	str	r2, [r7, #4]
  Hacl_Impl_SHA2_256_hash(hash1, input, len);
 c00114a:	687a      	ldr	r2, [r7, #4]
 c00114c:	68b9      	ldr	r1, [r7, #8]
 c00114e:	68f8      	ldr	r0, [r7, #12]
 c001150:	f7ff ff8e 	bl	c001070 <Hacl_Impl_SHA2_256_hash>
}
 c001154:	bf00      	nop
 c001156:	3710      	adds	r7, #16
 c001158:	46bd      	mov	sp, r7
 c00115a:	bd80      	pop	{r7, pc}

0c00115c <_setup_data>:
	----------------------------- SUPERVISOR  --------------------------------------------
	---------------------------------------------------------------------------------
*/

//-------------------------- UTILS -------//
void _setup_data(){
 c00115c:	b480      	push	{r7}
 c00115e:	b083      	sub	sp, #12
 c001160:	af00      	add	r7, sp, #0
	for(unsigned int i = 0; i < CHAL_SIZE; ++i ){
 c001162:	2300      	movs	r3, #0
 c001164:	607b      	str	r3, [r7, #4]
 c001166:	e014      	b.n	c001192 <_setup_data+0x36>
		cfa_engine_conf.hash_key[i] = i;
 c001168:	687b      	ldr	r3, [r7, #4]
 c00116a:	b2d9      	uxtb	r1, r3
 c00116c:	4a0e      	ldr	r2, [pc, #56]	; (c0011a8 <_setup_data+0x4c>)
 c00116e:	687b      	ldr	r3, [r7, #4]
 c001170:	4413      	add	r3, r2
 c001172:	334a      	adds	r3, #74	; 0x4a
 c001174:	460a      	mov	r2, r1
 c001176:	701a      	strb	r2, [r3, #0]
		cfa_engine_conf.challenge[i] = 0x65+i;
 c001178:	687b      	ldr	r3, [r7, #4]
 c00117a:	b2db      	uxtb	r3, r3
 c00117c:	3365      	adds	r3, #101	; 0x65
 c00117e:	b2d9      	uxtb	r1, r3
 c001180:	4a09      	ldr	r2, [pc, #36]	; (c0011a8 <_setup_data+0x4c>)
 c001182:	687b      	ldr	r3, [r7, #4]
 c001184:	4413      	add	r3, r2
 c001186:	3308      	adds	r3, #8
 c001188:	460a      	mov	r2, r1
 c00118a:	701a      	strb	r2, [r3, #0]
	for(unsigned int i = 0; i < CHAL_SIZE; ++i ){
 c00118c:	687b      	ldr	r3, [r7, #4]
 c00118e:	3301      	adds	r3, #1
 c001190:	607b      	str	r3, [r7, #4]
 c001192:	687b      	ldr	r3, [r7, #4]
 c001194:	2b3f      	cmp	r3, #63	; 0x3f
 c001196:	d9e7      	bls.n	c001168 <_setup_data+0xc>
	}
}
 c001198:	bf00      	nop
 c00119a:	bf00      	nop
 c00119c:	370c      	adds	r7, #12
 c00119e:	46bd      	mov	sp, r7
 c0011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0011a4:	4770      	bx	lr
 c0011a6:	bf00      	nop
 c0011a8:	300000f4 	.word	0x300000f4

0c0011ac <_update_challenge>:

void _update_challenge(uint8_t* chl){
 c0011ac:	b4f0      	push	{r4, r5, r6, r7}
 c0011ae:	b082      	sub	sp, #8
 c0011b0:	af00      	add	r7, sp, #0
 c0011b2:	6078      	str	r0, [r7, #4]
	memcpy(cfa_engine_conf.challenge,chl, CHAL_SIZE);
 c0011b4:	4b15      	ldr	r3, [pc, #84]	; (c00120c <_update_challenge+0x60>)
 c0011b6:	687a      	ldr	r2, [r7, #4]
 c0011b8:	4614      	mov	r4, r2
 c0011ba:	f103 0608 	add.w	r6, r3, #8
 c0011be:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 c0011c2:	4635      	mov	r5, r6
 c0011c4:	4623      	mov	r3, r4
 c0011c6:	6818      	ldr	r0, [r3, #0]
 c0011c8:	6859      	ldr	r1, [r3, #4]
 c0011ca:	689a      	ldr	r2, [r3, #8]
 c0011cc:	68db      	ldr	r3, [r3, #12]
 c0011ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 c0011d0:	3410      	adds	r4, #16
 c0011d2:	3610      	adds	r6, #16
 c0011d4:	4564      	cmp	r4, ip
 c0011d6:	d1f4      	bne.n	c0011c2 <_update_challenge+0x16>
	memcpy(vrf_resp.new_challenge,chl, CHAL_SIZE);
 c0011d8:	4a0d      	ldr	r2, [pc, #52]	; (c001210 <_update_challenge+0x64>)
 c0011da:	687b      	ldr	r3, [r7, #4]
 c0011dc:	461c      	mov	r4, r3
 c0011de:	4616      	mov	r6, r2
 c0011e0:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 c0011e4:	4635      	mov	r5, r6
 c0011e6:	4623      	mov	r3, r4
 c0011e8:	6818      	ldr	r0, [r3, #0]
 c0011ea:	6859      	ldr	r1, [r3, #4]
 c0011ec:	689a      	ldr	r2, [r3, #8]
 c0011ee:	68db      	ldr	r3, [r3, #12]
 c0011f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 c0011f2:	3410      	adds	r4, #16
 c0011f4:	3610      	adds	r6, #16
 c0011f6:	4564      	cmp	r4, ip
 c0011f8:	d1f4      	bne.n	c0011e4 <_update_challenge+0x38>
	cfa_engine_conf.challenge_renewed = TRUE;
 c0011fa:	4b04      	ldr	r3, [pc, #16]	; (c00120c <_update_challenge+0x60>)
 c0011fc:	2201      	movs	r2, #1
 c0011fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 c001202:	bf00      	nop
 c001204:	3708      	adds	r7, #8
 c001206:	46bd      	mov	sp, r7
 c001208:	bcf0      	pop	{r4, r5, r6, r7}
 c00120a:	4770      	bx	lr
 c00120c:	300000f4 	.word	0x300000f4
 c001210:	300002e8 	.word	0x300002e8

0c001214 <_clean>:

void _clean(){
 c001214:	b480      	push	{r7}
 c001216:	b083      	sub	sp, #12
 c001218:	af00      	add	r7, sp, #0
	report_secure.number_of_logs_sent = 0;
 c00121a:	4b17      	ldr	r3, [pc, #92]	; (c001278 <_clean+0x64>)
 c00121c:	2200      	movs	r2, #0
 c00121e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
	cfa_engine_conf.initialized = INITIALIZED;
 c001222:	4b16      	ldr	r3, [pc, #88]	; (c00127c <_clean+0x68>)
 c001224:	22ee      	movs	r2, #238	; 0xee
 c001226:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	cfa_engine_conf.attestation_status = INACTIVE;
 c00122a:	4b14      	ldr	r3, [pc, #80]	; (c00127c <_clean+0x68>)
 c00122c:	2200      	movs	r2, #0
 c00122e:	711a      	strb	r2, [r3, #4]
	report_secure.num_CF_Log_size = -1;
 c001230:	4b11      	ldr	r3, [pc, #68]	; (c001278 <_clean+0x64>)
 c001232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 c001236:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	cfa_engine_conf.challenge_renewed = FALSE;
 c00123a:	4b10      	ldr	r3, [pc, #64]	; (c00127c <_clean+0x68>)
 c00123c:	2200      	movs	r2, #0
 c00123e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	report_secure.isFinal = FALSE;
 c001242:	4b0d      	ldr	r3, [pc, #52]	; (c001278 <_clean+0x64>)
 c001244:	2200      	movs	r2, #0
 c001246:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	#if CFLOG_TYPE == CFLOG_RAM
	for(int i=0; i<MAX_CF_LOG_SIZE; i++) report_secure.CFLog[i] = 0;
 c00124a:	2300      	movs	r3, #0
 c00124c:	607b      	str	r3, [r7, #4]
 c00124e:	e009      	b.n	c001264 <_clean+0x50>
 c001250:	4a09      	ldr	r2, [pc, #36]	; (c001278 <_clean+0x64>)
 c001252:	687b      	ldr	r3, [r7, #4]
 c001254:	3318      	adds	r3, #24
 c001256:	009b      	lsls	r3, r3, #2
 c001258:	4413      	add	r3, r2
 c00125a:	2200      	movs	r2, #0
 c00125c:	605a      	str	r2, [r3, #4]
 c00125e:	687b      	ldr	r3, [r7, #4]
 c001260:	3301      	adds	r3, #1
 c001262:	607b      	str	r3, [r7, #4]
 c001264:	687b      	ldr	r3, [r7, #4]
 c001266:	2b3f      	cmp	r3, #63	; 0x3f
 c001268:	ddf2      	ble.n	c001250 <_clean+0x3c>
	#endif
}
 c00126a:	bf00      	nop
 c00126c:	bf00      	nop
 c00126e:	370c      	adds	r7, #12
 c001270:	46bd      	mov	sp, r7
 c001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001276:	4770      	bx	lr
 c001278:	30000180 	.word	0x30000180
 c00127c:	300000f4 	.word	0x300000f4

0c001280 <_run_application>:

void _run_application(){
 c001280:	b598      	push	{r3, r4, r7, lr}
 c001282:	af00      	add	r7, sp, #0
	//start app
	if (cfa_engine_conf.iac.app_start_address != NULL){
 c001284:	4b18      	ldr	r3, [pc, #96]	; (c0012e8 <_run_application+0x68>)
 c001286:	681b      	ldr	r3, [r3, #0]
 c001288:	2b00      	cmp	r3, #0
 c00128a:	d02b      	beq.n	c0012e4 <_run_application+0x64>
		cfa_engine_conf.iac.app_start_address();
 c00128c:	4b16      	ldr	r3, [pc, #88]	; (c0012e8 <_run_application+0x68>)
 c00128e:	681b      	ldr	r3, [r3, #0]
 c001290:	461c      	mov	r4, r3
 c001292:	0864      	lsrs	r4, r4, #1
 c001294:	0064      	lsls	r4, r4, #1
 c001296:	4620      	mov	r0, r4
 c001298:	4621      	mov	r1, r4
 c00129a:	4622      	mov	r2, r4
 c00129c:	4623      	mov	r3, r4
 c00129e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0012a2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0012a6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0012aa:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0012ae:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0012b2:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0012b6:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0012ba:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0012be:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0012c2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0012c6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0012ca:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0012ce:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0012d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0012d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0012da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0012de:	f7fe ffb9 	bl	c000254 <__gnu_cmse_nonsecure_call>
	}
	return;
 c0012e2:	bf00      	nop
 c0012e4:	bf00      	nop
}
 c0012e6:	bd98      	pop	{r3, r4, r7, pc}
 c0012e8:	300000f4 	.word	0x300000f4

0c0012ec <record_output_data>:

uint32_t output_data = 0;
volatile char valueChar;
void record_output_data(uint32_t value){
 c0012ec:	b480      	push	{r7}
 c0012ee:	b083      	sub	sp, #12
 c0012f0:	af00      	add	r7, sp, #0
 c0012f2:	6078      	str	r0, [r7, #4]
	valueChar = value;
 c0012f4:	687b      	ldr	r3, [r7, #4]
 c0012f6:	b2da      	uxtb	r2, r3
 c0012f8:	4b05      	ldr	r3, [pc, #20]	; (c001310 <record_output_data+0x24>)
 c0012fa:	701a      	strb	r2, [r3, #0]
	output_data = value;
 c0012fc:	4a05      	ldr	r2, [pc, #20]	; (c001314 <record_output_data+0x28>)
 c0012fe:	687b      	ldr	r3, [r7, #4]
 c001300:	6013      	str	r3, [r2, #0]
}
 c001302:	bf00      	nop
 c001304:	370c      	adds	r7, #12
 c001306:	46bd      	mov	sp, r7
 c001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00130c:	4770      	bx	lr
 c00130e:	bf00      	nop
 c001310:	300003c4 	.word	0x300003c4
 c001314:	300003c0 	.word	0x300003c0

0c001318 <CFA_ENGINE_start>:
	HAL_FLASH_Lock();
}
#endif


void CFA_ENGINE_start(){
 c001318:	b580      	push	{r7, lr}
 c00131a:	af00      	add	r7, sp, #0
	while(1){
		_attest_memory();
 c00131c:	f000 fa5a 	bl	c0017d4 <_attest_memory>
		_setup_data();
 c001320:	f7ff ff1c 	bl	c00115c <_setup_data>
		_clean();
 c001324:	f7ff ff76 	bl	c001214 <_clean>
		_read_serial_loop();
 c001328:	f000 f8e0 	bl	c0014ec <_read_serial_loop>
		_attest_memory();
 c00132c:	e7f6      	b.n	c00131c <CFA_ENGINE_start+0x4>
	...

0c001330 <CFA_ENGINE_register_callback>:
	}
}

void CFA_ENGINE_register_callback(){
 c001330:	b480      	push	{r7}
 c001332:	af00      	add	r7, sp, #0
	cfa_engine_conf.iac.app_start_address = (funcptr_NS)  pAttestationFunctionCallback;
 c001334:	4b04      	ldr	r3, [pc, #16]	; (c001348 <CFA_ENGINE_register_callback+0x18>)
 c001336:	681b      	ldr	r3, [r3, #0]
 c001338:	461a      	mov	r2, r3
 c00133a:	4b04      	ldr	r3, [pc, #16]	; (c00134c <CFA_ENGINE_register_callback+0x1c>)
 c00133c:	601a      	str	r2, [r3, #0]
	return;
 c00133e:	bf00      	nop
}
 c001340:	46bd      	mov	sp, r7
 c001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001346:	4770      	bx	lr
 c001348:	30000418 	.word	0x30000418
 c00134c:	300000f4 	.word	0x300000f4

0c001350 <STATE_initialize_attestation>:

/* --------------- - STATE HANDLING --------------------- */


uint8_t myFlag  = 0;
int STATE_initialize_attestation(){
 c001350:	b580      	push	{r7, lr}
 c001352:	b082      	sub	sp, #8
 c001354:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.attestation_status == INACTIVE){
 c001356:	4b16      	ldr	r3, [pc, #88]	; (c0013b0 <STATE_initialize_attestation+0x60>)
 c001358:	791b      	ldrb	r3, [r3, #4]
 c00135a:	2b00      	cmp	r3, #0
 c00135c:	d11c      	bne.n	c001398 <STATE_initialize_attestation+0x48>

		// send response to vrf
		uint8_t ready_char[COMMAND_SIZE+1] = INIT_ATTESTATION;
 c00135e:	4a15      	ldr	r2, [pc, #84]	; (c0013b4 <STATE_initialize_attestation+0x64>)
 c001360:	463b      	mov	r3, r7
 c001362:	e892 0003 	ldmia.w	r2, {r0, r1}
 c001366:	6018      	str	r0, [r3, #0]
 c001368:	3304      	adds	r3, #4
 c00136a:	7019      	strb	r1, [r3, #0]
		SecureUartTx(ready_char, COMMAND_SIZE);
 c00136c:	463b      	mov	r3, r7
 c00136e:	2104      	movs	r1, #4
 c001370:	4618      	mov	r0, r3
 c001372:	f003 fd55 	bl	c004e20 <SecureUartTx>

		// receive challange
		if(_receive_challenge()) return 1;
 c001376:	f000 f91f 	bl	c0015b8 <_receive_challenge>
 c00137a:	4603      	mov	r3, r0
 c00137c:	2b00      	cmp	r3, #0
 c00137e:	d001      	beq.n	c001384 <STATE_initialize_attestation+0x34>
 c001380:	2301      	movs	r3, #1
 c001382:	e011      	b.n	c0013a8 <STATE_initialize_attestation+0x58>

		// start application
		cfa_engine_conf.attestation_status = ACTIVE;
 c001384:	4b0a      	ldr	r3, [pc, #40]	; (c0013b0 <STATE_initialize_attestation+0x60>)
 c001386:	2201      	movs	r2, #1
 c001388:	711a      	strb	r2, [r3, #4]
		CFA_ENGINE_run_attestation();
 c00138a:	f000 faf3 	bl	c001974 <CFA_ENGINE_run_attestation>
		cfa_engine_conf.attestation_status = COMPLETE;
 c00138e:	4b08      	ldr	r3, [pc, #32]	; (c0013b0 <STATE_initialize_attestation+0x60>)
 c001390:	2202      	movs	r2, #2
 c001392:	711a      	strb	r2, [r3, #4]

		// Send final report
		_send_report();
 c001394:	f000 f9d0 	bl	c001738 <_send_report>
	}

	myFlag ^= 1;
 c001398:	4b07      	ldr	r3, [pc, #28]	; (c0013b8 <STATE_initialize_attestation+0x68>)
 c00139a:	781b      	ldrb	r3, [r3, #0]
 c00139c:	f083 0301 	eor.w	r3, r3, #1
 c0013a0:	b2da      	uxtb	r2, r3
 c0013a2:	4b05      	ldr	r3, [pc, #20]	; (c0013b8 <STATE_initialize_attestation+0x68>)
 c0013a4:	701a      	strb	r2, [r3, #0]
	return CONTINUE_LOOP;
 c0013a6:	2301      	movs	r3, #1
}
 c0013a8:	4618      	mov	r0, r3
 c0013aa:	3708      	adds	r7, #8
 c0013ac:	46bd      	mov	sp, r7
 c0013ae:	bd80      	pop	{r7, pc}
 c0013b0:	300000f4 	.word	0x300000f4
 c0013b4:	0c00943c 	.word	0x0c00943c
 c0013b8:	300003c5 	.word	0x300003c5

0c0013bc <STATE_accept_report>:

int STATE_accept_report(){
 c0013bc:	b580      	push	{r7, lr}
 c0013be:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.attestation_status == COMPLETE){
 c0013c0:	4b06      	ldr	r3, [pc, #24]	; (c0013dc <STATE_accept_report+0x20>)
 c0013c2:	791b      	ldrb	r3, [r3, #4]
 c0013c4:	2b02      	cmp	r3, #2
 c0013c6:	d106      	bne.n	c0013d6 <STATE_accept_report+0x1a>
		cfa_engine_conf.attestation_status = INACTIVE; //temp
 c0013c8:	4b04      	ldr	r3, [pc, #16]	; (c0013dc <STATE_accept_report+0x20>)
 c0013ca:	2200      	movs	r2, #0
 c0013cc:	711a      	strb	r2, [r3, #4]
		_clean();
 c0013ce:	f7ff ff21 	bl	c001214 <_clean>
		return EXIT_LOOP;
 c0013d2:	2300      	movs	r3, #0
 c0013d4:	e000      	b.n	c0013d8 <STATE_accept_report+0x1c>
	}
	return CONTINUE_LOOP;
 c0013d6:	2301      	movs	r3, #1
}
 c0013d8:	4618      	mov	r0, r3
 c0013da:	bd80      	pop	{r7, pc}
 c0013dc:	300000f4 	.word	0x300000f4

0c0013e0 <STATE_heal>:

int STATE_heal(){
 c0013e0:	b580      	push	{r7, lr}
 c0013e2:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.attestation_status == COMPLETE || cfa_engine_conf.attestation_status == WAITING_PARTIAL){
 c0013e4:	4b07      	ldr	r3, [pc, #28]	; (c001404 <STATE_heal+0x24>)
 c0013e6:	791b      	ldrb	r3, [r3, #4]
 c0013e8:	2b02      	cmp	r3, #2
 c0013ea:	d003      	beq.n	c0013f4 <STATE_heal+0x14>
 c0013ec:	4b05      	ldr	r3, [pc, #20]	; (c001404 <STATE_heal+0x24>)
 c0013ee:	791b      	ldrb	r3, [r3, #4]
 c0013f0:	2b04      	cmp	r3, #4
 c0013f2:	d103      	bne.n	c0013fc <STATE_heal+0x1c>
		_heal_function();
 c0013f4:	f000 fb0a 	bl	c001a0c <_heal_function>
		return EXIT_LOOP;
 c0013f8:	2300      	movs	r3, #0
 c0013fa:	e000      	b.n	c0013fe <STATE_heal+0x1e>
	}
	return CONTINUE_LOOP;
 c0013fc:	2301      	movs	r3, #1
}
 c0013fe:	4618      	mov	r0, r3
 c001400:	bd80      	pop	{r7, pc}
 c001402:	bf00      	nop
 c001404:	300000f4 	.word	0x300000f4

0c001408 <STATE_continue>:

int STATE_continue(){
 c001408:	b580      	push	{r7, lr}
 c00140a:	af00      	add	r7, sp, #0

	_receive_challenge();
 c00140c:	f000 f8d4 	bl	c0015b8 <_receive_challenge>

	cfa_engine_conf.attestation_status = ACTIVE;
 c001410:	4b02      	ldr	r3, [pc, #8]	; (c00141c <STATE_continue+0x14>)
 c001412:	2201      	movs	r2, #1
 c001414:	711a      	strb	r2, [r3, #4]

	return EXIT_LOOP;
 c001416:	2300      	movs	r3, #0
}
 c001418:	4618      	mov	r0, r3
 c00141a:	bd80      	pop	{r7, pc}
 c00141c:	300000f4 	.word	0x300000f4

0c001420 <translate_command>:

/* ---------------------------  PROTOCOL  ----------------------------------------- */


char translate_command(int8_t command_received[]){
 c001420:	b580      	push	{r7, lr}
 c001422:	b082      	sub	sp, #8
 c001424:	af00      	add	r7, sp, #0
 c001426:	6078      	str	r0, [r7, #4]
	command_received[COMMAND_SIZE] = '\0';
 c001428:	687b      	ldr	r3, [r7, #4]
 c00142a:	3304      	adds	r3, #4
 c00142c:	2200      	movs	r2, #0
 c00142e:	701a      	strb	r2, [r3, #0]
	if (!strcmp(command_received,INIT_ATTESTATION))
 c001430:	4914      	ldr	r1, [pc, #80]	; (c001484 <translate_command+0x64>)
 c001432:	6878      	ldr	r0, [r7, #4]
 c001434:	f7fe ff04 	bl	c000240 <strcmp>
 c001438:	4603      	mov	r3, r0
 c00143a:	2b00      	cmp	r3, #0
 c00143c:	d101      	bne.n	c001442 <translate_command+0x22>
		return INIT_ATTESTATION_CHAR;
 c00143e:	2369      	movs	r3, #105	; 0x69
 c001440:	e01b      	b.n	c00147a <translate_command+0x5a>
	else if (!strcmp(command_received,ACCEPTED_REPORT))
 c001442:	4911      	ldr	r1, [pc, #68]	; (c001488 <translate_command+0x68>)
 c001444:	6878      	ldr	r0, [r7, #4]
 c001446:	f7fe fefb 	bl	c000240 <strcmp>
 c00144a:	4603      	mov	r3, r0
 c00144c:	2b00      	cmp	r3, #0
 c00144e:	d101      	bne.n	c001454 <translate_command+0x34>
		return ACCEPT_REPORT_CHAR;
 c001450:	2376      	movs	r3, #118	; 0x76
 c001452:	e012      	b.n	c00147a <translate_command+0x5a>
	else if (!strcmp(command_received,CONTINUE_REQUEST))
 c001454:	490d      	ldr	r1, [pc, #52]	; (c00148c <translate_command+0x6c>)
 c001456:	6878      	ldr	r0, [r7, #4]
 c001458:	f7fe fef2 	bl	c000240 <strcmp>
 c00145c:	4603      	mov	r3, r0
 c00145e:	2b00      	cmp	r3, #0
 c001460:	d101      	bne.n	c001466 <translate_command+0x46>
		return CONTINUE_CHAR;
 c001462:	2363      	movs	r3, #99	; 0x63
 c001464:	e009      	b.n	c00147a <translate_command+0x5a>
	else if (!strcmp(command_received,HEAL_REQUEST))
 c001466:	490a      	ldr	r1, [pc, #40]	; (c001490 <translate_command+0x70>)
 c001468:	6878      	ldr	r0, [r7, #4]
 c00146a:	f7fe fee9 	bl	c000240 <strcmp>
 c00146e:	4603      	mov	r3, r0
 c001470:	2b00      	cmp	r3, #0
 c001472:	d101      	bne.n	c001478 <translate_command+0x58>
		return HEAL_CHAR;
 c001474:	2368      	movs	r3, #104	; 0x68
 c001476:	e000      	b.n	c00147a <translate_command+0x5a>
	return 'X';
 c001478:	2358      	movs	r3, #88	; 0x58

}
 c00147a:	4618      	mov	r0, r3
 c00147c:	3708      	adds	r7, #8
 c00147e:	46bd      	mov	sp, r7
 c001480:	bd80      	pop	{r7, pc}
 c001482:	bf00      	nop
 c001484:	0c00943c 	.word	0x0c00943c
 c001488:	0c009444 	.word	0x0c009444
 c00148c:	0c00944c 	.word	0x0c00944c
 c001490:	0c009454 	.word	0x0c009454

0c001494 <wait_for_command>:

void wait_for_command(char pattern[],int size){
 c001494:	b580      	push	{r7, lr}
 c001496:	b086      	sub	sp, #24
 c001498:	af00      	add	r7, sp, #0
 c00149a:	6078      	str	r0, [r7, #4]
 c00149c:	6039      	str	r1, [r7, #0]
	int found_size = 0;
 c00149e:	2300      	movs	r3, #0
 c0014a0:	617b      	str	r3, [r7, #20]
	int i = 0;
 c0014a2:	2300      	movs	r3, #0
 c0014a4:	613b      	str	r3, [r7, #16]
	char read_char;
	while(found_size != size){
 c0014a6:	e017      	b.n	c0014d8 <wait_for_command+0x44>
		SecureUartRx((uint8_t*)&read_char, 1);
 c0014a8:	f107 030f 	add.w	r3, r7, #15
 c0014ac:	2101      	movs	r1, #1
 c0014ae:	4618      	mov	r0, r3
 c0014b0:	f003 fcca 	bl	c004e48 <SecureUartRx>
		if (read_char == pattern[i]){
 c0014b4:	693b      	ldr	r3, [r7, #16]
 c0014b6:	687a      	ldr	r2, [r7, #4]
 c0014b8:	4413      	add	r3, r2
 c0014ba:	781a      	ldrb	r2, [r3, #0]
 c0014bc:	7bfb      	ldrb	r3, [r7, #15]
 c0014be:	429a      	cmp	r2, r3
 c0014c0:	d106      	bne.n	c0014d0 <wait_for_command+0x3c>
			i++;
 c0014c2:	693b      	ldr	r3, [r7, #16]
 c0014c4:	3301      	adds	r3, #1
 c0014c6:	613b      	str	r3, [r7, #16]
			found_size++;
 c0014c8:	697b      	ldr	r3, [r7, #20]
 c0014ca:	3301      	adds	r3, #1
 c0014cc:	617b      	str	r3, [r7, #20]
 c0014ce:	e003      	b.n	c0014d8 <wait_for_command+0x44>
		}
		else{
			i = 0;
 c0014d0:	2300      	movs	r3, #0
 c0014d2:	613b      	str	r3, [r7, #16]
			found_size = 0;
 c0014d4:	2300      	movs	r3, #0
 c0014d6:	617b      	str	r3, [r7, #20]
	while(found_size != size){
 c0014d8:	697a      	ldr	r2, [r7, #20]
 c0014da:	683b      	ldr	r3, [r7, #0]
 c0014dc:	429a      	cmp	r2, r3
 c0014de:	d1e3      	bne.n	c0014a8 <wait_for_command+0x14>
		}
	}
}
 c0014e0:	bf00      	nop
 c0014e2:	bf00      	nop
 c0014e4:	3718      	adds	r7, #24
 c0014e6:	46bd      	mov	sp, r7
 c0014e8:	bd80      	pop	{r7, pc}
	...

0c0014ec <_read_serial_loop>:

void _read_serial_loop(){
 c0014ec:	b580      	push	{r7, lr}
 c0014ee:	b082      	sub	sp, #8
 c0014f0:	af00      	add	r7, sp, #0
	uint8_t command_received[COMMAND_SIZE+1];
	uint8_t state = CONTINUE_LOOP;
 c0014f2:	2301      	movs	r3, #1
 c0014f4:	71fb      	strb	r3, [r7, #7]
	char aaa;
	while(state == CONTINUE_LOOP){
 c0014f6:	e054      	b.n	c0015a2 <_read_serial_loop+0xb6>
		wait_for_command(BEGGINING_OF_COMMAND,COMMAND_SIZE);
 c0014f8:	2104      	movs	r1, #4
 c0014fa:	482e      	ldr	r0, [pc, #184]	; (c0015b4 <_read_serial_loop+0xc8>)
 c0014fc:	f7ff ffca 	bl	c001494 <wait_for_command>
		_receive_request(COMMAND_SIZE, command_received);
 c001500:	463b      	mov	r3, r7
 c001502:	4619      	mov	r1, r3
 c001504:	2004      	movs	r0, #4
 c001506:	f000 f8b3 	bl	c001670 <_receive_request>
		aaa = translate_command(command_received);
 c00150a:	463b      	mov	r3, r7
 c00150c:	4618      	mov	r0, r3
 c00150e:	f7ff ff87 	bl	c001420 <translate_command>
 c001512:	4603      	mov	r3, r0
 c001514:	71bb      	strb	r3, [r7, #6]
		switch(aaa){
 c001516:	79bb      	ldrb	r3, [r7, #6]
 c001518:	3b63      	subs	r3, #99	; 0x63
 c00151a:	2b13      	cmp	r3, #19
 c00151c:	d83e      	bhi.n	c00159c <_read_serial_loop+0xb0>
 c00151e:	a201      	add	r2, pc, #4	; (adr r2, c001524 <_read_serial_loop+0x38>)
 c001520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c001524:	0c001593 	.word	0x0c001593
 c001528:	0c00159d 	.word	0x0c00159d
 c00152c:	0c00159d 	.word	0x0c00159d
 c001530:	0c00159d 	.word	0x0c00159d
 c001534:	0c00159d 	.word	0x0c00159d
 c001538:	0c001589 	.word	0x0c001589
 c00153c:	0c001575 	.word	0x0c001575
 c001540:	0c00159d 	.word	0x0c00159d
 c001544:	0c00159d 	.word	0x0c00159d
 c001548:	0c00159d 	.word	0x0c00159d
 c00154c:	0c00159d 	.word	0x0c00159d
 c001550:	0c00159d 	.word	0x0c00159d
 c001554:	0c00159d 	.word	0x0c00159d
 c001558:	0c00159d 	.word	0x0c00159d
 c00155c:	0c00159d 	.word	0x0c00159d
 c001560:	0c00159d 	.word	0x0c00159d
 c001564:	0c00159d 	.word	0x0c00159d
 c001568:	0c00159d 	.word	0x0c00159d
 c00156c:	0c00159d 	.word	0x0c00159d
 c001570:	0c00157f 	.word	0x0c00157f

			case INIT_ATTESTATION_CHAR:
				state = STATE_initialize_attestation();
 c001574:	f7ff feec 	bl	c001350 <STATE_initialize_attestation>
 c001578:	4603      	mov	r3, r0
 c00157a:	71fb      	strb	r3, [r7, #7]
				break;
 c00157c:	e011      	b.n	c0015a2 <_read_serial_loop+0xb6>

			case ACCEPT_REPORT_CHAR:
				state = STATE_accept_report();
 c00157e:	f7ff ff1d 	bl	c0013bc <STATE_accept_report>
 c001582:	4603      	mov	r3, r0
 c001584:	71fb      	strb	r3, [r7, #7]
				break;
 c001586:	e00c      	b.n	c0015a2 <_read_serial_loop+0xb6>

			case HEAL_CHAR:
				state = STATE_heal();
 c001588:	f7ff ff2a 	bl	c0013e0 <STATE_heal>
 c00158c:	4603      	mov	r3, r0
 c00158e:	71fb      	strb	r3, [r7, #7]
				break;
 c001590:	e007      	b.n	c0015a2 <_read_serial_loop+0xb6>

			case CONTINUE_CHAR:
				state = STATE_continue();
 c001592:	f7ff ff39 	bl	c001408 <STATE_continue>
 c001596:	4603      	mov	r3, r0
 c001598:	71fb      	strb	r3, [r7, #7]
				break;
 c00159a:	e002      	b.n	c0015a2 <_read_serial_loop+0xb6>

			default:
				state = CONTINUE_LOOP;
 c00159c:	2301      	movs	r3, #1
 c00159e:	71fb      	strb	r3, [r7, #7]
				break;
 c0015a0:	bf00      	nop
	while(state == CONTINUE_LOOP){
 c0015a2:	79fb      	ldrb	r3, [r7, #7]
 c0015a4:	2b01      	cmp	r3, #1
 c0015a6:	d0a7      	beq.n	c0014f8 <_read_serial_loop+0xc>
		}
	}
}
 c0015a8:	bf00      	nop
 c0015aa:	bf00      	nop
 c0015ac:	3708      	adds	r7, #8
 c0015ae:	46bd      	mov	sp, r7
 c0015b0:	bd80      	pop	{r7, pc}
 c0015b2:	bf00      	nop
 c0015b4:	0c00945c 	.word	0x0c00945c

0c0015b8 <_receive_challenge>:

/* -----------------------------  SENDING REPORT ------------------------------------ */
uint32_t receive_resp_time;
uint32_t verify_resp_time;
uint8_t  _receive_challenge(){
 c0015b8:	b580      	push	{r7, lr}
 c0015ba:	b096      	sub	sp, #88	; 0x58
 c0015bc:	af02      	add	r7, sp, #8
	uint8_t chl[64];
//	uint8_t init_chal[] = BEGGINING_OF_CHALLANGE;

	uint32_t start = HAL_GetTick();
 c0015be:	f003 fceb 	bl	c004f98 <HAL_GetTick>
 c0015c2:	64f8      	str	r0, [r7, #76]	; 0x4c
	SecureUartRx((uint8_t*)chl, 64);
 c0015c4:	463b      	mov	r3, r7
 c0015c6:	2140      	movs	r1, #64	; 0x40
 c0015c8:	4618      	mov	r0, r3
 c0015ca:	f003 fc3d 	bl	c004e48 <SecureUartRx>
//	SecureUartTx(init_chal, COMMAND_SIZE); // echo for debug
//	SecureUartTx((uint8_t*)chl, 64);
	_update_challenge(chl);
 c0015ce:	463b      	mov	r3, r7
 c0015d0:	4618      	mov	r0, r3
 c0015d2:	f7ff fdeb 	bl	c0011ac <_update_challenge>

	// read verifier signature
	SecureUartRx((uint8_t*)(&vrf_resp.signature), SIGNATURE_SIZE_BYTES);
 c0015d6:	2140      	movs	r1, #64	; 0x40
 c0015d8:	481d      	ldr	r0, [pc, #116]	; (c001650 <_receive_challenge+0x98>)
 c0015da:	f003 fc35 	bl	c004e48 <SecureUartRx>
//	SecureUartTx((uint8_t*)(&vrf_resp.signature), SIGNATURE_SIZE_BYTES);

	vrf_resp.verify_result = 1;
 c0015de:	4b1d      	ldr	r3, [pc, #116]	; (c001654 <_receive_challenge+0x9c>)
 c0015e0:	2201      	movs	r2, #1
 c0015e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	uint32_t stop = HAL_GetTick();
 c0015e6:	f003 fcd7 	bl	c004f98 <HAL_GetTick>
 c0015ea:	64b8      	str	r0, [r7, #72]	; 0x48
	receive_resp_time = stop-start;
 c0015ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c0015ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0015f0:	1ad3      	subs	r3, r2, r3
 c0015f2:	4a19      	ldr	r2, [pc, #100]	; (c001658 <_receive_challenge+0xa0>)
 c0015f4:	6013      	str	r3, [r2, #0]

	start = HAL_GetTick();
 c0015f6:	f003 fccf 	bl	c004f98 <HAL_GetTick>
 c0015fa:	64f8      	str	r0, [r7, #76]	; 0x4c
	// check verifier signature by sig = ECDSA(private_key, hash(report))
	// 1) get SHA256 hash over report (excluding buffer that holds signature)
	uint32_t response_size = CHAL_SIZE + 1 + HASH_SIZE_BYTES;
 c0015fc:	2361      	movs	r3, #97	; 0x61
 c0015fe:	647b      	str	r3, [r7, #68]	; 0x44
	Hacl_SHA2_256_hash(response_hash, (uint8_t*)(&vrf_resp), response_size);
 c001600:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 c001602:	4914      	ldr	r1, [pc, #80]	; (c001654 <_receive_challenge+0x9c>)
 c001604:	4815      	ldr	r0, [pc, #84]	; (c00165c <_receive_challenge+0xa4>)
 c001606:	f7ff fd9a 	bl	c00113e <Hacl_SHA2_256_hash>
	// 2) verify signature of hash
    curve = uECC_secp256r1();
 c00160a:	f002 f8a5 	bl	c003758 <uECC_secp256r1>
 c00160e:	4603      	mov	r3, r0
 c001610:	4a13      	ldr	r2, [pc, #76]	; (c001660 <_receive_challenge+0xa8>)
 c001612:	6013      	str	r3, [r2, #0]
    int t =  uECC_verify(public_key, response_hash, HASH_SIZE_BYTES, vrf_resp.signature, curve);
 c001614:	4b12      	ldr	r3, [pc, #72]	; (c001660 <_receive_challenge+0xa8>)
 c001616:	681b      	ldr	r3, [r3, #0]
 c001618:	9300      	str	r3, [sp, #0]
 c00161a:	4b0d      	ldr	r3, [pc, #52]	; (c001650 <_receive_challenge+0x98>)
 c00161c:	2220      	movs	r2, #32
 c00161e:	490f      	ldr	r1, [pc, #60]	; (c00165c <_receive_challenge+0xa4>)
 c001620:	4810      	ldr	r0, [pc, #64]	; (c001664 <_receive_challenge+0xac>)
 c001622:	f003 f885 	bl	c004730 <uECC_verify>
 c001626:	6438      	str	r0, [r7, #64]	; 0x40
    stop = HAL_GetTick();
 c001628:	f003 fcb6 	bl	c004f98 <HAL_GetTick>
 c00162c:	64b8      	str	r0, [r7, #72]	; 0x48
    verify_resp_time = stop-start;
 c00162e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c001630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c001632:	1ad3      	subs	r3, r2, r3
 c001634:	4a0c      	ldr	r2, [pc, #48]	; (c001668 <_receive_challenge+0xb0>)
 c001636:	6013      	str	r3, [r2, #0]

    recv_verify_response_time = receive_resp_time + verify_resp_time;
 c001638:	4b07      	ldr	r3, [pc, #28]	; (c001658 <_receive_challenge+0xa0>)
 c00163a:	681a      	ldr	r2, [r3, #0]
 c00163c:	4b0a      	ldr	r3, [pc, #40]	; (c001668 <_receive_challenge+0xb0>)
 c00163e:	681b      	ldr	r3, [r3, #0]
 c001640:	4413      	add	r3, r2
 c001642:	4a0a      	ldr	r2, [pc, #40]	; (c00166c <_receive_challenge+0xb4>)
 c001644:	6013      	str	r3, [r2, #0]
	return 0;
 c001646:	2300      	movs	r3, #0
}
 c001648:	4618      	mov	r0, r3
 c00164a:	3750      	adds	r7, #80	; 0x50
 c00164c:	46bd      	mov	sp, r7
 c00164e:	bd80      	pop	{r7, pc}
 c001650:	30000329 	.word	0x30000329
 c001654:	300002e8 	.word	0x300002e8
 c001658:	300003c8 	.word	0x300003c8
 c00165c:	3000038c 	.word	0x3000038c
 c001660:	300003ac 	.word	0x300003ac
 c001664:	30000020 	.word	0x30000020
 c001668:	300003cc 	.word	0x300003cc
 c00166c:	300003b0 	.word	0x300003b0

0c001670 <_receive_request>:

void _receive_request(int size,uint8_t* read_char){
 c001670:	b580      	push	{r7, lr}
 c001672:	b082      	sub	sp, #8
 c001674:	af00      	add	r7, sp, #0
 c001676:	6078      	str	r0, [r7, #4]
 c001678:	6039      	str	r1, [r7, #0]
	SecureUartRx(read_char, size);
 c00167a:	687b      	ldr	r3, [r7, #4]
 c00167c:	b29b      	uxth	r3, r3
 c00167e:	4619      	mov	r1, r3
 c001680:	6838      	ldr	r0, [r7, #0]
 c001682:	f003 fbe1 	bl	c004e48 <SecureUartRx>
	return;
 c001686:	bf00      	nop
}
 c001688:	3708      	adds	r7, #8
 c00168a:	46bd      	mov	sp, r7
 c00168c:	bd80      	pop	{r7, pc}
	...

0c001690 <_send_report_message>:
uint32_t send_report_time = 0;
uint32_t send_report_start;
uint32_t send_report_stop;
void _send_report_message(){
 c001690:	b580      	push	{r7, lr}
 c001692:	b084      	sub	sp, #16
 c001694:	af00      	add	r7, sp, #0
	uint8_t init_report[] = BEGGINING_OF_REPORT;
 c001696:	4a22      	ldr	r2, [pc, #136]	; (c001720 <_send_report_message+0x90>)
 c001698:	463b      	mov	r3, r7
 c00169a:	e892 0003 	ldmia.w	r2, {r0, r1}
 c00169e:	6018      	str	r0, [r3, #0]
 c0016a0:	3304      	adds	r3, #4
 c0016a2:	7019      	strb	r1, [r3, #0]
	SecureUartTx(init_report, COMMAND_SIZE);
 c0016a4:	463b      	mov	r3, r7
 c0016a6:	2104      	movs	r1, #4
 c0016a8:	4618      	mov	r0, r3
 c0016aa:	f003 fbb9 	bl	c004e20 <SecureUartTx>
	// Baseline End-to-end APP
//	SecureUartTx((uint8_t *)(&output_data), 4);
//	SecureUartTx(report_secure.signature, SIGNATURE_SIZE_BYTES);

	// CFA or TRACES
	report_secure.num_CF_Log_size++; //convert from last index to size
 c0016ae:	4b1d      	ldr	r3, [pc, #116]	; (c001724 <_send_report_message+0x94>)
 c0016b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c0016b4:	3301      	adds	r3, #1
 c0016b6:	b29a      	uxth	r2, r3
 c0016b8:	4b1a      	ldr	r3, [pc, #104]	; (c001724 <_send_report_message+0x94>)
 c0016ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	// 2 + 64 + 32 + 4*2048 + 2 bytes
	send_report_start = HAL_GetTick();
 c0016be:	f003 fc6b 	bl	c004f98 <HAL_GetTick>
 c0016c2:	4603      	mov	r3, r0
 c0016c4:	4a18      	ldr	r2, [pc, #96]	; (c001728 <_send_report_message+0x98>)
 c0016c6:	6013      	str	r3, [r2, #0]
	int data_size = 2 + SIGNATURE_SIZE_BYTES + HASH_SIZE_BYTES + 2;// + 4*report_secure.num_CF_Log_size + 2;
 c0016c8:	2364      	movs	r3, #100	; 0x64
 c0016ca:	60fb      	str	r3, [r7, #12]
	uint8_t * report_addr = (uint8_t*)(&report_secure);
 c0016cc:	4b15      	ldr	r3, [pc, #84]	; (c001724 <_send_report_message+0x94>)
 c0016ce:	60bb      	str	r3, [r7, #8]
	SecureUartTx(report_addr, data_size);
 c0016d0:	68fb      	ldr	r3, [r7, #12]
 c0016d2:	b29b      	uxth	r3, r3
 c0016d4:	4619      	mov	r1, r3
 c0016d6:	68b8      	ldr	r0, [r7, #8]
 c0016d8:	f003 fba2 	bl	c004e20 <SecureUartTx>
	data_size = 4*report_secure.num_CF_Log_size;
 c0016dc:	4b11      	ldr	r3, [pc, #68]	; (c001724 <_send_report_message+0x94>)
 c0016de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c0016e2:	009b      	lsls	r3, r3, #2
 c0016e4:	60fb      	str	r3, [r7, #12]
	SecureUartTx((uint8_t *)(&report_secure.CFLog), data_size);
 c0016e6:	68fb      	ldr	r3, [r7, #12]
 c0016e8:	b29b      	uxth	r3, r3
 c0016ea:	4619      	mov	r1, r3
 c0016ec:	480f      	ldr	r0, [pc, #60]	; (c00172c <_send_report_message+0x9c>)
 c0016ee:	f003 fb97 	bl	c004e20 <SecureUartTx>
	send_report_stop = HAL_GetTick();
 c0016f2:	f003 fc51 	bl	c004f98 <HAL_GetTick>
 c0016f6:	4603      	mov	r3, r0
 c0016f8:	4a0d      	ldr	r2, [pc, #52]	; (c001730 <_send_report_message+0xa0>)
 c0016fa:	6013      	str	r3, [r2, #0]
	send_report_time += send_report_stop - send_report_start;
 c0016fc:	4b0c      	ldr	r3, [pc, #48]	; (c001730 <_send_report_message+0xa0>)
 c0016fe:	681a      	ldr	r2, [r3, #0]
 c001700:	4b09      	ldr	r3, [pc, #36]	; (c001728 <_send_report_message+0x98>)
 c001702:	681b      	ldr	r3, [r3, #0]
 c001704:	1ad2      	subs	r2, r2, r3
 c001706:	4b0b      	ldr	r3, [pc, #44]	; (c001734 <_send_report_message+0xa4>)
 c001708:	681b      	ldr	r3, [r3, #0]
 c00170a:	4413      	add	r3, r2
 c00170c:	4a09      	ldr	r2, [pc, #36]	; (c001734 <_send_report_message+0xa4>)
 c00170e:	6013      	str	r3, [r2, #0]

	// timing for debug
	SecureUartTx((uint8_t *)(&send_report_time), 4);
 c001710:	2104      	movs	r1, #4
 c001712:	4808      	ldr	r0, [pc, #32]	; (c001734 <_send_report_message+0xa4>)
 c001714:	f003 fb84 	bl	c004e20 <SecureUartTx>
}
 c001718:	bf00      	nop
 c00171a:	3710      	adds	r7, #16
 c00171c:	46bd      	mov	sp, r7
 c00171e:	bd80      	pop	{r7, pc}
 c001720:	0c009464 	.word	0x0c009464
 c001724:	30000180 	.word	0x30000180
 c001728:	300003d4 	.word	0x300003d4
 c00172c:	300001e4 	.word	0x300001e4
 c001730:	300003d8 	.word	0x300003d8
 c001734:	300003d0 	.word	0x300003d0

0c001738 <_send_report>:
uint32_t compute_send_report_time;
uint32_t compute_send_report_start;
uint32_t compute_send_report_stop;
void _send_report(){
 c001738:	b580      	push	{r7, lr}
 c00173a:	af00      	add	r7, sp, #0
	report_secure.number_of_logs_sent ++;
 c00173c:	4b20      	ldr	r3, [pc, #128]	; (c0017c0 <_send_report+0x88>)
 c00173e:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 c001742:	3301      	adds	r3, #1
 c001744:	b29a      	uxth	r2, r3
 c001746:	4b1e      	ldr	r3, [pc, #120]	; (c0017c0 <_send_report+0x88>)
 c001748:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
	if (cfa_engine_conf.attestation_status == COMPLETE){
 c00174c:	4b1d      	ldr	r3, [pc, #116]	; (c0017c4 <_send_report+0x8c>)
 c00174e:	791b      	ldrb	r3, [r3, #4]
 c001750:	2b02      	cmp	r3, #2
 c001752:	d112      	bne.n	c00177a <_send_report+0x42>
		report_secure.isFinal = FINAL_REPORT;
 c001754:	4b1a      	ldr	r3, [pc, #104]	; (c0017c0 <_send_report+0x88>)
 c001756:	2246      	movs	r2, #70	; 0x46
 c001758:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		compute_send_report_start = HAL_GetTick();
 c00175c:	f003 fc1c 	bl	c004f98 <HAL_GetTick>
 c001760:	4603      	mov	r3, r0
 c001762:	4a19      	ldr	r2, [pc, #100]	; (c0017c8 <_send_report+0x90>)
 c001764:	6013      	str	r3, [r2, #0]
		_sign_report(); // must come after isFinal is set since signs all report data
 c001766:	f000 f85b 	bl	c001820 <_sign_report>
		_send_report_message();
 c00176a:	f7ff ff91 	bl	c001690 <_send_report_message>
		compute_send_report_stop = HAL_GetTick();
 c00176e:	f003 fc13 	bl	c004f98 <HAL_GetTick>
 c001772:	4603      	mov	r3, r0
 c001774:	4a15      	ldr	r2, [pc, #84]	; (c0017cc <_send_report+0x94>)
 c001776:	6013      	str	r3, [r2, #0]
 c001778:	e019      	b.n	c0017ae <_send_report+0x76>
	}
	else if(cfa_engine_conf.attestation_status == WAITING_PARTIAL){
 c00177a:	4b12      	ldr	r3, [pc, #72]	; (c0017c4 <_send_report+0x8c>)
 c00177c:	791b      	ldrb	r3, [r3, #4]
 c00177e:	2b04      	cmp	r3, #4
 c001780:	d115      	bne.n	c0017ae <_send_report+0x76>
		report_secure.isFinal = PARTIAL_REPORT;
 c001782:	4b0f      	ldr	r3, [pc, #60]	; (c0017c0 <_send_report+0x88>)
 c001784:	2250      	movs	r2, #80	; 0x50
 c001786:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		compute_send_report_start = HAL_GetTick();
 c00178a:	f003 fc05 	bl	c004f98 <HAL_GetTick>
 c00178e:	4603      	mov	r3, r0
 c001790:	4a0d      	ldr	r2, [pc, #52]	; (c0017c8 <_send_report+0x90>)
 c001792:	6013      	str	r3, [r2, #0]
		_sign_report();
 c001794:	f000 f844 	bl	c001820 <_sign_report>
		_send_report_message();
 c001798:	f7ff ff7a 	bl	c001690 <_send_report_message>
		report_secure.num_CF_Log_size = 0;
 c00179c:	4b08      	ldr	r3, [pc, #32]	; (c0017c0 <_send_report+0x88>)
 c00179e:	2200      	movs	r2, #0
 c0017a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		compute_send_report_stop = HAL_GetTick();
 c0017a4:	f003 fbf8 	bl	c004f98 <HAL_GetTick>
 c0017a8:	4603      	mov	r3, r0
 c0017aa:	4a08      	ldr	r2, [pc, #32]	; (c0017cc <_send_report+0x94>)
 c0017ac:	6013      	str	r3, [r2, #0]
	}

	compute_send_report_time = compute_send_report_stop - compute_send_report_start;
 c0017ae:	4b07      	ldr	r3, [pc, #28]	; (c0017cc <_send_report+0x94>)
 c0017b0:	681a      	ldr	r2, [r3, #0]
 c0017b2:	4b05      	ldr	r3, [pc, #20]	; (c0017c8 <_send_report+0x90>)
 c0017b4:	681b      	ldr	r3, [r3, #0]
 c0017b6:	1ad3      	subs	r3, r2, r3
 c0017b8:	4a05      	ldr	r2, [pc, #20]	; (c0017d0 <_send_report+0x98>)
 c0017ba:	6013      	str	r3, [r2, #0]
	return;
 c0017bc:	bf00      	nop
}
 c0017be:	bd80      	pop	{r7, pc}
 c0017c0:	30000180 	.word	0x30000180
 c0017c4:	300000f4 	.word	0x300000f4
 c0017c8:	300003e0 	.word	0x300003e0
 c0017cc:	300003e4 	.word	0x300003e4
 c0017d0:	300003dc 	.word	0x300003dc

0c0017d4 <_attest_memory>:

/* ----------------------------- CRYPTO-OPERATIONS --------------------------------- */
uint32_t time_hash_memory;
uint32_t time_hash_memory_start;
uint32_t time_hash_memory_end;
void _attest_memory(){
 c0017d4:	b580      	push	{r7, lr}
 c0017d6:	af00      	add	r7, sp, #0
	time_hash_memory_start = HAL_GetTick();
 c0017d8:	f003 fbde 	bl	c004f98 <HAL_GetTick>
 c0017dc:	4603      	mov	r3, r0
 c0017de:	4a0b      	ldr	r2, [pc, #44]	; (c00180c <_attest_memory+0x38>)
 c0017e0:	6013      	str	r3, [r2, #0]
	// Compute sigle hash of non-secure memory
	Hacl_SHA2_256_hash(report_secure.mem_hash, (uint8_t*)(NONSECURE_FLASH_START), NONSECURE_FLASH_SIZE);
 c0017e2:	f44f 6236 	mov.w	r2, #2912	; 0xb60
 c0017e6:	490a      	ldr	r1, [pc, #40]	; (c001810 <_attest_memory+0x3c>)
 c0017e8:	480a      	ldr	r0, [pc, #40]	; (c001814 <_attest_memory+0x40>)
 c0017ea:	f7ff fca8 	bl	c00113e <Hacl_SHA2_256_hash>
	time_hash_memory_end = HAL_GetTick();
 c0017ee:	f003 fbd3 	bl	c004f98 <HAL_GetTick>
 c0017f2:	4603      	mov	r3, r0
 c0017f4:	4a08      	ldr	r2, [pc, #32]	; (c001818 <_attest_memory+0x44>)
 c0017f6:	6013      	str	r3, [r2, #0]
	time_hash_memory = time_hash_memory_end-time_hash_memory_start;
 c0017f8:	4b07      	ldr	r3, [pc, #28]	; (c001818 <_attest_memory+0x44>)
 c0017fa:	681a      	ldr	r2, [r3, #0]
 c0017fc:	4b03      	ldr	r3, [pc, #12]	; (c00180c <_attest_memory+0x38>)
 c0017fe:	681b      	ldr	r3, [r3, #0]
 c001800:	1ad3      	subs	r3, r2, r3
 c001802:	4a06      	ldr	r2, [pc, #24]	; (c00181c <_attest_memory+0x48>)
 c001804:	6013      	str	r3, [r2, #0]
}
 c001806:	bf00      	nop
 c001808:	bd80      	pop	{r7, pc}
 c00180a:	bf00      	nop
 c00180c:	300003ec 	.word	0x300003ec
 c001810:	080401f8 	.word	0x080401f8
 c001814:	300001c2 	.word	0x300001c2
 c001818:	300003f0 	.word	0x300003f0
 c00181c:	300003e8 	.word	0x300003e8

0c001820 <_sign_report>:

uint32_t time_sign_report = 0;
uint32_t time_sign_report_start;
uint32_t time_sign_report_end;
uint8_t sign_report_iters = 0;
void _sign_report(){
 c001820:	b580      	push	{r7, lr}
 c001822:	b084      	sub	sp, #16
 c001824:	af02      	add	r7, sp, #8
	time_sign_report_start = HAL_GetTick();
 c001826:	f003 fbb7 	bl	c004f98 <HAL_GetTick>
 c00182a:	4603      	mov	r3, r0
 c00182c:	4a1a      	ldr	r2, [pc, #104]	; (c001898 <_sign_report+0x78>)
 c00182e:	6013      	str	r3, [r2, #0]
	// Baseline End-to-end APP
//	uint32_t report_size = 4; // in bytes
//	Hacl_SHA2_256_hash(report_hash, (uint8_t*)(&output_data), report_size);

	// CFA or TRACES
	uint32_t report_size = 2 + HASH_SIZE_BYTES + 2 + 4*report_secure.num_CF_Log_size;
 c001830:	4b1a      	ldr	r3, [pc, #104]	; (c00189c <_sign_report+0x7c>)
 c001832:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c001836:	3309      	adds	r3, #9
 c001838:	009b      	lsls	r3, r3, #2
 c00183a:	607b      	str	r3, [r7, #4]
	Hacl_SHA2_256_hash(report_hash, (uint8_t*)(&report_secure.isFinal), report_size);
 c00183c:	687a      	ldr	r2, [r7, #4]
 c00183e:	4918      	ldr	r1, [pc, #96]	; (c0018a0 <_sign_report+0x80>)
 c001840:	4818      	ldr	r0, [pc, #96]	; (c0018a4 <_sign_report+0x84>)
 c001842:	f7ff fc7c 	bl	c00113e <Hacl_SHA2_256_hash>

	// sign hash
    curve = uECC_secp256r1();
 c001846:	f001 ff87 	bl	c003758 <uECC_secp256r1>
 c00184a:	4603      	mov	r3, r0
 c00184c:	4a16      	ldr	r2, [pc, #88]	; (c0018a8 <_sign_report+0x88>)
 c00184e:	6013      	str	r3, [r2, #0]
    int t =  uECC_sign(private_key, report_hash, HASH_SIZE_BYTES, report_secure.signature, curve);
 c001850:	4b15      	ldr	r3, [pc, #84]	; (c0018a8 <_sign_report+0x88>)
 c001852:	681b      	ldr	r3, [r3, #0]
 c001854:	9300      	str	r3, [sp, #0]
 c001856:	4b11      	ldr	r3, [pc, #68]	; (c00189c <_sign_report+0x7c>)
 c001858:	2220      	movs	r2, #32
 c00185a:	4912      	ldr	r1, [pc, #72]	; (c0018a4 <_sign_report+0x84>)
 c00185c:	4813      	ldr	r0, [pc, #76]	; (c0018ac <_sign_report+0x8c>)
 c00185e:	f002 ff15 	bl	c00468c <uECC_sign>
 c001862:	6038      	str	r0, [r7, #0]

    time_sign_report_end = HAL_GetTick();
 c001864:	f003 fb98 	bl	c004f98 <HAL_GetTick>
 c001868:	4603      	mov	r3, r0
 c00186a:	4a11      	ldr	r2, [pc, #68]	; (c0018b0 <_sign_report+0x90>)
 c00186c:	6013      	str	r3, [r2, #0]
	time_sign_report += time_sign_report_end-time_sign_report_start;
 c00186e:	4b10      	ldr	r3, [pc, #64]	; (c0018b0 <_sign_report+0x90>)
 c001870:	681a      	ldr	r2, [r3, #0]
 c001872:	4b09      	ldr	r3, [pc, #36]	; (c001898 <_sign_report+0x78>)
 c001874:	681b      	ldr	r3, [r3, #0]
 c001876:	1ad2      	subs	r2, r2, r3
 c001878:	4b0e      	ldr	r3, [pc, #56]	; (c0018b4 <_sign_report+0x94>)
 c00187a:	681b      	ldr	r3, [r3, #0]
 c00187c:	4413      	add	r3, r2
 c00187e:	4a0d      	ldr	r2, [pc, #52]	; (c0018b4 <_sign_report+0x94>)
 c001880:	6013      	str	r3, [r2, #0]
	sign_report_iters++;
 c001882:	4b0d      	ldr	r3, [pc, #52]	; (c0018b8 <_sign_report+0x98>)
 c001884:	781b      	ldrb	r3, [r3, #0]
 c001886:	3301      	adds	r3, #1
 c001888:	b2da      	uxtb	r2, r3
 c00188a:	4b0b      	ldr	r3, [pc, #44]	; (c0018b8 <_sign_report+0x98>)
 c00188c:	701a      	strb	r2, [r3, #0]
}
 c00188e:	bf00      	nop
 c001890:	3708      	adds	r7, #8
 c001892:	46bd      	mov	sp, r7
 c001894:	bd80      	pop	{r7, pc}
 c001896:	bf00      	nop
 c001898:	300003f8 	.word	0x300003f8
 c00189c:	30000180 	.word	0x30000180
 c0018a0:	300001c0 	.word	0x300001c0
 c0018a4:	3000036c 	.word	0x3000036c
 c0018a8:	300003ac 	.word	0x300003ac
 c0018ac:	30000000 	.word	0x30000000
 c0018b0:	300003fc 	.word	0x300003fc
 c0018b4:	300003f4 	.word	0x300003f4
 c0018b8:	30000400 	.word	0x30000400

0c0018bc <CFA_ENGINE_new_log_entry>:
uint32_t logging_time = 0;
uint32_t logging_start = 0;
uint32_t logging_end = 0;
void CFA_ENGINE_new_log_entry(uint32_t value){
 c0018bc:	b580      	push	{r7, lr}
 c0018be:	b082      	sub	sp, #8
 c0018c0:	af00      	add	r7, sp, #0
 c0018c2:	6078      	str	r0, [r7, #4]
	if(report_secure.num_CF_Log_size == MAX_CF_LOG_SIZE-1){
 c0018c4:	4b23      	ldr	r3, [pc, #140]	; (c001954 <CFA_ENGINE_new_log_entry+0x98>)
 c0018c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c0018ca:	2b3f      	cmp	r3, #63	; 0x3f
 c0018cc:	d126      	bne.n	c00191c <CFA_ENGINE_new_log_entry+0x60>
		SPECCFA_reset();
 c0018ce:	f000 fcb3 	bl	c002238 <SPECCFA_reset>
//		app_exec_time = htim3.Instance->CNT;
		cfa_engine_conf.attestation_status = WAITING_PARTIAL;
 c0018d2:	4b21      	ldr	r3, [pc, #132]	; (c001958 <CFA_ENGINE_new_log_entry+0x9c>)
 c0018d4:	2204      	movs	r2, #4
 c0018d6:	711a      	strb	r2, [r3, #4]
		end = HAL_GetTick();
 c0018d8:	f003 fb5e 	bl	c004f98 <HAL_GetTick>
 c0018dc:	4603      	mov	r3, r0
 c0018de:	4a1f      	ldr	r2, [pc, #124]	; (c00195c <CFA_ENGINE_new_log_entry+0xa0>)
 c0018e0:	6013      	str	r3, [r2, #0]
		app_exec_time += end - start;
 c0018e2:	4b1e      	ldr	r3, [pc, #120]	; (c00195c <CFA_ENGINE_new_log_entry+0xa0>)
 c0018e4:	681a      	ldr	r2, [r3, #0]
 c0018e6:	4b1e      	ldr	r3, [pc, #120]	; (c001960 <CFA_ENGINE_new_log_entry+0xa4>)
 c0018e8:	681b      	ldr	r3, [r3, #0]
 c0018ea:	1ad2      	subs	r2, r2, r3
 c0018ec:	4b1d      	ldr	r3, [pc, #116]	; (c001964 <CFA_ENGINE_new_log_entry+0xa8>)
 c0018ee:	681b      	ldr	r3, [r3, #0]
 c0018f0:	4413      	add	r3, r2
 c0018f2:	4a1c      	ldr	r2, [pc, #112]	; (c001964 <CFA_ENGINE_new_log_entry+0xa8>)
 c0018f4:	6013      	str	r3, [r2, #0]
		_send_report();
 c0018f6:	f7ff ff1f 	bl	c001738 <_send_report>
		#if CFLOG_TYPE == CFLOG_RAM
		report_secure.CFLog[report_secure.num_CF_Log_size] = value;
 c0018fa:	4b16      	ldr	r3, [pc, #88]	; (c001954 <CFA_ENGINE_new_log_entry+0x98>)
 c0018fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c001900:	4a14      	ldr	r2, [pc, #80]	; (c001954 <CFA_ENGINE_new_log_entry+0x98>)
 c001902:	3318      	adds	r3, #24
 c001904:	009b      	lsls	r3, r3, #2
 c001906:	4413      	add	r3, r2
 c001908:	687a      	ldr	r2, [r7, #4]
 c00190a:	605a      	str	r2, [r3, #4]
		uint32_t addr = (uint32_t)(&FLASH_CFLog[report_secure.num_CF_Log_size]);
		uint64_t data = (prev_entry << 32) | addr;
		update_flash(addr, data);
		#endif
//		report_secure.num_CF_Log_size++;
		_read_serial_loop();
 c00190c:	f7ff fdee 	bl	c0014ec <_read_serial_loop>
		start = HAL_GetTick();
 c001910:	f003 fb42 	bl	c004f98 <HAL_GetTick>
 c001914:	4603      	mov	r3, r0
 c001916:	4a12      	ldr	r2, [pc, #72]	; (c001960 <CFA_ENGINE_new_log_entry+0xa4>)
 c001918:	6013      	str	r3, [r2, #0]
		logging_start = HAL_GetTick();
		SPECCFA_process_log_entry(value, &report_secure);
		logging_end = HAL_GetTick();
		logging_time += logging_end - logging_start;
	}
}
 c00191a:	e017      	b.n	c00194c <CFA_ENGINE_new_log_entry+0x90>
		logging_start = HAL_GetTick();
 c00191c:	f003 fb3c 	bl	c004f98 <HAL_GetTick>
 c001920:	4603      	mov	r3, r0
 c001922:	4a11      	ldr	r2, [pc, #68]	; (c001968 <CFA_ENGINE_new_log_entry+0xac>)
 c001924:	6013      	str	r3, [r2, #0]
		SPECCFA_process_log_entry(value, &report_secure);
 c001926:	490b      	ldr	r1, [pc, #44]	; (c001954 <CFA_ENGINE_new_log_entry+0x98>)
 c001928:	6878      	ldr	r0, [r7, #4]
 c00192a:	f000 fcc3 	bl	c0022b4 <SPECCFA_process_log_entry>
		logging_end = HAL_GetTick();
 c00192e:	f003 fb33 	bl	c004f98 <HAL_GetTick>
 c001932:	4603      	mov	r3, r0
 c001934:	4a0d      	ldr	r2, [pc, #52]	; (c00196c <CFA_ENGINE_new_log_entry+0xb0>)
 c001936:	6013      	str	r3, [r2, #0]
		logging_time += logging_end - logging_start;
 c001938:	4b0c      	ldr	r3, [pc, #48]	; (c00196c <CFA_ENGINE_new_log_entry+0xb0>)
 c00193a:	681a      	ldr	r2, [r3, #0]
 c00193c:	4b0a      	ldr	r3, [pc, #40]	; (c001968 <CFA_ENGINE_new_log_entry+0xac>)
 c00193e:	681b      	ldr	r3, [r3, #0]
 c001940:	1ad2      	subs	r2, r2, r3
 c001942:	4b0b      	ldr	r3, [pc, #44]	; (c001970 <CFA_ENGINE_new_log_entry+0xb4>)
 c001944:	681b      	ldr	r3, [r3, #0]
 c001946:	4413      	add	r3, r2
 c001948:	4a09      	ldr	r2, [pc, #36]	; (c001970 <CFA_ENGINE_new_log_entry+0xb4>)
 c00194a:	6013      	str	r3, [r2, #0]
}
 c00194c:	bf00      	nop
 c00194e:	3708      	adds	r7, #8
 c001950:	46bd      	mov	sp, r7
 c001952:	bd80      	pop	{r7, pc}
 c001954:	30000180 	.word	0x30000180
 c001958:	300000f4 	.word	0x300000f4
 c00195c:	300003bc 	.word	0x300003bc
 c001960:	300003b8 	.word	0x300003b8
 c001964:	300003b4 	.word	0x300003b4
 c001968:	30000408 	.word	0x30000408
 c00196c:	3000040c 	.word	0x3000040c
 c001970:	30000404 	.word	0x30000404

0c001974 <CFA_ENGINE_run_attestation>:

void CFA_ENGINE_run_attestation(){
 c001974:	b580      	push	{r7, lr}
 c001976:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.initialized != INITIALIZED){
 c001978:	4b16      	ldr	r3, [pc, #88]	; (c0019d4 <CFA_ENGINE_run_attestation+0x60>)
 c00197a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 c00197e:	2bee      	cmp	r3, #238	; 0xee
 c001980:	d126      	bne.n	c0019d0 <CFA_ENGINE_run_attestation+0x5c>
	//	*ERROR = ERROR_CFA_ENGINE_NOT_INITIALIZED;
		return;
	}

	report_secure.num_CF_Log_size = -1;
 c001982:	4b15      	ldr	r3, [pc, #84]	; (c0019d8 <CFA_ENGINE_run_attestation+0x64>)
 c001984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 c001988:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	cfa_engine_conf.attestation_status = ACTIVE;
 c00198c:	4b11      	ldr	r3, [pc, #68]	; (c0019d4 <CFA_ENGINE_run_attestation+0x60>)
 c00198e:	2201      	movs	r2, #1
 c001990:	711a      	strb	r2, [r3, #4]
	report_secure.number_of_logs_sent = 0;
 c001992:	4b11      	ldr	r3, [pc, #68]	; (c0019d8 <CFA_ENGINE_run_attestation+0x64>)
 c001994:	2200      	movs	r2, #0
 c001996:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

	// Call the application
	start = HAL_GetTick();
 c00199a:	f003 fafd 	bl	c004f98 <HAL_GetTick>
 c00199e:	4603      	mov	r3, r0
 c0019a0:	4a0e      	ldr	r2, [pc, #56]	; (c0019dc <CFA_ENGINE_run_attestation+0x68>)
 c0019a2:	6013      	str	r3, [r2, #0]
	_run_application();
 c0019a4:	f7ff fc6c 	bl	c001280 <_run_application>
//	test_application();
	end = HAL_GetTick();
 c0019a8:	f003 faf6 	bl	c004f98 <HAL_GetTick>
 c0019ac:	4603      	mov	r3, r0
 c0019ae:	4a0c      	ldr	r2, [pc, #48]	; (c0019e0 <CFA_ENGINE_run_attestation+0x6c>)
 c0019b0:	6013      	str	r3, [r2, #0]
	app_exec_time += end - start;
 c0019b2:	4b0b      	ldr	r3, [pc, #44]	; (c0019e0 <CFA_ENGINE_run_attestation+0x6c>)
 c0019b4:	681a      	ldr	r2, [r3, #0]
 c0019b6:	4b09      	ldr	r3, [pc, #36]	; (c0019dc <CFA_ENGINE_run_attestation+0x68>)
 c0019b8:	681b      	ldr	r3, [r3, #0]
 c0019ba:	1ad2      	subs	r2, r2, r3
 c0019bc:	4b09      	ldr	r3, [pc, #36]	; (c0019e4 <CFA_ENGINE_run_attestation+0x70>)
 c0019be:	681b      	ldr	r3, [r3, #0]
 c0019c0:	4413      	add	r3, r2
 c0019c2:	4a08      	ldr	r2, [pc, #32]	; (c0019e4 <CFA_ENGINE_run_attestation+0x70>)
 c0019c4:	6013      	str	r3, [r2, #0]
	// Set Final report Flag
	report_secure.isFinal = TRUE;
 c0019c6:	4b04      	ldr	r3, [pc, #16]	; (c0019d8 <CFA_ENGINE_run_attestation+0x64>)
 c0019c8:	2201      	movs	r2, #1
 c0019ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	return;
 c0019ce:	e000      	b.n	c0019d2 <CFA_ENGINE_run_attestation+0x5e>
		return;
 c0019d0:	bf00      	nop
}
 c0019d2:	bd80      	pop	{r7, pc}
 c0019d4:	300000f4 	.word	0x300000f4
 c0019d8:	30000180 	.word	0x30000180
 c0019dc:	300003b8 	.word	0x300003b8
 c0019e0:	300003bc 	.word	0x300003bc
 c0019e4:	300003b4 	.word	0x300003b4

0c0019e8 <CFA_ENGINE_initialize>:

void CFA_ENGINE_initialize(){
 c0019e8:	b580      	push	{r7, lr}
 c0019ea:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.initialized == INITIALIZED){
 c0019ec:	4b06      	ldr	r3, [pc, #24]	; (c001a08 <CFA_ENGINE_initialize+0x20>)
 c0019ee:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 c0019f2:	2bee      	cmp	r3, #238	; 0xee
 c0019f4:	d006      	beq.n	c001a04 <CFA_ENGINE_initialize+0x1c>
		return; //ERROR_cfa_engine_ALREADY_INITIALIZED;;
	}
	_attest_memory();
 c0019f6:	f7ff feed 	bl	c0017d4 <_attest_memory>
	_setup_data();
 c0019fa:	f7ff fbaf 	bl	c00115c <_setup_data>
	_clean();
 c0019fe:	f7ff fc09 	bl	c001214 <_clean>

	return;
 c001a02:	e000      	b.n	c001a06 <CFA_ENGINE_initialize+0x1e>
		return; //ERROR_cfa_engine_ALREADY_INITIALIZED;;
 c001a04:	bf00      	nop
}
 c001a06:	bd80      	pop	{r7, pc}
 c001a08:	300000f4 	.word	0x300000f4

0c001a0c <_heal_function>:
	HAL_NVIC_SystemReset();
	return;
}


void _heal_function(){
 c001a0c:	b480      	push	{r7}
 c001a0e:	af00      	add	r7, sp, #0
	while(1);
 c001a10:	e7fe      	b.n	c001a10 <_heal_function+0x4>
	...

0c001a14 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 c001a14:	b580      	push	{r7, lr}
 c001a16:	b082      	sub	sp, #8
 c001a18:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 c001a1a:	4b09      	ldr	r3, [pc, #36]	; (c001a40 <MX_GPIO_Init+0x2c>)
 c001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001a1e:	4a08      	ldr	r2, [pc, #32]	; (c001a40 <MX_GPIO_Init+0x2c>)
 c001a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c001a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 c001a26:	4b06      	ldr	r3, [pc, #24]	; (c001a40 <MX_GPIO_Init+0x2c>)
 c001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c001a2e:	607b      	str	r3, [r7, #4]
 c001a30:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 c001a32:	f004 f831 	bl	c005a98 <HAL_PWREx_EnableVddIO2>

}
 c001a36:	bf00      	nop
 c001a38:	3708      	adds	r7, #8
 c001a3a:	46bd      	mov	sp, r7
 c001a3c:	bd80      	pop	{r7, pc}
 c001a3e:	bf00      	nop
 c001a40:	50021000 	.word	0x50021000

0c001a44 <MX_GTZC_S_Init>:

/* USER CODE END 0 */

/* GTZC_S init function */
void MX_GTZC_S_Init(void)
{
 c001a44:	b580      	push	{r7, lr}
 c001a46:	b09c      	sub	sp, #112	; 0x70
 c001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c001a4a:	1d3b      	adds	r3, r7, #4
 c001a4c:	226c      	movs	r2, #108	; 0x6c
 c001a4e:	2100      	movs	r1, #0
 c001a50:	4618      	mov	r0, r3
 c001a52:	f006 fc98 	bl	c008386 <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_TIM3, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c001a56:	f240 3101 	movw	r1, #769	; 0x301
 c001a5a:	2001      	movs	r0, #1
 c001a5c:	f003 fd38 	bl	c0054d0 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c001a60:	4603      	mov	r3, r0
 c001a62:	2b00      	cmp	r3, #0
 c001a64:	d001      	beq.n	c001a6a <MX_GTZC_S_Init+0x26>
  {
    Error_Handler();
 c001a66:	f000 f963 	bl	c001d30 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_TIM4, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c001a6a:	f240 3101 	movw	r1, #769	; 0x301
 c001a6e:	2002      	movs	r0, #2
 c001a70:	f003 fd2e 	bl	c0054d0 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c001a74:	4603      	mov	r3, r0
 c001a76:	2b00      	cmp	r3, #0
 c001a78:	d001      	beq.n	c001a7e <MX_GTZC_S_Init+0x3a>
  {
    Error_Handler();
 c001a7a:	f000 f959 	bl	c001d30 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_LPUART1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c001a7e:	f240 3101 	movw	r1, #769	; 0x301
 c001a82:	2015      	movs	r0, #21
 c001a84:	f003 fd24 	bl	c0054d0 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c001a88:	4603      	mov	r3, r0
 c001a8a:	2b00      	cmp	r3, #0
 c001a8c:	d001      	beq.n	c001a92 <MX_GTZC_S_Init+0x4e>
  {
    Error_Handler();
 c001a8e:	f000 f94f 	bl	c001d30 <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c001a92:	2300      	movs	r3, #0
 c001a94:	607b      	str	r3, [r7, #4]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c001a96:	2300      	movs	r3, #0
 c001a98:	60bb      	str	r3, [r7, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c001a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001a9e:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c001aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001aa4:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c001aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001aaa:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c001aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001ab0:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c001ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001ab6:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c001ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001abc:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c001abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001ac2:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c001ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c001aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c001ad0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001ad4:	633b      	str	r3, [r7, #48]	; 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c001ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001ada:	637b      	str	r3, [r7, #52]	; 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c001adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c001ae2:	2300      	movs	r3, #0
 c001ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c001ae6:	2300      	movs	r3, #0
 c001ae8:	643b      	str	r3, [r7, #64]	; 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c001aea:	2300      	movs	r3, #0
 c001aec:	647b      	str	r3, [r7, #68]	; 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c001aee:	2300      	movs	r3, #0
 c001af0:	64bb      	str	r3, [r7, #72]	; 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c001af2:	2300      	movs	r3, #0
 c001af4:	64fb      	str	r3, [r7, #76]	; 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c001af6:	2300      	movs	r3, #0
 c001af8:	653b      	str	r3, [r7, #80]	; 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c001afa:	2300      	movs	r3, #0
 c001afc:	657b      	str	r3, [r7, #84]	; 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c001afe:	2300      	movs	r3, #0
 c001b00:	65bb      	str	r3, [r7, #88]	; 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c001b02:	2300      	movs	r3, #0
 c001b04:	65fb      	str	r3, [r7, #92]	; 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c001b06:	2300      	movs	r3, #0
 c001b08:	663b      	str	r3, [r7, #96]	; 0x60
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c001b0a:	2300      	movs	r3, #0
 c001b0c:	667b      	str	r3, [r7, #100]	; 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c001b0e:	2300      	movs	r3, #0
 c001b10:	66bb      	str	r3, [r7, #104]	; 0x68
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c001b12:	2300      	movs	r3, #0
 c001b14:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c001b16:	1d3b      	adds	r3, r7, #4
 c001b18:	4619      	mov	r1, r3
 c001b1a:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c001b1e:	f003 fdaf 	bl	c005680 <HAL_GTZC_MPCBB_ConfigMem>
 c001b22:	4603      	mov	r3, r0
 c001b24:	2b00      	cmp	r3, #0
 c001b26:	d001      	beq.n	c001b2c <MX_GTZC_S_Init+0xe8>
  {
    Error_Handler();
 c001b28:	f000 f902 	bl	c001d30 <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c001b2c:	2300      	movs	r3, #0
 c001b2e:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c001b30:	2300      	movs	r3, #0
 c001b32:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c001b34:	2300      	movs	r3, #0
 c001b36:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c001b38:	2300      	movs	r3, #0
 c001b3a:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c001b3c:	2300      	movs	r3, #0
 c001b3e:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c001b40:	2300      	movs	r3, #0
 c001b42:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c001b44:	2300      	movs	r3, #0
 c001b46:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c001b48:	2300      	movs	r3, #0
 c001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c001b4c:	2300      	movs	r3, #0
 c001b4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c001b50:	1d3b      	adds	r3, r7, #4
 c001b52:	4619      	mov	r1, r3
 c001b54:	4809      	ldr	r0, [pc, #36]	; (c001b7c <MX_GTZC_S_Init+0x138>)
 c001b56:	f003 fd93 	bl	c005680 <HAL_GTZC_MPCBB_ConfigMem>
 c001b5a:	4603      	mov	r3, r0
 c001b5c:	2b00      	cmp	r3, #0
 c001b5e:	d001      	beq.n	c001b64 <MX_GTZC_S_Init+0x120>
  {
    Error_Handler();
 c001b60:	f000 f8e6 	bl	c001d30 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */
  if (HAL_GTZC_TZIC_EnableIT(GTZC_PERIPH_LPUART1) != HAL_OK)
 c001b64:	2015      	movs	r0, #21
 c001b66:	f003 fe0f 	bl	c005788 <HAL_GTZC_TZIC_EnableIT>
 c001b6a:	4603      	mov	r3, r0
 c001b6c:	2b00      	cmp	r3, #0
 c001b6e:	d001      	beq.n	c001b74 <MX_GTZC_S_Init+0x130>
  {
    Error_Handler();
 c001b70:	f000 f8de 	bl	c001d30 <Error_Handler>
  }

  /* USER CODE END GTZC_S_Init 2 */

}
 c001b74:	bf00      	nop
 c001b76:	3770      	adds	r7, #112	; 0x70
 c001b78:	46bd      	mov	sp, r7
 c001b7a:	bd80      	pop	{r7, pc}
 c001b7c:	30030000 	.word	0x30030000

0c001b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c001b80:	b580      	push	{r7, lr}
 c001b82:	b082      	sub	sp, #8
 c001b84:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and interrupts secure/non-secure allocation setup done */
  /* in SystemInit() based on partition_stm32l552xx.h file's definitions. */
  /* USER CODE BEGIN 1 */

  //enable SecureFault_Handler, without this HardFault_Handler will be raised.
  SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
 c001b86:	4b12      	ldr	r3, [pc, #72]	; (c001bd0 <main+0x50>)
 c001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001b8a:	4a11      	ldr	r2, [pc, #68]	; (c001bd0 <main+0x50>)
 c001b8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c001b90:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c001b92:	f003 f996 	bl	c004ec2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 c001b96:	f000 f87b 	bl	c001c90 <SystemClock_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c001b9a:	f7ff ff53 	bl	c001a44 <MX_GTZC_S_Init>

  /* USER CODE BEGIN SysInit */

  // Enable flash controller clock
  __HAL_RCC_FLASH_CLK_ENABLE();
 c001b9e:	4b0d      	ldr	r3, [pc, #52]	; (c001bd4 <main+0x54>)
 c001ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001ba2:	4a0c      	ldr	r2, [pc, #48]	; (c001bd4 <main+0x54>)
 c001ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c001ba8:	6493      	str	r3, [r2, #72]	; 0x48
 c001baa:	4b0a      	ldr	r3, [pc, #40]	; (c001bd4 <main+0x54>)
 c001bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c001bb2:	607b      	str	r3, [r7, #4]
 c001bb4:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c001bb6:	f7ff ff2d 	bl	c001a14 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 c001bba:	f003 f885 	bl	c004cc8 <MX_LPUART1_UART_Init>
//  MX_TIM3_Init();
//  MX_TIM4_Init();
  /* USER CODE BEGIN 2 */
  FPU_Init();
 c001bbe:	f000 f80b 	bl	c001bd8 <FPU_Init>
  CFA_ENGINE_initialize();
 c001bc2:	f7ff ff11 	bl	c0019e8 <CFA_ENGINE_initialize>
  init_spec();
 c001bc6:	f000 fb31 	bl	c00222c <init_spec>
  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/


  NonSecure_Init();
 c001bca:	f000 f81d 	bl	c001c08 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c001bce:	e7fe      	b.n	c001bce <main+0x4e>
 c001bd0:	e000ed00 	.word	0xe000ed00
 c001bd4:	50021000 	.word	0x50021000

0c001bd8 <FPU_Init>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void FPU_Init(void) {
 c001bd8:	b480      	push	{r7}
 c001bda:	b083      	sub	sp, #12
 c001bdc:	af00      	add	r7, sp, #0
    // FPU access is controlled by the CPACR register
    // The CPACR is an ARMv8-M system control register (SCTLR)

    // Access the SCTLR register
    volatile uint32_t* cpacr = (volatile uint32_t*)0xE000ED88;
 c001bde:	4b09      	ldr	r3, [pc, #36]	; (c001c04 <FPU_Init+0x2c>)
 c001be0:	607b      	str	r3, [r7, #4]

    // Enable full access to the FPU for both secure and non-secure worlds
    *cpacr |= (0xF << 20);  // Set bits 20-23 to 1111 to enable full FPU access
 c001be2:	687b      	ldr	r3, [r7, #4]
 c001be4:	681b      	ldr	r3, [r3, #0]
 c001be6:	f443 0270 	orr.w	r2, r3, #15728640	; 0xf00000
 c001bea:	687b      	ldr	r3, [r7, #4]
 c001bec:	601a      	str	r2, [r3, #0]

    // DSB (Data Synchronization Barrier) to ensure the register write completes
    __asm volatile ("dsb");
 c001bee:	f3bf 8f4f 	dsb	sy

    // ISB (Instruction Synchronization Barrier) to flush the pipeline
    __asm volatile ("isb");
 c001bf2:	f3bf 8f6f 	isb	sy
}
 c001bf6:	bf00      	nop
 c001bf8:	370c      	adds	r7, #12
 c001bfa:	46bd      	mov	sp, r7
 c001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001c00:	4770      	bx	lr
 c001c02:	bf00      	nop
 c001c04:	e000ed88 	.word	0xe000ed88

0c001c08 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c001c08:	b590      	push	{r4, r7, lr}
 c001c0a:	b083      	sub	sp, #12
 c001c0c:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c001c0e:	4b1d      	ldr	r3, [pc, #116]	; (c001c84 <NonSecure_Init+0x7c>)
 c001c10:	4a1d      	ldr	r2, [pc, #116]	; (c001c88 <NonSecure_Init+0x80>)
 c001c12:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c001c14:	4b1c      	ldr	r3, [pc, #112]	; (c001c88 <NonSecure_Init+0x80>)
 c001c16:	681b      	ldr	r3, [r3, #0]
 c001c18:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c001c1a:	683b      	ldr	r3, [r7, #0]
 c001c1c:	f383 8888 	msr	MSP_NS, r3
}
 c001c20:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c001c22:	4b1a      	ldr	r3, [pc, #104]	; (c001c8c <NonSecure_Init+0x84>)
 c001c24:	681b      	ldr	r3, [r3, #0]
 c001c26:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c001c28:	687b      	ldr	r3, [r7, #4]
 c001c2a:	461c      	mov	r4, r3
 c001c2c:	0864      	lsrs	r4, r4, #1
 c001c2e:	0064      	lsls	r4, r4, #1
 c001c30:	4620      	mov	r0, r4
 c001c32:	4621      	mov	r1, r4
 c001c34:	4622      	mov	r2, r4
 c001c36:	4623      	mov	r3, r4
 c001c38:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001c3c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001c40:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001c44:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001c48:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001c4c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001c50:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001c54:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001c58:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001c5c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001c60:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001c64:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001c68:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001c6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001c70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001c74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001c78:	f7fe faec 	bl	c000254 <__gnu_cmse_nonsecure_call>
}
 c001c7c:	bf00      	nop
 c001c7e:	370c      	adds	r7, #12
 c001c80:	46bd      	mov	sp, r7
 c001c82:	bd90      	pop	{r4, r7, pc}
 c001c84:	e002ed00 	.word	0xe002ed00
 c001c88:	08040000 	.word	0x08040000
 c001c8c:	08040004 	.word	0x08040004

0c001c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c001c90:	b580      	push	{r7, lr}
 c001c92:	b098      	sub	sp, #96	; 0x60
 c001c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c001c96:	f107 0318 	add.w	r3, r7, #24
 c001c9a:	2248      	movs	r2, #72	; 0x48
 c001c9c:	2100      	movs	r1, #0
 c001c9e:	4618      	mov	r0, r3
 c001ca0:	f006 fb71 	bl	c008386 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c001ca4:	1d3b      	adds	r3, r7, #4
 c001ca6:	2200      	movs	r2, #0
 c001ca8:	601a      	str	r2, [r3, #0]
 c001caa:	605a      	str	r2, [r3, #4]
 c001cac:	609a      	str	r2, [r3, #8]
 c001cae:	60da      	str	r2, [r3, #12]
 c001cb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 c001cb2:	2000      	movs	r0, #0
 c001cb4:	f003 fe94 	bl	c0059e0 <HAL_PWREx_ControlVoltageScaling>
 c001cb8:	4603      	mov	r3, r0
 c001cba:	2b00      	cmp	r3, #0
 c001cbc:	d001      	beq.n	c001cc2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 c001cbe:	f000 f837 	bl	c001d30 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 c001cc2:	2302      	movs	r3, #2
 c001cc4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 c001cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 c001cca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 c001ccc:	2340      	movs	r3, #64	; 0x40
 c001cce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c001cd0:	2302      	movs	r3, #2
 c001cd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 c001cd4:	2302      	movs	r3, #2
 c001cd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 c001cd8:	2304      	movs	r3, #4
 c001cda:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 c001cdc:	2337      	movs	r3, #55	; 0x37
 c001cde:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c001ce0:	2307      	movs	r3, #7
 c001ce2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 c001ce4:	2302      	movs	r3, #2
 c001ce6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 c001ce8:	2302      	movs	r3, #2
 c001cea:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c001cec:	f107 0318 	add.w	r3, r7, #24
 c001cf0:	4618      	mov	r0, r3
 c001cf2:	f003 ff15 	bl	c005b20 <HAL_RCC_OscConfig>
 c001cf6:	4603      	mov	r3, r0
 c001cf8:	2b00      	cmp	r3, #0
 c001cfa:	d001      	beq.n	c001d00 <SystemClock_Config+0x70>
  {
    Error_Handler();
 c001cfc:	f000 f818 	bl	c001d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c001d00:	230f      	movs	r3, #15
 c001d02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c001d04:	2303      	movs	r3, #3
 c001d06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c001d08:	2300      	movs	r3, #0
 c001d0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c001d0c:	2300      	movs	r3, #0
 c001d0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c001d10:	2300      	movs	r3, #0
 c001d12:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c001d14:	1d3b      	adds	r3, r7, #4
 c001d16:	2105      	movs	r1, #5
 c001d18:	4618      	mov	r0, r3
 c001d1a:	f004 fbe3 	bl	c0064e4 <HAL_RCC_ClockConfig>
 c001d1e:	4603      	mov	r3, r0
 c001d20:	2b00      	cmp	r3, #0
 c001d22:	d001      	beq.n	c001d28 <SystemClock_Config+0x98>
  {
    Error_Handler();
 c001d24:	f000 f804 	bl	c001d30 <Error_Handler>
  }
}
 c001d28:	bf00      	nop
 c001d2a:	3760      	adds	r7, #96	; 0x60
 c001d2c:	46bd      	mov	sp, r7
 c001d2e:	bd80      	pop	{r7, pc}

0c001d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c001d30:	b480      	push	{r7}
 c001d32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c001d34:	b672      	cpsid	i
}
 c001d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c001d38:	e7fe      	b.n	c001d38 <Error_Handler+0x8>
	...

0c001d3c <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */

CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func){
 c001d3c:	b580      	push	{r7, lr}
 c001d3e:	b082      	sub	sp, #8
 c001d40:	af00      	add	r7, sp, #0
 c001d42:	4603      	mov	r3, r0
 c001d44:	6039      	str	r1, [r7, #0]
 c001d46:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c001d48:	683b      	ldr	r3, [r7, #0]
 c001d4a:	2b00      	cmp	r3, #0
 c001d4c:	d017      	beq.n	c001d7e <__acle_se_SECURE_RegisterCallback+0x42>
  {
    switch(CallbackId)
 c001d4e:	79fb      	ldrb	r3, [r7, #7]
 c001d50:	2b02      	cmp	r3, #2
 c001d52:	d00e      	beq.n	c001d72 <__acle_se_SECURE_RegisterCallback+0x36>
 c001d54:	2b02      	cmp	r3, #2
 c001d56:	dc14      	bgt.n	c001d82 <__acle_se_SECURE_RegisterCallback+0x46>
 c001d58:	2b00      	cmp	r3, #0
 c001d5a:	d002      	beq.n	c001d62 <__acle_se_SECURE_RegisterCallback+0x26>
 c001d5c:	2b01      	cmp	r3, #1
 c001d5e:	d004      	beq.n	c001d6a <__acle_se_SECURE_RegisterCallback+0x2e>
      case ATTESTATION_APP_ID:
			pAttestationFunctionCallback = func;
			CFA_ENGINE_register_callback();
			break;
      default:
        break;
 c001d60:	e00f      	b.n	c001d82 <__acle_se_SECURE_RegisterCallback+0x46>
			pSecureFaultCallback = func;
 c001d62:	4a25      	ldr	r2, [pc, #148]	; (c001df8 <__acle_se_SECURE_RegisterCallback+0xbc>)
 c001d64:	683b      	ldr	r3, [r7, #0]
 c001d66:	6013      	str	r3, [r2, #0]
			break;
 c001d68:	e00c      	b.n	c001d84 <__acle_se_SECURE_RegisterCallback+0x48>
			pSecureErrorCallback = func;
 c001d6a:	4a24      	ldr	r2, [pc, #144]	; (c001dfc <__acle_se_SECURE_RegisterCallback+0xc0>)
 c001d6c:	683b      	ldr	r3, [r7, #0]
 c001d6e:	6013      	str	r3, [r2, #0]
			break;
 c001d70:	e008      	b.n	c001d84 <__acle_se_SECURE_RegisterCallback+0x48>
			pAttestationFunctionCallback = func;
 c001d72:	4a23      	ldr	r2, [pc, #140]	; (c001e00 <__acle_se_SECURE_RegisterCallback+0xc4>)
 c001d74:	683b      	ldr	r3, [r7, #0]
 c001d76:	6013      	str	r3, [r2, #0]
			CFA_ENGINE_register_callback();
 c001d78:	f7ff fada 	bl	c001330 <CFA_ENGINE_register_callback>
			break;
 c001d7c:	e002      	b.n	c001d84 <__acle_se_SECURE_RegisterCallback+0x48>
    }
  }
 c001d7e:	bf00      	nop
 c001d80:	e000      	b.n	c001d84 <__acle_se_SECURE_RegisterCallback+0x48>
        break;
 c001d82:	bf00      	nop
}
 c001d84:	bf00      	nop
 c001d86:	3708      	adds	r7, #8
 c001d88:	46bd      	mov	sp, r7
 c001d8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c001d8e:	4670      	mov	r0, lr
 c001d90:	4671      	mov	r1, lr
 c001d92:	4672      	mov	r2, lr
 c001d94:	4673      	mov	r3, lr
 c001d96:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001d9a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001d9e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001da2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001da6:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001daa:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001dae:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001db2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001db6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001dba:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001dbe:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001dc2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001dc6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001dce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001dd2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001dd6:	f38e 8c00 	msr	CPSR_fs, lr
 c001dda:	b410      	push	{r4}
 c001ddc:	eef1 ca10 	vmrs	ip, fpscr
 c001de0:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001de4:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001de8:	ea0c 0c04 	and.w	ip, ip, r4
 c001dec:	eee1 ca10 	vmsr	fpscr, ip
 c001df0:	bc10      	pop	{r4}
 c001df2:	46f4      	mov	ip, lr
 c001df4:	4774      	bxns	lr
 c001df6:	bf00      	nop
 c001df8:	30000410 	.word	0x30000410
 c001dfc:	30000414 	.word	0x30000414
 c001e00:	30000418 	.word	0x30000418

0c001e04 <__acle_se_SECURE_RunCallback>:

CMSE_NS_ENTRY void SECURE_RunCallback(){
 c001e04:	b580      	push	{r7, lr}
 c001e06:	af00      	add	r7, sp, #0
	CFA_ENGINE_run_attestation(0x23FA);
 c001e08:	f242 30fa 	movw	r0, #9210	; 0x23fa
 c001e0c:	f7ff fdb2 	bl	c001974 <CFA_ENGINE_run_attestation>
	return;
 c001e10:	bf00      	nop
}
 c001e12:	46bd      	mov	sp, r7
 c001e14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c001e18:	4670      	mov	r0, lr
 c001e1a:	4671      	mov	r1, lr
 c001e1c:	4672      	mov	r2, lr
 c001e1e:	4673      	mov	r3, lr
 c001e20:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001e24:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001e28:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001e2c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001e30:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001e34:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001e38:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001e3c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001e40:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001e44:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001e48:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001e4c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001e50:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001e54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001e58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001e5c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001e60:	f38e 8c00 	msr	CPSR_fs, lr
 c001e64:	b410      	push	{r4}
 c001e66:	eef1 ca10 	vmrs	ip, fpscr
 c001e6a:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001e6e:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001e72:	ea0c 0c04 	and.w	ip, ip, r4
 c001e76:	eee1 ca10 	vmsr	fpscr, ip
 c001e7a:	bc10      	pop	{r4}
 c001e7c:	46f4      	mov	ip, lr
 c001e7e:	4774      	bxns	lr

0c001e80 <__acle_se_SECURE_Initialize_CFA_engine>:

CMSE_NS_ENTRY void SECURE_Initialize_CFA_engine(){
 c001e80:	b580      	push	{r7, lr}
 c001e82:	af00      	add	r7, sp, #0
	CFA_ENGINE_initialize();
 c001e84:	f7ff fdb0 	bl	c0019e8 <CFA_ENGINE_initialize>
	return;
 c001e88:	bf00      	nop
}
 c001e8a:	46bd      	mov	sp, r7
 c001e8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c001e90:	4670      	mov	r0, lr
 c001e92:	4671      	mov	r1, lr
 c001e94:	4672      	mov	r2, lr
 c001e96:	4673      	mov	r3, lr
 c001e98:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001e9c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001ea0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001ea4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001ea8:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001eac:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001eb0:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001eb4:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001eb8:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001ebc:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001ec0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001ec4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001ec8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001ecc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001ed0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001ed4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001ed8:	f38e 8c00 	msr	CPSR_fs, lr
 c001edc:	b410      	push	{r4}
 c001ede:	eef1 ca10 	vmrs	ip, fpscr
 c001ee2:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001ee6:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001eea:	ea0c 0c04 	and.w	ip, ip, r4
 c001eee:	eee1 ca10 	vmsr	fpscr, ip
 c001ef2:	bc10      	pop	{r4}
 c001ef4:	46f4      	mov	ip, lr
 c001ef6:	4774      	bxns	lr

0c001ef8 <__acle_se_SECURE_Initialize_Attestation>:

CMSE_NS_ENTRY void SECURE_Initialize_Attestation(){
 c001ef8:	b580      	push	{r7, lr}
 c001efa:	af00      	add	r7, sp, #0
	CFA_ENGINE_initialize();
 c001efc:	f7ff fd74 	bl	c0019e8 <CFA_ENGINE_initialize>
	return;
 c001f00:	bf00      	nop
}
 c001f02:	46bd      	mov	sp, r7
 c001f04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c001f08:	4670      	mov	r0, lr
 c001f0a:	4671      	mov	r1, lr
 c001f0c:	4672      	mov	r2, lr
 c001f0e:	4673      	mov	r3, lr
 c001f10:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001f14:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001f18:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001f1c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001f20:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001f24:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001f28:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001f2c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001f30:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001f34:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001f38:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001f3c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001f40:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001f44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001f48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001f4c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001f50:	f38e 8c00 	msr	CPSR_fs, lr
 c001f54:	b410      	push	{r4}
 c001f56:	eef1 ca10 	vmrs	ip, fpscr
 c001f5a:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001f5e:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001f62:	ea0c 0c04 	and.w	ip, ip, r4
 c001f66:	eee1 ca10 	vmsr	fpscr, ip
 c001f6a:	bc10      	pop	{r4}
 c001f6c:	46f4      	mov	ip, lr
 c001f6e:	4774      	bxns	lr

0c001f70 <__acle_se_SECURE_log_ret>:

CMSE_NS_ENTRY __attribute ((naked)) void SECURE_log_ret(){
	__asm__ volatile("push	{r0, r1, r2, r3, r7, r12}");
 c001f70:	e92d 108f 	stmdb	sp!, {r0, r1, r2, r3, r7, ip}
	__asm__ volatile("sub	sp, sp, #24");
 c001f74:	b086      	sub	sp, #24
	__asm__ volatile("add	r7, sp, #0");
 c001f76:	af00      	add	r7, sp, #0
	__asm__ volatile("push	{r7, lr}");
 c001f78:	b580      	push	{r7, lr}
	__asm__ volatile("sub	sp, sp, #8");
 c001f7a:	b082      	sub	sp, #8
	__asm__ volatile("add	r7, sp, #0");
 c001f7c:	af00      	add	r7, sp, #0

	uint32_t inst_addr;
	asm("mov %0, lr" : "=r"(inst_addr));
 c001f7e:	4673      	mov	r3, lr
 c001f80:	461c      	mov	r4, r3
	CFA_ENGINE_new_log_entry(inst_addr);
 c001f82:	4620      	mov	r0, r4
 c001f84:	f7ff fc9a 	bl	c0018bc <CFA_ENGINE_new_log_entry>

	__asm__ volatile("nop");
 c001f88:	bf00      	nop
	__asm__ volatile("adds	r7, r7, #8");
 c001f8a:	3708      	adds	r7, #8
	__asm__ volatile("mov	sp, r7");
 c001f8c:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r7, lr}");
 c001f8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	__asm__ volatile("mov	r0, lr");
 c001f92:	4670      	mov	r0, lr
	__asm__ volatile("mov	r1, lr");
 c001f94:	4671      	mov	r1, lr
	__asm__ volatile("mov	r2, lr");
 c001f96:	4672      	mov	r2, lr
	__asm__ volatile("mov	r3, lr");
 c001f98:	4673      	mov	r3, lr
	__asm__ volatile("vmov.f32	s0, #1.0e+0");
 c001f9a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s1, #1.0e+0");
 c001f9e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s2, #1.0e+0");
 c001fa2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s3, #1.0e+0");
 c001fa6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s4, #1.0e+0");
 c001faa:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s5, #1.0e+0");
 c001fae:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s6, #1.0e+0");
 c001fb2:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s7, #1.0e+0");
 c001fb6:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s8, #1.0e+0");
 c001fba:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s9, #1.0e+0");
 c001fbe:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s10, #1.0e+0");
 c001fc2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s11, #1.0e+0");
 c001fc6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s12, #1.0e+0");
 c001fca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s13, #1.0e+0");
 c001fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s14, #1.0e+0");
 c001fd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s15, #1.0e+0");
 c001fd6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	__asm__ volatile("msr	APSR_nzcvqg, lr");
 c001fda:	f38e 8c00 	msr	CPSR_fs, lr
	__asm__ volatile("push	{r4}");
 c001fde:	b410      	push	{r4}
	__asm__ volatile("vmrs	ip, fpscr");
 c001fe0:	eef1 ca10 	vmrs	ip, fpscr
	__asm__ volatile("movw	r4, #65376");
 c001fe4:	f64f 7460 	movw	r4, #65376	; 0xff60
	__asm__ volatile("movt	r4, #4095");
 c001fe8:	f6c0 74ff 	movt	r4, #4095	; 0xfff
	__asm__ volatile("and	ip, r4");
 c001fec:	ea0c 0c04 	and.w	ip, ip, r4
	__asm__ volatile("vmsr	fpscr, ip");
 c001ff0:	eee1 ca10 	vmsr	fpscr, ip
	__asm__ volatile("pop	{r4}");
 c001ff4:	bc10      	pop	{r4}
	__asm__ volatile("mov	ip, lr");
 c001ff6:	46f4      	mov	ip, lr
	__asm__ volatile("adds	r7, r7, #24");
 c001ff8:	3718      	adds	r7, #24
	__asm__ volatile("mov	sp, r7");
 c001ffa:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r0, r1, r2, r3, r7, r12}");
 c001ffc:	e8bd 108f 	ldmia.w	sp!, {r0, r1, r2, r3, r7, ip}
	__asm__ volatile("bics	lr, #1");
 c002000:	f03e 0e01 	bics.w	lr, lr, #1
	__asm__ volatile("bxns	lr");
 c002004:	4774      	bxns	lr
}
 c002006:	bf00      	nop

0c002008 <__acle_se_SECURE_log_call>:

CMSE_NS_ENTRY __attribute ((naked)) void SECURE_log_call(uint32_t addr){
	__asm__ volatile("push	{r0, r1, r2, r3, r7, r10}");
 c002008:	e92d 048f 	stmdb	sp!, {r0, r1, r2, r3, r7, sl}
	__asm__ volatile("sub	sp, sp, #24");
 c00200c:	b086      	sub	sp, #24
	__asm__ volatile("add	r7, sp, #0");
 c00200e:	af00      	add	r7, sp, #0
	__asm__ volatile("push	{r7, lr}");
 c002010:	b580      	push	{r7, lr}
	__asm__ volatile("sub	sp, sp, #8");
 c002012:	b082      	sub	sp, #8
	__asm__ volatile("add	r7, sp, #0");
 c002014:	af00      	add	r7, sp, #0
	__asm__ volatile("sub	r0, r10, #1");
 c002016:	f1aa 0001 	sub.w	r0, sl, #1
	__asm__ volatile("bl	CFA_ENGINE_new_log_entry");
 c00201a:	f7ff fc4f 	bl	c0018bc <CFA_ENGINE_new_log_entry>
	__asm__ volatile("nop");
 c00201e:	bf00      	nop
	__asm__ volatile("adds	r7, r7, #8");
 c002020:	3708      	adds	r7, #8
	__asm__ volatile("mov	sp, r7");
 c002022:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r7, lr}");
 c002024:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	__asm__ volatile("mov	r0, lr");
 c002028:	4670      	mov	r0, lr
	__asm__ volatile("mov	r1, lr");
 c00202a:	4671      	mov	r1, lr
	__asm__ volatile("mov	r2, lr");
 c00202c:	4672      	mov	r2, lr
	__asm__ volatile("mov	r3, lr");
 c00202e:	4673      	mov	r3, lr
	__asm__ volatile("vmov.f32	s0, #1.0e+0");
 c002030:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s1, #1.0e+0");
 c002034:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s2, #1.0e+0");
 c002038:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s3, #1.0e+0");
 c00203c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s4, #1.0e+0");
 c002040:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s5, #1.0e+0");
 c002044:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s6, #1.0e+0");
 c002048:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s7, #1.0e+0");
 c00204c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s8, #1.0e+0");
 c002050:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s9, #1.0e+0");
 c002054:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s10, #1.0e+0");
 c002058:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s11, #1.0e+0");
 c00205c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s12, #1.0e+0");
 c002060:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s13, #1.0e+0");
 c002064:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s14, #1.0e+0");
 c002068:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s15, #1.0e+0");
 c00206c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	__asm__ volatile("msr	APSR_nzcvqg, lr");
 c002070:	f38e 8c00 	msr	CPSR_fs, lr
	__asm__ volatile("vmrs	ip, fpscr");
 c002074:	eef1 ca10 	vmrs	ip, fpscr
	__asm__ volatile("movw	r4, #65376");
 c002078:	f64f 7460 	movw	r4, #65376	; 0xff60
	__asm__ volatile("movt	r4, #4095");
 c00207c:	f6c0 74ff 	movt	r4, #4095	; 0xfff
	__asm__ volatile("and	ip, r4");
 c002080:	ea0c 0c04 	and.w	ip, ip, r4
	__asm__ volatile("vmsr	fpscr, ip");
 c002084:	eee1 ca10 	vmsr	fpscr, ip
	__asm__ volatile("mov	ip, lr");
 c002088:	46f4      	mov	ip, lr
	__asm__ volatile("adds	r7, r7, #24");
 c00208a:	3718      	adds	r7, #24
	__asm__ volatile("mov	sp, r7");
 c00208c:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r0, r1, r2, r3, r7, r10}");
 c00208e:	e8bd 048f 	ldmia.w	sp!, {r0, r1, r2, r3, r7, sl}
	__asm__ volatile("bics	r10, #1");
 c002092:	f03a 0a01 	bics.w	sl, sl, #1
	__asm__ volatile("bxns	r10");
 c002096:	4754      	bxns	sl
}
 c002098:	bf00      	nop

0c00209a <__acle_se_SECURE_log_cond_br>:


CMSE_NS_ENTRY __attribute ((naked)) void SECURE_log_cond_br(){;
	__asm__ volatile("push	{r0, r1, r2, r3, r7, r12}");
 c00209a:	e92d 108f 	stmdb	sp!, {r0, r1, r2, r3, r7, ip}
	__asm__ volatile("sub	sp, sp, #24");
 c00209e:	b086      	sub	sp, #24
	__asm__ volatile("add	r7, sp, #0");
 c0020a0:	af00      	add	r7, sp, #0
	__asm__ volatile("push	{r7, lr}");
 c0020a2:	b580      	push	{r7, lr}
	__asm__ volatile("sub	sp, sp, #8");
 c0020a4:	b082      	sub	sp, #8
	__asm__ volatile("add	r7, sp, #0");
 c0020a6:	af00      	add	r7, sp, #0

	uint32_t inst_addr;
	asm("mov %0, lr" : "=r"(inst_addr));
 c0020a8:	4673      	mov	r3, lr
 c0020aa:	461c      	mov	r4, r3
	inst_addr -= 4;
 c0020ac:	3c04      	subs	r4, #4
	CFA_ENGINE_new_log_entry(inst_addr);
 c0020ae:	4620      	mov	r0, r4
 c0020b0:	f7ff fc04 	bl	c0018bc <CFA_ENGINE_new_log_entry>

	__asm__ volatile("nop");
 c0020b4:	bf00      	nop
	__asm__ volatile("adds	r7, r7, #8");
 c0020b6:	3708      	adds	r7, #8
	__asm__ volatile("mov	sp, r7");
 c0020b8:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r7, lr}");
 c0020ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	__asm__ volatile("mov	r0, lr");
 c0020be:	4670      	mov	r0, lr
	__asm__ volatile("mov	r1, lr");
 c0020c0:	4671      	mov	r1, lr
	__asm__ volatile("mov	r2, lr");
 c0020c2:	4672      	mov	r2, lr
	__asm__ volatile("mov	r3, lr");
 c0020c4:	4673      	mov	r3, lr
	__asm__ volatile("vmov.f32	s0, #1.0e+0");
 c0020c6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s1, #1.0e+0");
 c0020ca:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s2, #1.0e+0");
 c0020ce:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s3, #1.0e+0");
 c0020d2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s4, #1.0e+0");
 c0020d6:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s5, #1.0e+0");
 c0020da:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s6, #1.0e+0");
 c0020de:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s7, #1.0e+0");
 c0020e2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s8, #1.0e+0");
 c0020e6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s9, #1.0e+0");
 c0020ea:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s10, #1.0e+0");
 c0020ee:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s11, #1.0e+0");
 c0020f2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s12, #1.0e+0");
 c0020f6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s13, #1.0e+0");
 c0020fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s14, #1.0e+0");
 c0020fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s15, #1.0e+0");
 c002102:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	__asm__ volatile("msr	APSR_nzcvqg, lr");
 c002106:	f38e 8c00 	msr	CPSR_fs, lr
	__asm__ volatile("push	{r4}");
 c00210a:	b410      	push	{r4}
	__asm__ volatile("vmrs	ip, fpscr");
 c00210c:	eef1 ca10 	vmrs	ip, fpscr
	__asm__ volatile("movw	r4, #65376");
 c002110:	f64f 7460 	movw	r4, #65376	; 0xff60
	__asm__ volatile("movt	r4, #4095");
 c002114:	f6c0 74ff 	movt	r4, #4095	; 0xfff
	__asm__ volatile("and	ip, r4");
 c002118:	ea0c 0c04 	and.w	ip, ip, r4
	__asm__ volatile("vmsr	fpscr, ip");
 c00211c:	eee1 ca10 	vmsr	fpscr, ip
	__asm__ volatile("pop	{r4}");
 c002120:	bc10      	pop	{r4}
	__asm__ volatile("mov	ip, lr");
 c002122:	46f4      	mov	ip, lr
	__asm__ volatile("adds	r7, r7, #24");
 c002124:	3718      	adds	r7, #24
	__asm__ volatile("mov	sp, r7");
 c002126:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r0, r1, r2, r3, r7, r12}");
 c002128:	e8bd 108f 	ldmia.w	sp!, {r0, r1, r2, r3, r7, ip}
	__asm__ volatile("bics	lr, #1");
 c00212c:	f03e 0e01 	bics.w	lr, lr, #1
	__asm__ volatile("bxns	lr");
 c002130:	4774      	bxns	lr
}
 c002132:	bf00      	nop

0c002134 <__acle_se_SECURE_run_attestation_wait_mode>:

CMSE_NS_ENTRY void  SECURE_run_attestation_wait_mode(){
 c002134:	b580      	push	{r7, lr}
 c002136:	af00      	add	r7, sp, #0
	CFA_ENGINE_start();
 c002138:	f7ff f8ee 	bl	c001318 <CFA_ENGINE_start>
	return;
 c00213c:	bf00      	nop
};
 c00213e:	46bd      	mov	sp, r7
 c002140:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c002144:	4670      	mov	r0, lr
 c002146:	4671      	mov	r1, lr
 c002148:	4672      	mov	r2, lr
 c00214a:	4673      	mov	r3, lr
 c00214c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c002150:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c002154:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c002158:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00215c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c002160:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c002164:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c002168:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00216c:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c002170:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c002174:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c002178:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00217c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c002180:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c002184:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c002188:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00218c:	f38e 8c00 	msr	CPSR_fs, lr
 c002190:	b410      	push	{r4}
 c002192:	eef1 ca10 	vmrs	ip, fpscr
 c002196:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00219a:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00219e:	ea0c 0c04 	and.w	ip, ip, r4
 c0021a2:	eee1 ca10 	vmsr	fpscr, ip
 c0021a6:	bc10      	pop	{r4}
 c0021a8:	46f4      	mov	ip, lr
 c0021aa:	4774      	bxns	lr

0c0021ac <__acle_se_SECURE_record_output_data>:

CMSE_NS_ENTRY void SECURE_record_output_data(uint32_t value){
 c0021ac:	b580      	push	{r7, lr}
 c0021ae:	b082      	sub	sp, #8
 c0021b0:	af00      	add	r7, sp, #0
 c0021b2:	6078      	str	r0, [r7, #4]
	record_output_data(value);
 c0021b4:	6878      	ldr	r0, [r7, #4]
 c0021b6:	f7ff f899 	bl	c0012ec <record_output_data>
	return;
 c0021ba:	bf00      	nop
};
 c0021bc:	3708      	adds	r7, #8
 c0021be:	46bd      	mov	sp, r7
 c0021c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0021c4:	4670      	mov	r0, lr
 c0021c6:	4671      	mov	r1, lr
 c0021c8:	4672      	mov	r2, lr
 c0021ca:	4673      	mov	r3, lr
 c0021cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0021d0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0021d4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0021d8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0021dc:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0021e0:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0021e4:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0021e8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0021ec:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0021f0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0021f4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0021f8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0021fc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c002200:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c002204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c002208:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00220c:	f38e 8c00 	msr	CPSR_fs, lr
 c002210:	b410      	push	{r4}
 c002212:	eef1 ca10 	vmrs	ip, fpscr
 c002216:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00221a:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00221e:	ea0c 0c04 	and.w	ip, ip, r4
 c002222:	eee1 ca10 	vmsr	fpscr, ip
 c002226:	bc10      	pop	{r4}
 c002228:	46f4      	mov	ip, lr
 c00222a:	4774      	bxns	lr

0c00222c <init_spec>:
int tmp;
signed int increment;

int random_init;

void init_spec(){
 c00222c:	b580      	push	{r7, lr}
 c00222e:	af00      	add	r7, sp, #0
	SPECCFA_reset();
 c002230:	f000 f802 	bl	c002238 <SPECCFA_reset>
}
 c002234:	bf00      	nop
 c002236:	bd80      	pop	{r7, pc}

0c002238 <SPECCFA_reset>:

void SPECCFA_reset(){
 c002238:	b480      	push	{r7}
 c00223a:	b083      	sub	sp, #12
 c00223c:	af00      	add	r7, sp, #0
	spec_monitor = 0x00;
 c00223e:	4b14      	ldr	r3, [pc, #80]	; (c002290 <SPECCFA_reset+0x58>)
 c002240:	2200      	movs	r2, #0
 c002242:	701a      	strb	r2, [r3, #0]
	spec_detect = 0x00;
 c002244:	4b13      	ldr	r3, [pc, #76]	; (c002294 <SPECCFA_reset+0x5c>)
 c002246:	2200      	movs	r2, #0
 c002248:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<TOTAL_BLOCKS; i++){
 c00224a:	2300      	movs	r3, #0
 c00224c:	607b      	str	r3, [r7, #4]
 c00224e:	e007      	b.n	c002260 <SPECCFA_reset+0x28>
		spec_monitor_count[i] = 0;
 c002250:	4a11      	ldr	r2, [pc, #68]	; (c002298 <SPECCFA_reset+0x60>)
 c002252:	687b      	ldr	r3, [r7, #4]
 c002254:	4413      	add	r3, r2
 c002256:	2200      	movs	r2, #0
 c002258:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<TOTAL_BLOCKS; i++){
 c00225a:	687b      	ldr	r3, [r7, #4]
 c00225c:	3301      	adds	r3, #1
 c00225e:	607b      	str	r3, [r7, #4]
 c002260:	687b      	ldr	r3, [r7, #4]
 c002262:	2b07      	cmp	r3, #7
 c002264:	ddf4      	ble.n	c002250 <SPECCFA_reset+0x18>
	}
	repeat_detect = 0;
 c002266:	4b0d      	ldr	r3, [pc, #52]	; (c00229c <SPECCFA_reset+0x64>)
 c002268:	2200      	movs	r2, #0
 c00226a:	701a      	strb	r2, [r3, #0]
	repeat_count = 0xffff0002;
 c00226c:	4b0c      	ldr	r3, [pc, #48]	; (c0022a0 <SPECCFA_reset+0x68>)
 c00226e:	4a0d      	ldr	r2, [pc, #52]	; (c0022a4 <SPECCFA_reset+0x6c>)
 c002270:	601a      	str	r2, [r3, #0]

	prev_value = 0;
 c002272:	4b0d      	ldr	r3, [pc, #52]	; (c0022a8 <SPECCFA_reset+0x70>)
 c002274:	2200      	movs	r2, #0
 c002276:	601a      	str	r2, [r3, #0]
	prev_addr = 0;
 c002278:	4b0c      	ldr	r3, [pc, #48]	; (c0022ac <SPECCFA_reset+0x74>)
 c00227a:	2200      	movs	r2, #0
 c00227c:	601a      	str	r2, [r3, #0]
	active_addr = 0;
 c00227e:	4b0c      	ldr	r3, [pc, #48]	; (c0022b0 <SPECCFA_reset+0x78>)
 c002280:	2200      	movs	r2, #0
 c002282:	601a      	str	r2, [r3, #0]
}
 c002284:	bf00      	nop
 c002286:	370c      	adds	r7, #12
 c002288:	46bd      	mov	sp, r7
 c00228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00228e:	4770      	bx	lr
 c002290:	30000424 	.word	0x30000424
 c002294:	30000425 	.word	0x30000425
 c002298:	3000041c 	.word	0x3000041c
 c00229c:	30000426 	.word	0x30000426
 c0022a0:	30000060 	.word	0x30000060
 c0022a4:	ffff0002 	.word	0xffff0002
 c0022a8:	30000428 	.word	0x30000428
 c0022ac:	3000042c 	.word	0x3000042c
 c0022b0:	30000430 	.word	0x30000430

0c0022b4 <SPECCFA_process_log_entry>:


void SPECCFA_process_log_entry(uint32_t addr, CFA_REPORT * report_secure){
 c0022b4:	b480      	push	{r7}
 c0022b6:	b083      	sub	sp, #12
 c0022b8:	af00      	add	r7, sp, #0
 c0022ba:	6078      	str	r0, [r7, #4]
 c0022bc:	6039      	str	r1, [r7, #0]
			prev_value = log_entry;
			prev_addr = active_addr;
		}
	}
	#else
	report_secure->num_CF_Log_size++;
 c0022be:	683b      	ldr	r3, [r7, #0]
 c0022c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c0022c4:	3301      	adds	r3, #1
 c0022c6:	b29a      	uxth	r2, r3
 c0022c8:	683b      	ldr	r3, [r7, #0]
 c0022ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	report_secure->CFLog[report_secure->num_CF_Log_size] = addr;
 c0022ce:	683b      	ldr	r3, [r7, #0]
 c0022d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c0022d4:	683a      	ldr	r2, [r7, #0]
 c0022d6:	3318      	adds	r3, #24
 c0022d8:	009b      	lsls	r3, r3, #2
 c0022da:	4413      	add	r3, r2
 c0022dc:	687a      	ldr	r2, [r7, #4]
 c0022de:	605a      	str	r2, [r3, #4]
	#endif
	return;
 c0022e0:	bf00      	nop
}
 c0022e2:	370c      	adds	r7, #12
 c0022e4:	46bd      	mov	sp, r7
 c0022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0022ea:	4770      	bx	lr

0c0022ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c0022ec:	b580      	push	{r7, lr}
 c0022ee:	b084      	sub	sp, #16
 c0022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c0022f2:	4b31      	ldr	r3, [pc, #196]	; (c0023b8 <HAL_MspInit+0xcc>)
 c0022f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0022f6:	4a30      	ldr	r2, [pc, #192]	; (c0023b8 <HAL_MspInit+0xcc>)
 c0022f8:	f043 0301 	orr.w	r3, r3, #1
 c0022fc:	6613      	str	r3, [r2, #96]	; 0x60
 c0022fe:	4b2e      	ldr	r3, [pc, #184]	; (c0023b8 <HAL_MspInit+0xcc>)
 c002300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c002302:	f003 0301 	and.w	r3, r3, #1
 c002306:	60fb      	str	r3, [r7, #12]
 c002308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c00230a:	4b2b      	ldr	r3, [pc, #172]	; (c0023b8 <HAL_MspInit+0xcc>)
 c00230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00230e:	4a2a      	ldr	r2, [pc, #168]	; (c0023b8 <HAL_MspInit+0xcc>)
 c002310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c002314:	6593      	str	r3, [r2, #88]	; 0x58
 c002316:	4b28      	ldr	r3, [pc, #160]	; (c0023b8 <HAL_MspInit+0xcc>)
 c002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c00231e:	60bb      	str	r3, [r7, #8]
 c002320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c002322:	4b25      	ldr	r3, [pc, #148]	; (c0023b8 <HAL_MspInit+0xcc>)
 c002324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002326:	4a24      	ldr	r2, [pc, #144]	; (c0023b8 <HAL_MspInit+0xcc>)
 c002328:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c00232c:	6493      	str	r3, [r2, #72]	; 0x48
 c00232e:	4b22      	ldr	r3, [pc, #136]	; (c0023b8 <HAL_MspInit+0xcc>)
 c002330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c002336:	607b      	str	r3, [r7, #4]
 c002338:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c00233a:	2200      	movs	r2, #0
 c00233c:	2100      	movs	r1, #0
 c00233e:	2008      	movs	r0, #8
 c002340:	f002 ff11 	bl	c005166 <HAL_NVIC_SetPriority>
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(GTZC_IRQn);
 c002344:	2008      	movs	r0, #8
 c002346:	f002 ff28 	bl	c00519a <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 c00234a:	f003 fbb5 	bl	c005ab8 <HAL_PWREx_DisableUCPDDeadBattery>

  /** PWR Non-Privilege/Non-Secure Items Configurations
  */
  HAL_PWR_ConfigAttributes(PWR_WKUP1, PWR_NSEC |PWR_NPRIV);
 c00234e:	f44f 7140 	mov.w	r1, #768	; 0x300
 c002352:	2001      	movs	r0, #1
 c002354:	f003 faf0 	bl	c005938 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP2, PWR_NSEC |PWR_NPRIV);
 c002358:	f44f 7140 	mov.w	r1, #768	; 0x300
 c00235c:	2002      	movs	r0, #2
 c00235e:	f003 faeb 	bl	c005938 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP3, PWR_NSEC |PWR_NPRIV);
 c002362:	f44f 7140 	mov.w	r1, #768	; 0x300
 c002366:	2004      	movs	r0, #4
 c002368:	f003 fae6 	bl	c005938 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP4, PWR_NSEC |PWR_NPRIV);
 c00236c:	f44f 7140 	mov.w	r1, #768	; 0x300
 c002370:	2008      	movs	r0, #8
 c002372:	f003 fae1 	bl	c005938 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP5, PWR_NSEC |PWR_NPRIV);
 c002376:	f44f 7140 	mov.w	r1, #768	; 0x300
 c00237a:	2010      	movs	r0, #16
 c00237c:	f003 fadc 	bl	c005938 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_VDM, PWR_NSEC |PWR_NPRIV);
 c002380:	f44f 7140 	mov.w	r1, #768	; 0x300
 c002384:	f44f 7000 	mov.w	r0, #512	; 0x200
 c002388:	f003 fad6 	bl	c005938 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_APC, PWR_NSEC |PWR_NPRIV);
 c00238c:	f44f 7140 	mov.w	r1, #768	; 0x300
 c002390:	f44f 6000 	mov.w	r0, #2048	; 0x800
 c002394:	f003 fad0 	bl	c005938 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_LPM, PWR_NSEC |PWR_NPRIV);
 c002398:	f44f 7140 	mov.w	r1, #768	; 0x300
 c00239c:	f44f 7080 	mov.w	r0, #256	; 0x100
 c0023a0:	f003 faca 	bl	c005938 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_VB, PWR_NSEC |PWR_NPRIV);
 c0023a4:	f44f 7140 	mov.w	r1, #768	; 0x300
 c0023a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 c0023ac:	f003 fac4 	bl	c005938 <HAL_PWR_ConfigAttributes>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c0023b0:	bf00      	nop
 c0023b2:	3710      	adds	r7, #16
 c0023b4:	46bd      	mov	sp, r7
 c0023b6:	bd80      	pop	{r7, pc}
 c0023b8:	50021000 	.word	0x50021000

0c0023bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c0023bc:	b480      	push	{r7}
 c0023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c0023c0:	e7fe      	b.n	c0023c0 <NMI_Handler+0x4>

0c0023c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c0023c2:	b480      	push	{r7}
 c0023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c0023c6:	e7fe      	b.n	c0023c6 <HardFault_Handler+0x4>

0c0023c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c0023c8:	b480      	push	{r7}
 c0023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c0023cc:	e7fe      	b.n	c0023cc <MemManage_Handler+0x4>

0c0023ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c0023ce:	b480      	push	{r7}
 c0023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c0023d2:	e7fe      	b.n	c0023d2 <BusFault_Handler+0x4>

0c0023d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c0023d4:	b480      	push	{r7}
 c0023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c0023d8:	e7fe      	b.n	c0023d8 <UsageFault_Handler+0x4>

0c0023da <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c0023da:	b480      	push	{r7}
 c0023dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c0023de:	e7fe      	b.n	c0023de <SecureFault_Handler+0x4>

0c0023e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c0023e0:	b480      	push	{r7}
 c0023e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c0023e4:	bf00      	nop
 c0023e6:	46bd      	mov	sp, r7
 c0023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0023ec:	4770      	bx	lr

0c0023ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c0023ee:	b480      	push	{r7}
 c0023f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c0023f2:	bf00      	nop
 c0023f4:	46bd      	mov	sp, r7
 c0023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0023fa:	4770      	bx	lr

0c0023fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c0023fc:	b480      	push	{r7}
 c0023fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c002400:	bf00      	nop
 c002402:	46bd      	mov	sp, r7
 c002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002408:	4770      	bx	lr

0c00240a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c00240a:	b580      	push	{r7, lr}
 c00240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c00240e:	f002 fdaf 	bl	c004f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c002412:	bf00      	nop
 c002414:	bd80      	pop	{r7, pc}

0c002416 <GTZC_IRQHandler>:

/**
  * @brief This function handles Global TrustZone controller global interrupt.
  */
void GTZC_IRQHandler(void)
{
 c002416:	b580      	push	{r7, lr}
 c002418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GTZC_IRQn 0 */

  /* USER CODE END GTZC_IRQn 0 */
  HAL_GTZC_IRQHandler();
 c00241a:	f003 f9ff 	bl	c00581c <HAL_GTZC_IRQHandler>
  /* USER CODE BEGIN GTZC_IRQn 1 */

  /* USER CODE END GTZC_IRQn 1 */
}
 c00241e:	bf00      	nop
 c002420:	bd80      	pop	{r7, pc}

0c002422 <_getpid>:
 c002422:	b480      	push	{r7}
 c002424:	af00      	add	r7, sp, #0
 c002426:	2301      	movs	r3, #1
 c002428:	4618      	mov	r0, r3
 c00242a:	46bd      	mov	sp, r7
 c00242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002430:	4770      	bx	lr

0c002432 <_kill>:
 c002432:	b580      	push	{r7, lr}
 c002434:	b082      	sub	sp, #8
 c002436:	af00      	add	r7, sp, #0
 c002438:	6078      	str	r0, [r7, #4]
 c00243a:	6039      	str	r1, [r7, #0]
 c00243c:	f005 ff6c 	bl	c008318 <__errno>
 c002440:	4603      	mov	r3, r0
 c002442:	2216      	movs	r2, #22
 c002444:	601a      	str	r2, [r3, #0]
 c002446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00244a:	4618      	mov	r0, r3
 c00244c:	3708      	adds	r7, #8
 c00244e:	46bd      	mov	sp, r7
 c002450:	bd80      	pop	{r7, pc}

0c002452 <_exit>:
 c002452:	b580      	push	{r7, lr}
 c002454:	b082      	sub	sp, #8
 c002456:	af00      	add	r7, sp, #0
 c002458:	6078      	str	r0, [r7, #4]
 c00245a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 c00245e:	6878      	ldr	r0, [r7, #4]
 c002460:	f7ff ffe7 	bl	c002432 <_kill>
 c002464:	e7fe      	b.n	c002464 <_exit+0x12>

0c002466 <_read>:
 c002466:	b580      	push	{r7, lr}
 c002468:	b086      	sub	sp, #24
 c00246a:	af00      	add	r7, sp, #0
 c00246c:	60f8      	str	r0, [r7, #12]
 c00246e:	60b9      	str	r1, [r7, #8]
 c002470:	607a      	str	r2, [r7, #4]
 c002472:	2300      	movs	r3, #0
 c002474:	617b      	str	r3, [r7, #20]
 c002476:	e00a      	b.n	c00248e <_read+0x28>
 c002478:	e000      	b.n	c00247c <_read+0x16>
 c00247a:	bf00      	nop
 c00247c:	4601      	mov	r1, r0
 c00247e:	68bb      	ldr	r3, [r7, #8]
 c002480:	1c5a      	adds	r2, r3, #1
 c002482:	60ba      	str	r2, [r7, #8]
 c002484:	b2ca      	uxtb	r2, r1
 c002486:	701a      	strb	r2, [r3, #0]
 c002488:	697b      	ldr	r3, [r7, #20]
 c00248a:	3301      	adds	r3, #1
 c00248c:	617b      	str	r3, [r7, #20]
 c00248e:	697a      	ldr	r2, [r7, #20]
 c002490:	687b      	ldr	r3, [r7, #4]
 c002492:	429a      	cmp	r2, r3
 c002494:	dbf0      	blt.n	c002478 <_read+0x12>
 c002496:	687b      	ldr	r3, [r7, #4]
 c002498:	4618      	mov	r0, r3
 c00249a:	3718      	adds	r7, #24
 c00249c:	46bd      	mov	sp, r7
 c00249e:	bd80      	pop	{r7, pc}

0c0024a0 <_write>:
 c0024a0:	b580      	push	{r7, lr}
 c0024a2:	b086      	sub	sp, #24
 c0024a4:	af00      	add	r7, sp, #0
 c0024a6:	60f8      	str	r0, [r7, #12]
 c0024a8:	60b9      	str	r1, [r7, #8]
 c0024aa:	607a      	str	r2, [r7, #4]
 c0024ac:	2300      	movs	r3, #0
 c0024ae:	617b      	str	r3, [r7, #20]
 c0024b0:	e009      	b.n	c0024c6 <_write+0x26>
 c0024b2:	68bb      	ldr	r3, [r7, #8]
 c0024b4:	1c5a      	adds	r2, r3, #1
 c0024b6:	60ba      	str	r2, [r7, #8]
 c0024b8:	781b      	ldrb	r3, [r3, #0]
 c0024ba:	4618      	mov	r0, r3
 c0024bc:	e000      	b.n	c0024c0 <_write+0x20>
 c0024be:	bf00      	nop
 c0024c0:	697b      	ldr	r3, [r7, #20]
 c0024c2:	3301      	adds	r3, #1
 c0024c4:	617b      	str	r3, [r7, #20]
 c0024c6:	697a      	ldr	r2, [r7, #20]
 c0024c8:	687b      	ldr	r3, [r7, #4]
 c0024ca:	429a      	cmp	r2, r3
 c0024cc:	dbf1      	blt.n	c0024b2 <_write+0x12>
 c0024ce:	687b      	ldr	r3, [r7, #4]
 c0024d0:	4618      	mov	r0, r3
 c0024d2:	3718      	adds	r7, #24
 c0024d4:	46bd      	mov	sp, r7
 c0024d6:	bd80      	pop	{r7, pc}

0c0024d8 <_close>:
 c0024d8:	b480      	push	{r7}
 c0024da:	b083      	sub	sp, #12
 c0024dc:	af00      	add	r7, sp, #0
 c0024de:	6078      	str	r0, [r7, #4]
 c0024e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0024e4:	4618      	mov	r0, r3
 c0024e6:	370c      	adds	r7, #12
 c0024e8:	46bd      	mov	sp, r7
 c0024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0024ee:	4770      	bx	lr

0c0024f0 <_fstat>:
 c0024f0:	b480      	push	{r7}
 c0024f2:	b083      	sub	sp, #12
 c0024f4:	af00      	add	r7, sp, #0
 c0024f6:	6078      	str	r0, [r7, #4]
 c0024f8:	6039      	str	r1, [r7, #0]
 c0024fa:	683b      	ldr	r3, [r7, #0]
 c0024fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 c002500:	605a      	str	r2, [r3, #4]
 c002502:	2300      	movs	r3, #0
 c002504:	4618      	mov	r0, r3
 c002506:	370c      	adds	r7, #12
 c002508:	46bd      	mov	sp, r7
 c00250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00250e:	4770      	bx	lr

0c002510 <_isatty>:
 c002510:	b480      	push	{r7}
 c002512:	b083      	sub	sp, #12
 c002514:	af00      	add	r7, sp, #0
 c002516:	6078      	str	r0, [r7, #4]
 c002518:	2301      	movs	r3, #1
 c00251a:	4618      	mov	r0, r3
 c00251c:	370c      	adds	r7, #12
 c00251e:	46bd      	mov	sp, r7
 c002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002524:	4770      	bx	lr

0c002526 <_lseek>:
 c002526:	b480      	push	{r7}
 c002528:	b085      	sub	sp, #20
 c00252a:	af00      	add	r7, sp, #0
 c00252c:	60f8      	str	r0, [r7, #12]
 c00252e:	60b9      	str	r1, [r7, #8]
 c002530:	607a      	str	r2, [r7, #4]
 c002532:	2300      	movs	r3, #0
 c002534:	4618      	mov	r0, r3
 c002536:	3714      	adds	r7, #20
 c002538:	46bd      	mov	sp, r7
 c00253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00253e:	4770      	bx	lr

0c002540 <_sbrk>:
 c002540:	b580      	push	{r7, lr}
 c002542:	b086      	sub	sp, #24
 c002544:	af00      	add	r7, sp, #0
 c002546:	6078      	str	r0, [r7, #4]
 c002548:	4a14      	ldr	r2, [pc, #80]	; (c00259c <_sbrk+0x5c>)
 c00254a:	4b15      	ldr	r3, [pc, #84]	; (c0025a0 <_sbrk+0x60>)
 c00254c:	1ad3      	subs	r3, r2, r3
 c00254e:	617b      	str	r3, [r7, #20]
 c002550:	697b      	ldr	r3, [r7, #20]
 c002552:	613b      	str	r3, [r7, #16]
 c002554:	4b13      	ldr	r3, [pc, #76]	; (c0025a4 <_sbrk+0x64>)
 c002556:	681b      	ldr	r3, [r3, #0]
 c002558:	2b00      	cmp	r3, #0
 c00255a:	d102      	bne.n	c002562 <_sbrk+0x22>
 c00255c:	4b11      	ldr	r3, [pc, #68]	; (c0025a4 <_sbrk+0x64>)
 c00255e:	4a12      	ldr	r2, [pc, #72]	; (c0025a8 <_sbrk+0x68>)
 c002560:	601a      	str	r2, [r3, #0]
 c002562:	4b10      	ldr	r3, [pc, #64]	; (c0025a4 <_sbrk+0x64>)
 c002564:	681a      	ldr	r2, [r3, #0]
 c002566:	687b      	ldr	r3, [r7, #4]
 c002568:	4413      	add	r3, r2
 c00256a:	693a      	ldr	r2, [r7, #16]
 c00256c:	429a      	cmp	r2, r3
 c00256e:	d207      	bcs.n	c002580 <_sbrk+0x40>
 c002570:	f005 fed2 	bl	c008318 <__errno>
 c002574:	4603      	mov	r3, r0
 c002576:	220c      	movs	r2, #12
 c002578:	601a      	str	r2, [r3, #0]
 c00257a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00257e:	e009      	b.n	c002594 <_sbrk+0x54>
 c002580:	4b08      	ldr	r3, [pc, #32]	; (c0025a4 <_sbrk+0x64>)
 c002582:	681b      	ldr	r3, [r3, #0]
 c002584:	60fb      	str	r3, [r7, #12]
 c002586:	4b07      	ldr	r3, [pc, #28]	; (c0025a4 <_sbrk+0x64>)
 c002588:	681a      	ldr	r2, [r3, #0]
 c00258a:	687b      	ldr	r3, [r7, #4]
 c00258c:	4413      	add	r3, r2
 c00258e:	4a05      	ldr	r2, [pc, #20]	; (c0025a4 <_sbrk+0x64>)
 c002590:	6013      	str	r3, [r2, #0]
 c002592:	68fb      	ldr	r3, [r7, #12]
 c002594:	4618      	mov	r0, r3
 c002596:	3718      	adds	r7, #24
 c002598:	46bd      	mov	sp, r7
 c00259a:	bd80      	pop	{r7, pc}
 c00259c:	30018000 	.word	0x30018000
 c0025a0:	00000400 	.word	0x00000400
 c0025a4:	30000434 	.word	0x30000434
 c0025a8:	300004e0 	.word	0x300004e0

0c0025ac <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c0025ac:	b480      	push	{r7}
 c0025ae:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c0025b0:	4b2f      	ldr	r3, [pc, #188]	; (c002670 <TZ_SAU_Setup+0xc4>)
 c0025b2:	2200      	movs	r2, #0
 c0025b4:	609a      	str	r2, [r3, #8]
 c0025b6:	4b2e      	ldr	r3, [pc, #184]	; (c002670 <TZ_SAU_Setup+0xc4>)
 c0025b8:	4a2e      	ldr	r2, [pc, #184]	; (c002674 <TZ_SAU_Setup+0xc8>)
 c0025ba:	60da      	str	r2, [r3, #12]
 c0025bc:	4b2c      	ldr	r3, [pc, #176]	; (c002670 <TZ_SAU_Setup+0xc4>)
 c0025be:	4a2e      	ldr	r2, [pc, #184]	; (c002678 <TZ_SAU_Setup+0xcc>)
 c0025c0:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c0025c2:	4b2b      	ldr	r3, [pc, #172]	; (c002670 <TZ_SAU_Setup+0xc4>)
 c0025c4:	2201      	movs	r2, #1
 c0025c6:	609a      	str	r2, [r3, #8]
 c0025c8:	4b29      	ldr	r3, [pc, #164]	; (c002670 <TZ_SAU_Setup+0xc4>)
 c0025ca:	4a2c      	ldr	r2, [pc, #176]	; (c00267c <TZ_SAU_Setup+0xd0>)
 c0025cc:	60da      	str	r2, [r3, #12]
 c0025ce:	4b28      	ldr	r3, [pc, #160]	; (c002670 <TZ_SAU_Setup+0xc4>)
 c0025d0:	4a2b      	ldr	r2, [pc, #172]	; (c002680 <TZ_SAU_Setup+0xd4>)
 c0025d2:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c0025d4:	4b26      	ldr	r3, [pc, #152]	; (c002670 <TZ_SAU_Setup+0xc4>)
 c0025d6:	2202      	movs	r2, #2
 c0025d8:	609a      	str	r2, [r3, #8]
 c0025da:	4b25      	ldr	r3, [pc, #148]	; (c002670 <TZ_SAU_Setup+0xc4>)
 c0025dc:	4a29      	ldr	r2, [pc, #164]	; (c002684 <TZ_SAU_Setup+0xd8>)
 c0025de:	60da      	str	r2, [r3, #12]
 c0025e0:	4b23      	ldr	r3, [pc, #140]	; (c002670 <TZ_SAU_Setup+0xc4>)
 c0025e2:	4a29      	ldr	r2, [pc, #164]	; (c002688 <TZ_SAU_Setup+0xdc>)
 c0025e4:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c0025e6:	4b22      	ldr	r3, [pc, #136]	; (c002670 <TZ_SAU_Setup+0xc4>)
 c0025e8:	2203      	movs	r2, #3
 c0025ea:	609a      	str	r2, [r3, #8]
 c0025ec:	4b20      	ldr	r3, [pc, #128]	; (c002670 <TZ_SAU_Setup+0xc4>)
 c0025ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c0025f2:	60da      	str	r2, [r3, #12]
 c0025f4:	4b1e      	ldr	r3, [pc, #120]	; (c002670 <TZ_SAU_Setup+0xc4>)
 c0025f6:	4a25      	ldr	r2, [pc, #148]	; (c00268c <TZ_SAU_Setup+0xe0>)
 c0025f8:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c0025fa:	4b1d      	ldr	r3, [pc, #116]	; (c002670 <TZ_SAU_Setup+0xc4>)
 c0025fc:	2204      	movs	r2, #4
 c0025fe:	609a      	str	r2, [r3, #8]
 c002600:	4b1b      	ldr	r3, [pc, #108]	; (c002670 <TZ_SAU_Setup+0xc4>)
 c002602:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c002606:	60da      	str	r2, [r3, #12]
 c002608:	4b19      	ldr	r3, [pc, #100]	; (c002670 <TZ_SAU_Setup+0xc4>)
 c00260a:	4a21      	ldr	r2, [pc, #132]	; (c002690 <TZ_SAU_Setup+0xe4>)
 c00260c:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c00260e:	4b18      	ldr	r3, [pc, #96]	; (c002670 <TZ_SAU_Setup+0xc4>)
 c002610:	2205      	movs	r2, #5
 c002612:	609a      	str	r2, [r3, #8]
 c002614:	4b16      	ldr	r3, [pc, #88]	; (c002670 <TZ_SAU_Setup+0xc4>)
 c002616:	4a1f      	ldr	r2, [pc, #124]	; (c002694 <TZ_SAU_Setup+0xe8>)
 c002618:	60da      	str	r2, [r3, #12]
 c00261a:	4b15      	ldr	r3, [pc, #84]	; (c002670 <TZ_SAU_Setup+0xc4>)
 c00261c:	4a1e      	ldr	r2, [pc, #120]	; (c002698 <TZ_SAU_Setup+0xec>)
 c00261e:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c002620:	4b13      	ldr	r3, [pc, #76]	; (c002670 <TZ_SAU_Setup+0xc4>)
 c002622:	2201      	movs	r2, #1
 c002624:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c002626:	4b1d      	ldr	r3, [pc, #116]	; (c00269c <TZ_SAU_Setup+0xf0>)
 c002628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c00262c:	4a1b      	ldr	r2, [pc, #108]	; (c00269c <TZ_SAU_Setup+0xf0>)
 c00262e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c002632:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c002636:	4b1a      	ldr	r3, [pc, #104]	; (c0026a0 <TZ_SAU_Setup+0xf4>)
 c002638:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c00263a:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c00263e:	4a18      	ldr	r2, [pc, #96]	; (c0026a0 <TZ_SAU_Setup+0xf4>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c002640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c002644:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c002646:	4b17      	ldr	r3, [pc, #92]	; (c0026a4 <TZ_SAU_Setup+0xf8>)
 c002648:	2200      	movs	r2, #0
 c00264a:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c00264e:	4b15      	ldr	r3, [pc, #84]	; (c0026a4 <TZ_SAU_Setup+0xf8>)
 c002650:	2200      	movs	r2, #0
 c002652:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c002656:	4b13      	ldr	r3, [pc, #76]	; (c0026a4 <TZ_SAU_Setup+0xf8>)
 c002658:	2200      	movs	r2, #0
 c00265a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c00265e:	4b11      	ldr	r3, [pc, #68]	; (c0026a4 <TZ_SAU_Setup+0xf8>)
 c002660:	2200      	movs	r2, #0
 c002662:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c002666:	bf00      	nop
 c002668:	46bd      	mov	sp, r7
 c00266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00266e:	4770      	bx	lr
 c002670:	e000edd0 	.word	0xe000edd0
 c002674:	0c03e000 	.word	0x0c03e000
 c002678:	0c03ffe3 	.word	0x0c03ffe3
 c00267c:	08040000 	.word	0x08040000
 c002680:	0807ffe1 	.word	0x0807ffe1
 c002684:	20018000 	.word	0x20018000
 c002688:	2003ffe1 	.word	0x2003ffe1
 c00268c:	4fffffe1 	.word	0x4fffffe1
 c002690:	9fffffe1 	.word	0x9fffffe1
 c002694:	0bf90000 	.word	0x0bf90000
 c002698:	0bfa8fe1 	.word	0x0bfa8fe1
 c00269c:	e000ed00 	.word	0xe000ed00
 c0026a0:	e000ef30 	.word	0xe000ef30
 c0026a4:	e000e100 	.word	0xe000e100

0c0026a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c0026a8:	b580      	push	{r7, lr}
 c0026aa:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c0026ac:	f7ff ff7e 	bl	c0025ac <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c0026b0:	4b08      	ldr	r3, [pc, #32]	; (c0026d4 <SystemInit+0x2c>)
 c0026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0026b6:	4a07      	ldr	r2, [pc, #28]	; (c0026d4 <SystemInit+0x2c>)
 c0026b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c0026bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c0026c0:	4b05      	ldr	r3, [pc, #20]	; (c0026d8 <SystemInit+0x30>)
 c0026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0026c6:	4a04      	ldr	r2, [pc, #16]	; (c0026d8 <SystemInit+0x30>)
 c0026c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c0026cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c0026d0:	bf00      	nop
 c0026d2:	bd80      	pop	{r7, pc}
 c0026d4:	e000ed00 	.word	0xe000ed00
 c0026d8:	e002ed00 	.word	0xe002ed00

0c0026dc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c0026dc:	b480      	push	{r7}
 c0026de:	b087      	sub	sp, #28
 c0026e0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c0026e2:	4b4f      	ldr	r3, [pc, #316]	; (c002820 <SystemCoreClockUpdate+0x144>)
 c0026e4:	681b      	ldr	r3, [r3, #0]
 c0026e6:	f003 0308 	and.w	r3, r3, #8
 c0026ea:	2b00      	cmp	r3, #0
 c0026ec:	d107      	bne.n	c0026fe <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c0026ee:	4b4c      	ldr	r3, [pc, #304]	; (c002820 <SystemCoreClockUpdate+0x144>)
 c0026f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0026f4:	0a1b      	lsrs	r3, r3, #8
 c0026f6:	f003 030f 	and.w	r3, r3, #15
 c0026fa:	617b      	str	r3, [r7, #20]
 c0026fc:	e005      	b.n	c00270a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c0026fe:	4b48      	ldr	r3, [pc, #288]	; (c002820 <SystemCoreClockUpdate+0x144>)
 c002700:	681b      	ldr	r3, [r3, #0]
 c002702:	091b      	lsrs	r3, r3, #4
 c002704:	f003 030f 	and.w	r3, r3, #15
 c002708:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c00270a:	4a46      	ldr	r2, [pc, #280]	; (c002824 <SystemCoreClockUpdate+0x148>)
 c00270c:	697b      	ldr	r3, [r7, #20]
 c00270e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c002712:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c002714:	4b42      	ldr	r3, [pc, #264]	; (c002820 <SystemCoreClockUpdate+0x144>)
 c002716:	689b      	ldr	r3, [r3, #8]
 c002718:	f003 030c 	and.w	r3, r3, #12
 c00271c:	2b0c      	cmp	r3, #12
 c00271e:	d866      	bhi.n	c0027ee <SystemCoreClockUpdate+0x112>
 c002720:	a201      	add	r2, pc, #4	; (adr r2, c002728 <SystemCoreClockUpdate+0x4c>)
 c002722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c002726:	bf00      	nop
 c002728:	0c00275d 	.word	0x0c00275d
 c00272c:	0c0027ef 	.word	0x0c0027ef
 c002730:	0c0027ef 	.word	0x0c0027ef
 c002734:	0c0027ef 	.word	0x0c0027ef
 c002738:	0c002765 	.word	0x0c002765
 c00273c:	0c0027ef 	.word	0x0c0027ef
 c002740:	0c0027ef 	.word	0x0c0027ef
 c002744:	0c0027ef 	.word	0x0c0027ef
 c002748:	0c00276d 	.word	0x0c00276d
 c00274c:	0c0027ef 	.word	0x0c0027ef
 c002750:	0c0027ef 	.word	0x0c0027ef
 c002754:	0c0027ef 	.word	0x0c0027ef
 c002758:	0c002775 	.word	0x0c002775
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c00275c:	4a32      	ldr	r2, [pc, #200]	; (c002828 <SystemCoreClockUpdate+0x14c>)
 c00275e:	697b      	ldr	r3, [r7, #20]
 c002760:	6013      	str	r3, [r2, #0]
      break;
 c002762:	e048      	b.n	c0027f6 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c002764:	4b30      	ldr	r3, [pc, #192]	; (c002828 <SystemCoreClockUpdate+0x14c>)
 c002766:	4a31      	ldr	r2, [pc, #196]	; (c00282c <SystemCoreClockUpdate+0x150>)
 c002768:	601a      	str	r2, [r3, #0]
      break;
 c00276a:	e044      	b.n	c0027f6 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c00276c:	4b2e      	ldr	r3, [pc, #184]	; (c002828 <SystemCoreClockUpdate+0x14c>)
 c00276e:	4a2f      	ldr	r2, [pc, #188]	; (c00282c <SystemCoreClockUpdate+0x150>)
 c002770:	601a      	str	r2, [r3, #0]
      break;
 c002772:	e040      	b.n	c0027f6 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c002774:	4b2a      	ldr	r3, [pc, #168]	; (c002820 <SystemCoreClockUpdate+0x144>)
 c002776:	68db      	ldr	r3, [r3, #12]
 c002778:	f003 0303 	and.w	r3, r3, #3
 c00277c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c00277e:	4b28      	ldr	r3, [pc, #160]	; (c002820 <SystemCoreClockUpdate+0x144>)
 c002780:	68db      	ldr	r3, [r3, #12]
 c002782:	091b      	lsrs	r3, r3, #4
 c002784:	f003 030f 	and.w	r3, r3, #15
 c002788:	3301      	adds	r3, #1
 c00278a:	60bb      	str	r3, [r7, #8]
 c00278c:	68fb      	ldr	r3, [r7, #12]
 c00278e:	2b02      	cmp	r3, #2
 c002790:	d003      	beq.n	c00279a <SystemCoreClockUpdate+0xbe>
 c002792:	68fb      	ldr	r3, [r7, #12]
 c002794:	2b03      	cmp	r3, #3
 c002796:	d006      	beq.n	c0027a6 <SystemCoreClockUpdate+0xca>
 c002798:	e00b      	b.n	c0027b2 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c00279a:	4a24      	ldr	r2, [pc, #144]	; (c00282c <SystemCoreClockUpdate+0x150>)
 c00279c:	68bb      	ldr	r3, [r7, #8]
 c00279e:	fbb2 f3f3 	udiv	r3, r2, r3
 c0027a2:	613b      	str	r3, [r7, #16]
          break;
 c0027a4:	e00b      	b.n	c0027be <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c0027a6:	4a21      	ldr	r2, [pc, #132]	; (c00282c <SystemCoreClockUpdate+0x150>)
 c0027a8:	68bb      	ldr	r3, [r7, #8]
 c0027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 c0027ae:	613b      	str	r3, [r7, #16]
          break;
 c0027b0:	e005      	b.n	c0027be <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c0027b2:	697a      	ldr	r2, [r7, #20]
 c0027b4:	68bb      	ldr	r3, [r7, #8]
 c0027b6:	fbb2 f3f3 	udiv	r3, r2, r3
 c0027ba:	613b      	str	r3, [r7, #16]
          break;
 c0027bc:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c0027be:	4b18      	ldr	r3, [pc, #96]	; (c002820 <SystemCoreClockUpdate+0x144>)
 c0027c0:	68db      	ldr	r3, [r3, #12]
 c0027c2:	0a1b      	lsrs	r3, r3, #8
 c0027c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c0027c8:	693b      	ldr	r3, [r7, #16]
 c0027ca:	fb02 f303 	mul.w	r3, r2, r3
 c0027ce:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c0027d0:	4b13      	ldr	r3, [pc, #76]	; (c002820 <SystemCoreClockUpdate+0x144>)
 c0027d2:	68db      	ldr	r3, [r3, #12]
 c0027d4:	0e5b      	lsrs	r3, r3, #25
 c0027d6:	f003 0303 	and.w	r3, r3, #3
 c0027da:	3301      	adds	r3, #1
 c0027dc:	005b      	lsls	r3, r3, #1
 c0027de:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c0027e0:	693a      	ldr	r2, [r7, #16]
 c0027e2:	687b      	ldr	r3, [r7, #4]
 c0027e4:	fbb2 f3f3 	udiv	r3, r2, r3
 c0027e8:	4a0f      	ldr	r2, [pc, #60]	; (c002828 <SystemCoreClockUpdate+0x14c>)
 c0027ea:	6013      	str	r3, [r2, #0]
      break;
 c0027ec:	e003      	b.n	c0027f6 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c0027ee:	4a0e      	ldr	r2, [pc, #56]	; (c002828 <SystemCoreClockUpdate+0x14c>)
 c0027f0:	697b      	ldr	r3, [r7, #20]
 c0027f2:	6013      	str	r3, [r2, #0]
      break;
 c0027f4:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c0027f6:	4b0a      	ldr	r3, [pc, #40]	; (c002820 <SystemCoreClockUpdate+0x144>)
 c0027f8:	689b      	ldr	r3, [r3, #8]
 c0027fa:	091b      	lsrs	r3, r3, #4
 c0027fc:	f003 030f 	and.w	r3, r3, #15
 c002800:	4a0b      	ldr	r2, [pc, #44]	; (c002830 <SystemCoreClockUpdate+0x154>)
 c002802:	5cd3      	ldrb	r3, [r2, r3]
 c002804:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c002806:	4b08      	ldr	r3, [pc, #32]	; (c002828 <SystemCoreClockUpdate+0x14c>)
 c002808:	681a      	ldr	r2, [r3, #0]
 c00280a:	683b      	ldr	r3, [r7, #0]
 c00280c:	fa22 f303 	lsr.w	r3, r2, r3
 c002810:	4a05      	ldr	r2, [pc, #20]	; (c002828 <SystemCoreClockUpdate+0x14c>)
 c002812:	6013      	str	r3, [r2, #0]
}
 c002814:	bf00      	nop
 c002816:	371c      	adds	r7, #28
 c002818:	46bd      	mov	sp, r7
 c00281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00281e:	4770      	bx	lr
 c002820:	50021000 	.word	0x50021000
 c002824:	0c009484 	.word	0x0c009484
 c002828:	30000064 	.word	0x30000064
 c00282c:	00f42400 	.word	0x00f42400
 c002830:	0c00946c 	.word	0x0c00946c

0c002834 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c002834:	b580      	push	{r7, lr}
 c002836:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c002838:	f7ff ff50 	bl	c0026dc <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c00283c:	4b1c      	ldr	r3, [pc, #112]	; (c0028b0 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c00283e:	681b      	ldr	r3, [r3, #0]
}
 c002840:	4618      	mov	r0, r3
 c002842:	46bd      	mov	sp, r7
 c002844:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c002848:	4671      	mov	r1, lr
 c00284a:	4672      	mov	r2, lr
 c00284c:	4673      	mov	r3, lr
 c00284e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c002852:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c002856:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00285a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00285e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c002862:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c002866:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00286a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00286e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c002872:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c002876:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00287a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00287e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c002882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c002886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00288a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00288e:	f38e 8c00 	msr	CPSR_fs, lr
 c002892:	b410      	push	{r4}
 c002894:	eef1 ca10 	vmrs	ip, fpscr
 c002898:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00289c:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0028a0:	ea0c 0c04 	and.w	ip, ip, r4
 c0028a4:	eee1 ca10 	vmsr	fpscr, ip
 c0028a8:	bc10      	pop	{r4}
 c0028aa:	46f4      	mov	ip, lr
 c0028ac:	4774      	bxns	lr
 c0028ae:	bf00      	nop
 c0028b0:	30000064 	.word	0x30000064

0c0028b4 <default_RNG>:
 c0028b4:	b580      	push	{r7, lr}
 c0028b6:	b084      	sub	sp, #16
 c0028b8:	af00      	add	r7, sp, #0
 c0028ba:	6078      	str	r0, [r7, #4]
 c0028bc:	6039      	str	r1, [r7, #0]
 c0028be:	2300      	movs	r3, #0
 c0028c0:	60fb      	str	r3, [r7, #12]
 c0028c2:	e00a      	b.n	c0028da <default_RNG+0x26>
 c0028c4:	f005 fd68 	bl	c008398 <rand>
 c0028c8:	4601      	mov	r1, r0
 c0028ca:	687a      	ldr	r2, [r7, #4]
 c0028cc:	68fb      	ldr	r3, [r7, #12]
 c0028ce:	4413      	add	r3, r2
 c0028d0:	b2ca      	uxtb	r2, r1
 c0028d2:	701a      	strb	r2, [r3, #0]
 c0028d4:	68fb      	ldr	r3, [r7, #12]
 c0028d6:	3301      	adds	r3, #1
 c0028d8:	60fb      	str	r3, [r7, #12]
 c0028da:	68fa      	ldr	r2, [r7, #12]
 c0028dc:	683b      	ldr	r3, [r7, #0]
 c0028de:	429a      	cmp	r2, r3
 c0028e0:	d3f0      	bcc.n	c0028c4 <default_RNG+0x10>
 c0028e2:	2301      	movs	r3, #1
 c0028e4:	4618      	mov	r0, r3
 c0028e6:	3710      	adds	r7, #16
 c0028e8:	46bd      	mov	sp, r7
 c0028ea:	bd80      	pop	{r7, pc}
 c0028ec:	0000      	movs	r0, r0
	...

0c0028f0 <uECC_vli_add>:
 c0028f0:	b4f0      	push	{r4, r5, r6, r7}
 c0028f2:	b088      	sub	sp, #32
 c0028f4:	af00      	add	r7, sp, #0
 c0028f6:	60f8      	str	r0, [r7, #12]
 c0028f8:	60b9      	str	r1, [r7, #8]
 c0028fa:	607a      	str	r2, [r7, #4]
 c0028fc:	70fb      	strb	r3, [r7, #3]
 c0028fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c002902:	f1c3 0308 	rsb	r3, r3, #8
 c002906:	00db      	lsls	r3, r3, #3
 c002908:	3301      	adds	r3, #1
 c00290a:	61fb      	str	r3, [r7, #28]
 c00290c:	68f8      	ldr	r0, [r7, #12]
 c00290e:	68b9      	ldr	r1, [r7, #8]
 c002910:	687a      	ldr	r2, [r7, #4]
 c002912:	69fb      	ldr	r3, [r7, #28]
 c002914:	2600      	movs	r6, #0
 c002916:	a505      	add	r5, pc, #20	; (adr r5, c00292c <uECC_vli_add+0x3c>)
 c002918:	f3af 8000 	nop.w
 c00291c:	f3af 8000 	nop.w
 c002920:	195b      	adds	r3, r3, r5
 c002922:	c920      	ldmia	r1!, {r5}
 c002924:	ca10      	ldmia	r2!, {r4}
 c002926:	192d      	adds	r5, r5, r4
 c002928:	c020      	stmia	r0!, {r5}
 c00292a:	4718      	bx	r3
 c00292c:	c920      	ldmia	r1!, {r5}
 c00292e:	ca10      	ldmia	r2!, {r4}
 c002930:	4165      	adcs	r5, r4
 c002932:	c020      	stmia	r0!, {r5}
 c002934:	c920      	ldmia	r1!, {r5}
 c002936:	ca10      	ldmia	r2!, {r4}
 c002938:	4165      	adcs	r5, r4
 c00293a:	c020      	stmia	r0!, {r5}
 c00293c:	c920      	ldmia	r1!, {r5}
 c00293e:	ca10      	ldmia	r2!, {r4}
 c002940:	4165      	adcs	r5, r4
 c002942:	c020      	stmia	r0!, {r5}
 c002944:	c920      	ldmia	r1!, {r5}
 c002946:	ca10      	ldmia	r2!, {r4}
 c002948:	4165      	adcs	r5, r4
 c00294a:	c020      	stmia	r0!, {r5}
 c00294c:	c920      	ldmia	r1!, {r5}
 c00294e:	ca10      	ldmia	r2!, {r4}
 c002950:	4165      	adcs	r5, r4
 c002952:	c020      	stmia	r0!, {r5}
 c002954:	c920      	ldmia	r1!, {r5}
 c002956:	ca10      	ldmia	r2!, {r4}
 c002958:	4165      	adcs	r5, r4
 c00295a:	c020      	stmia	r0!, {r5}
 c00295c:	c920      	ldmia	r1!, {r5}
 c00295e:	ca10      	ldmia	r2!, {r4}
 c002960:	4165      	adcs	r5, r4
 c002962:	c020      	stmia	r0!, {r5}
 c002964:	4176      	adcs	r6, r6
 c002966:	60f8      	str	r0, [r7, #12]
 c002968:	60b9      	str	r1, [r7, #8]
 c00296a:	607a      	str	r2, [r7, #4]
 c00296c:	61fb      	str	r3, [r7, #28]
 c00296e:	61be      	str	r6, [r7, #24]
 c002970:	617d      	str	r5, [r7, #20]
 c002972:	613c      	str	r4, [r7, #16]
 c002974:	69bb      	ldr	r3, [r7, #24]
 c002976:	4618      	mov	r0, r3
 c002978:	3720      	adds	r7, #32
 c00297a:	46bd      	mov	sp, r7
 c00297c:	bcf0      	pop	{r4, r5, r6, r7}
 c00297e:	4770      	bx	lr

0c002980 <uECC_vli_sub>:
 c002980:	b4f0      	push	{r4, r5, r6, r7}
 c002982:	b088      	sub	sp, #32
 c002984:	af00      	add	r7, sp, #0
 c002986:	60f8      	str	r0, [r7, #12]
 c002988:	60b9      	str	r1, [r7, #8]
 c00298a:	607a      	str	r2, [r7, #4]
 c00298c:	70fb      	strb	r3, [r7, #3]
 c00298e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c002992:	f1c3 0308 	rsb	r3, r3, #8
 c002996:	00db      	lsls	r3, r3, #3
 c002998:	3301      	adds	r3, #1
 c00299a:	61fb      	str	r3, [r7, #28]
 c00299c:	68f8      	ldr	r0, [r7, #12]
 c00299e:	68b9      	ldr	r1, [r7, #8]
 c0029a0:	687a      	ldr	r2, [r7, #4]
 c0029a2:	69fb      	ldr	r3, [r7, #28]
 c0029a4:	2600      	movs	r6, #0
 c0029a6:	a505      	add	r5, pc, #20	; (adr r5, c0029bc <uECC_vli_sub+0x3c>)
 c0029a8:	f3af 8000 	nop.w
 c0029ac:	f3af 8000 	nop.w
 c0029b0:	195b      	adds	r3, r3, r5
 c0029b2:	c920      	ldmia	r1!, {r5}
 c0029b4:	ca10      	ldmia	r2!, {r4}
 c0029b6:	1b2d      	subs	r5, r5, r4
 c0029b8:	c020      	stmia	r0!, {r5}
 c0029ba:	4718      	bx	r3
 c0029bc:	c920      	ldmia	r1!, {r5}
 c0029be:	ca10      	ldmia	r2!, {r4}
 c0029c0:	41a5      	sbcs	r5, r4
 c0029c2:	c020      	stmia	r0!, {r5}
 c0029c4:	c920      	ldmia	r1!, {r5}
 c0029c6:	ca10      	ldmia	r2!, {r4}
 c0029c8:	41a5      	sbcs	r5, r4
 c0029ca:	c020      	stmia	r0!, {r5}
 c0029cc:	c920      	ldmia	r1!, {r5}
 c0029ce:	ca10      	ldmia	r2!, {r4}
 c0029d0:	41a5      	sbcs	r5, r4
 c0029d2:	c020      	stmia	r0!, {r5}
 c0029d4:	c920      	ldmia	r1!, {r5}
 c0029d6:	ca10      	ldmia	r2!, {r4}
 c0029d8:	41a5      	sbcs	r5, r4
 c0029da:	c020      	stmia	r0!, {r5}
 c0029dc:	c920      	ldmia	r1!, {r5}
 c0029de:	ca10      	ldmia	r2!, {r4}
 c0029e0:	41a5      	sbcs	r5, r4
 c0029e2:	c020      	stmia	r0!, {r5}
 c0029e4:	c920      	ldmia	r1!, {r5}
 c0029e6:	ca10      	ldmia	r2!, {r4}
 c0029e8:	41a5      	sbcs	r5, r4
 c0029ea:	c020      	stmia	r0!, {r5}
 c0029ec:	c920      	ldmia	r1!, {r5}
 c0029ee:	ca10      	ldmia	r2!, {r4}
 c0029f0:	41a5      	sbcs	r5, r4
 c0029f2:	c020      	stmia	r0!, {r5}
 c0029f4:	4176      	adcs	r6, r6
 c0029f6:	60f8      	str	r0, [r7, #12]
 c0029f8:	60b9      	str	r1, [r7, #8]
 c0029fa:	607a      	str	r2, [r7, #4]
 c0029fc:	61fb      	str	r3, [r7, #28]
 c0029fe:	61be      	str	r6, [r7, #24]
 c002a00:	617d      	str	r5, [r7, #20]
 c002a02:	613c      	str	r4, [r7, #16]
 c002a04:	69bb      	ldr	r3, [r7, #24]
 c002a06:	2b00      	cmp	r3, #0
 c002a08:	bf0c      	ite	eq
 c002a0a:	2301      	moveq	r3, #1
 c002a0c:	2300      	movne	r3, #0
 c002a0e:	b2db      	uxtb	r3, r3
 c002a10:	4618      	mov	r0, r3
 c002a12:	3720      	adds	r7, #32
 c002a14:	46bd      	mov	sp, r7
 c002a16:	bcf0      	pop	{r4, r5, r6, r7}
 c002a18:	4770      	bx	lr
 c002a1a:	bf00      	nop

0c002a1c <uECC_vli_mult>:
 c002a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c002a20:	b08d      	sub	sp, #52	; 0x34
 c002a22:	af00      	add	r7, sp, #0
 c002a24:	60f8      	str	r0, [r7, #12]
 c002a26:	60b9      	str	r1, [r7, #8]
 c002a28:	607a      	str	r2, [r7, #4]
 c002a2a:	70fb      	strb	r3, [r7, #3]
 c002a2c:	2300      	movs	r3, #0
 c002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 c002a30:	2300      	movs	r3, #0
 c002a32:	62bb      	str	r3, [r7, #40]	; 0x28
 c002a34:	2300      	movs	r3, #0
 c002a36:	627b      	str	r3, [r7, #36]	; 0x24
 c002a38:	2300      	movs	r3, #0
 c002a3a:	623b      	str	r3, [r7, #32]
 c002a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c002a40:	3b01      	subs	r3, #1
 c002a42:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 c002a46:	68fc      	ldr	r4, [r7, #12]
 c002a48:	68bd      	ldr	r5, [r7, #8]
 c002a4a:	687e      	ldr	r6, [r7, #4]
 c002a4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 c002a4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 c002a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c002a52:	6a3b      	ldr	r3, [r7, #32]
 c002a54:	f05f 0e00 	movs.w	lr, #0
 c002a58:	e003      	b.n	c002a62 <uECC_vli_mult+0x46>
 c002a5a:	ea5f 0e03 	movs.w	lr, r3
 c002a5e:	ebbe 0e0c 	subs.w	lr, lr, ip
 c002a62:	ebb3 080e 	subs.w	r8, r3, lr
 c002a66:	f856 9008 	ldr.w	r9, [r6, r8]
 c002a6a:	f855 800e 	ldr.w	r8, [r5, lr]
 c002a6e:	fba8 8909 	umull	r8, r9, r8, r9
 c002a72:	eb10 0008 	adds.w	r0, r0, r8
 c002a76:	eb51 0109 	adcs.w	r1, r1, r9
 c002a7a:	f152 0200 	adcs.w	r2, r2, #0
 c002a7e:	f11e 0e04 	adds.w	lr, lr, #4
 c002a82:	45e6      	cmp	lr, ip
 c002a84:	dc01      	bgt.n	c002a8a <uECC_vli_mult+0x6e>
 c002a86:	459e      	cmp	lr, r3
 c002a88:	ddeb      	ble.n	c002a62 <uECC_vli_mult+0x46>
 c002a8a:	50e0      	str	r0, [r4, r3]
 c002a8c:	4608      	mov	r0, r1
 c002a8e:	4611      	mov	r1, r2
 c002a90:	2200      	movs	r2, #0
 c002a92:	3304      	adds	r3, #4
 c002a94:	4563      	cmp	r3, ip
 c002a96:	dddd      	ble.n	c002a54 <uECC_vli_mult+0x38>
 c002a98:	ebb3 0f4c 	cmp.w	r3, ip, lsl #1
 c002a9c:	dddd      	ble.n	c002a5a <uECC_vli_mult+0x3e>
 c002a9e:	50e0      	str	r0, [r4, r3]
 c002aa0:	464c      	mov	r4, r9
 c002aa2:	4645      	mov	r5, r8
 c002aa4:	4676      	mov	r6, lr
 c002aa6:	62f8      	str	r0, [r7, #44]	; 0x2c
 c002aa8:	62b9      	str	r1, [r7, #40]	; 0x28
 c002aaa:	627a      	str	r2, [r7, #36]	; 0x24
 c002aac:	623b      	str	r3, [r7, #32]
 c002aae:	61fe      	str	r6, [r7, #28]
 c002ab0:	61bd      	str	r5, [r7, #24]
 c002ab2:	617c      	str	r4, [r7, #20]
 c002ab4:	bf00      	nop
 c002ab6:	3734      	adds	r7, #52	; 0x34
 c002ab8:	46bd      	mov	sp, r7
 c002aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0c002abe <uECC_vli_clear>:
 c002abe:	b480      	push	{r7}
 c002ac0:	b085      	sub	sp, #20
 c002ac2:	af00      	add	r7, sp, #0
 c002ac4:	6078      	str	r0, [r7, #4]
 c002ac6:	460b      	mov	r3, r1
 c002ac8:	70fb      	strb	r3, [r7, #3]
 c002aca:	2300      	movs	r3, #0
 c002acc:	73fb      	strb	r3, [r7, #15]
 c002ace:	e00a      	b.n	c002ae6 <uECC_vli_clear+0x28>
 c002ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c002ad4:	009b      	lsls	r3, r3, #2
 c002ad6:	687a      	ldr	r2, [r7, #4]
 c002ad8:	4413      	add	r3, r2
 c002ada:	2200      	movs	r2, #0
 c002adc:	601a      	str	r2, [r3, #0]
 c002ade:	7bfb      	ldrb	r3, [r7, #15]
 c002ae0:	3301      	adds	r3, #1
 c002ae2:	b2db      	uxtb	r3, r3
 c002ae4:	73fb      	strb	r3, [r7, #15]
 c002ae6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 c002aea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c002aee:	429a      	cmp	r2, r3
 c002af0:	dbee      	blt.n	c002ad0 <uECC_vli_clear+0x12>
 c002af2:	bf00      	nop
 c002af4:	bf00      	nop
 c002af6:	3714      	adds	r7, #20
 c002af8:	46bd      	mov	sp, r7
 c002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002afe:	4770      	bx	lr

0c002b00 <uECC_vli_isZero>:
 c002b00:	b480      	push	{r7}
 c002b02:	b085      	sub	sp, #20
 c002b04:	af00      	add	r7, sp, #0
 c002b06:	6078      	str	r0, [r7, #4]
 c002b08:	460b      	mov	r3, r1
 c002b0a:	70fb      	strb	r3, [r7, #3]
 c002b0c:	2300      	movs	r3, #0
 c002b0e:	60fb      	str	r3, [r7, #12]
 c002b10:	2300      	movs	r3, #0
 c002b12:	72fb      	strb	r3, [r7, #11]
 c002b14:	e00c      	b.n	c002b30 <uECC_vli_isZero+0x30>
 c002b16:	f997 300b 	ldrsb.w	r3, [r7, #11]
 c002b1a:	009b      	lsls	r3, r3, #2
 c002b1c:	687a      	ldr	r2, [r7, #4]
 c002b1e:	4413      	add	r3, r2
 c002b20:	681b      	ldr	r3, [r3, #0]
 c002b22:	68fa      	ldr	r2, [r7, #12]
 c002b24:	4313      	orrs	r3, r2
 c002b26:	60fb      	str	r3, [r7, #12]
 c002b28:	7afb      	ldrb	r3, [r7, #11]
 c002b2a:	3301      	adds	r3, #1
 c002b2c:	b2db      	uxtb	r3, r3
 c002b2e:	72fb      	strb	r3, [r7, #11]
 c002b30:	f997 200b 	ldrsb.w	r2, [r7, #11]
 c002b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c002b38:	429a      	cmp	r2, r3
 c002b3a:	dbec      	blt.n	c002b16 <uECC_vli_isZero+0x16>
 c002b3c:	68fb      	ldr	r3, [r7, #12]
 c002b3e:	2b00      	cmp	r3, #0
 c002b40:	bf0c      	ite	eq
 c002b42:	2301      	moveq	r3, #1
 c002b44:	2300      	movne	r3, #0
 c002b46:	b2db      	uxtb	r3, r3
 c002b48:	4618      	mov	r0, r3
 c002b4a:	3714      	adds	r7, #20
 c002b4c:	46bd      	mov	sp, r7
 c002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002b52:	4770      	bx	lr

0c002b54 <uECC_vli_testBit>:
 c002b54:	b480      	push	{r7}
 c002b56:	b083      	sub	sp, #12
 c002b58:	af00      	add	r7, sp, #0
 c002b5a:	6078      	str	r0, [r7, #4]
 c002b5c:	460b      	mov	r3, r1
 c002b5e:	807b      	strh	r3, [r7, #2]
 c002b60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 c002b64:	115b      	asrs	r3, r3, #5
 c002b66:	b21b      	sxth	r3, r3
 c002b68:	009b      	lsls	r3, r3, #2
 c002b6a:	687a      	ldr	r2, [r7, #4]
 c002b6c:	4413      	add	r3, r2
 c002b6e:	681a      	ldr	r2, [r3, #0]
 c002b70:	887b      	ldrh	r3, [r7, #2]
 c002b72:	f003 031f 	and.w	r3, r3, #31
 c002b76:	2101      	movs	r1, #1
 c002b78:	fa01 f303 	lsl.w	r3, r1, r3
 c002b7c:	4013      	ands	r3, r2
 c002b7e:	4618      	mov	r0, r3
 c002b80:	370c      	adds	r7, #12
 c002b82:	46bd      	mov	sp, r7
 c002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002b88:	4770      	bx	lr

0c002b8a <vli_numDigits>:
 c002b8a:	b480      	push	{r7}
 c002b8c:	b085      	sub	sp, #20
 c002b8e:	af00      	add	r7, sp, #0
 c002b90:	6078      	str	r0, [r7, #4]
 c002b92:	460b      	mov	r3, r1
 c002b94:	70fb      	strb	r3, [r7, #3]
 c002b96:	78fb      	ldrb	r3, [r7, #3]
 c002b98:	3b01      	subs	r3, #1
 c002b9a:	b2db      	uxtb	r3, r3
 c002b9c:	73fb      	strb	r3, [r7, #15]
 c002b9e:	e003      	b.n	c002ba8 <vli_numDigits+0x1e>
 c002ba0:	7bfb      	ldrb	r3, [r7, #15]
 c002ba2:	3b01      	subs	r3, #1
 c002ba4:	b2db      	uxtb	r3, r3
 c002ba6:	73fb      	strb	r3, [r7, #15]
 c002ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c002bac:	2b00      	cmp	r3, #0
 c002bae:	db07      	blt.n	c002bc0 <vli_numDigits+0x36>
 c002bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c002bb4:	009b      	lsls	r3, r3, #2
 c002bb6:	687a      	ldr	r2, [r7, #4]
 c002bb8:	4413      	add	r3, r2
 c002bba:	681b      	ldr	r3, [r3, #0]
 c002bbc:	2b00      	cmp	r3, #0
 c002bbe:	d0ef      	beq.n	c002ba0 <vli_numDigits+0x16>
 c002bc0:	7bfb      	ldrb	r3, [r7, #15]
 c002bc2:	3301      	adds	r3, #1
 c002bc4:	b2db      	uxtb	r3, r3
 c002bc6:	b25b      	sxtb	r3, r3
 c002bc8:	4618      	mov	r0, r3
 c002bca:	3714      	adds	r7, #20
 c002bcc:	46bd      	mov	sp, r7
 c002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002bd2:	4770      	bx	lr

0c002bd4 <uECC_vli_numBits>:
 c002bd4:	b580      	push	{r7, lr}
 c002bd6:	b086      	sub	sp, #24
 c002bd8:	af00      	add	r7, sp, #0
 c002bda:	6078      	str	r0, [r7, #4]
 c002bdc:	460b      	mov	r3, r1
 c002bde:	70fb      	strb	r3, [r7, #3]
 c002be0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c002be4:	4619      	mov	r1, r3
 c002be6:	6878      	ldr	r0, [r7, #4]
 c002be8:	f7ff ffcf 	bl	c002b8a <vli_numDigits>
 c002bec:	4603      	mov	r3, r0
 c002bee:	73fb      	strb	r3, [r7, #15]
 c002bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c002bf4:	2b00      	cmp	r3, #0
 c002bf6:	d101      	bne.n	c002bfc <uECC_vli_numBits+0x28>
 c002bf8:	2300      	movs	r3, #0
 c002bfa:	e021      	b.n	c002c40 <uECC_vli_numBits+0x6c>
 c002bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c002c00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c002c04:	3b01      	subs	r3, #1
 c002c06:	009b      	lsls	r3, r3, #2
 c002c08:	687a      	ldr	r2, [r7, #4]
 c002c0a:	4413      	add	r3, r2
 c002c0c:	681b      	ldr	r3, [r3, #0]
 c002c0e:	613b      	str	r3, [r7, #16]
 c002c10:	2300      	movs	r3, #0
 c002c12:	617b      	str	r3, [r7, #20]
 c002c14:	e005      	b.n	c002c22 <uECC_vli_numBits+0x4e>
 c002c16:	693b      	ldr	r3, [r7, #16]
 c002c18:	085b      	lsrs	r3, r3, #1
 c002c1a:	613b      	str	r3, [r7, #16]
 c002c1c:	697b      	ldr	r3, [r7, #20]
 c002c1e:	3301      	adds	r3, #1
 c002c20:	617b      	str	r3, [r7, #20]
 c002c22:	693b      	ldr	r3, [r7, #16]
 c002c24:	2b00      	cmp	r3, #0
 c002c26:	d1f6      	bne.n	c002c16 <uECC_vli_numBits+0x42>
 c002c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c002c2c:	b29b      	uxth	r3, r3
 c002c2e:	3b01      	subs	r3, #1
 c002c30:	b29b      	uxth	r3, r3
 c002c32:	015b      	lsls	r3, r3, #5
 c002c34:	b29a      	uxth	r2, r3
 c002c36:	697b      	ldr	r3, [r7, #20]
 c002c38:	b29b      	uxth	r3, r3
 c002c3a:	4413      	add	r3, r2
 c002c3c:	b29b      	uxth	r3, r3
 c002c3e:	b21b      	sxth	r3, r3
 c002c40:	4618      	mov	r0, r3
 c002c42:	3718      	adds	r7, #24
 c002c44:	46bd      	mov	sp, r7
 c002c46:	bd80      	pop	{r7, pc}

0c002c48 <uECC_vli_set>:
 c002c48:	b480      	push	{r7}
 c002c4a:	b087      	sub	sp, #28
 c002c4c:	af00      	add	r7, sp, #0
 c002c4e:	60f8      	str	r0, [r7, #12]
 c002c50:	60b9      	str	r1, [r7, #8]
 c002c52:	4613      	mov	r3, r2
 c002c54:	71fb      	strb	r3, [r7, #7]
 c002c56:	2300      	movs	r3, #0
 c002c58:	75fb      	strb	r3, [r7, #23]
 c002c5a:	e00f      	b.n	c002c7c <uECC_vli_set+0x34>
 c002c5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c002c60:	009b      	lsls	r3, r3, #2
 c002c62:	68ba      	ldr	r2, [r7, #8]
 c002c64:	441a      	add	r2, r3
 c002c66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c002c6a:	009b      	lsls	r3, r3, #2
 c002c6c:	68f9      	ldr	r1, [r7, #12]
 c002c6e:	440b      	add	r3, r1
 c002c70:	6812      	ldr	r2, [r2, #0]
 c002c72:	601a      	str	r2, [r3, #0]
 c002c74:	7dfb      	ldrb	r3, [r7, #23]
 c002c76:	3301      	adds	r3, #1
 c002c78:	b2db      	uxtb	r3, r3
 c002c7a:	75fb      	strb	r3, [r7, #23]
 c002c7c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 c002c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c002c84:	429a      	cmp	r2, r3
 c002c86:	dbe9      	blt.n	c002c5c <uECC_vli_set+0x14>
 c002c88:	bf00      	nop
 c002c8a:	bf00      	nop
 c002c8c:	371c      	adds	r7, #28
 c002c8e:	46bd      	mov	sp, r7
 c002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002c94:	4770      	bx	lr

0c002c96 <uECC_vli_cmp_unsafe>:
 c002c96:	b480      	push	{r7}
 c002c98:	b087      	sub	sp, #28
 c002c9a:	af00      	add	r7, sp, #0
 c002c9c:	60f8      	str	r0, [r7, #12]
 c002c9e:	60b9      	str	r1, [r7, #8]
 c002ca0:	4613      	mov	r3, r2
 c002ca2:	71fb      	strb	r3, [r7, #7]
 c002ca4:	79fb      	ldrb	r3, [r7, #7]
 c002ca6:	3b01      	subs	r3, #1
 c002ca8:	b2db      	uxtb	r3, r3
 c002caa:	75fb      	strb	r3, [r7, #23]
 c002cac:	e024      	b.n	c002cf8 <uECC_vli_cmp_unsafe+0x62>
 c002cae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c002cb2:	009b      	lsls	r3, r3, #2
 c002cb4:	68fa      	ldr	r2, [r7, #12]
 c002cb6:	4413      	add	r3, r2
 c002cb8:	681a      	ldr	r2, [r3, #0]
 c002cba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c002cbe:	009b      	lsls	r3, r3, #2
 c002cc0:	68b9      	ldr	r1, [r7, #8]
 c002cc2:	440b      	add	r3, r1
 c002cc4:	681b      	ldr	r3, [r3, #0]
 c002cc6:	429a      	cmp	r2, r3
 c002cc8:	d901      	bls.n	c002cce <uECC_vli_cmp_unsafe+0x38>
 c002cca:	2301      	movs	r3, #1
 c002ccc:	e019      	b.n	c002d02 <uECC_vli_cmp_unsafe+0x6c>
 c002cce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c002cd2:	009b      	lsls	r3, r3, #2
 c002cd4:	68fa      	ldr	r2, [r7, #12]
 c002cd6:	4413      	add	r3, r2
 c002cd8:	681a      	ldr	r2, [r3, #0]
 c002cda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c002cde:	009b      	lsls	r3, r3, #2
 c002ce0:	68b9      	ldr	r1, [r7, #8]
 c002ce2:	440b      	add	r3, r1
 c002ce4:	681b      	ldr	r3, [r3, #0]
 c002ce6:	429a      	cmp	r2, r3
 c002ce8:	d202      	bcs.n	c002cf0 <uECC_vli_cmp_unsafe+0x5a>
 c002cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002cee:	e008      	b.n	c002d02 <uECC_vli_cmp_unsafe+0x6c>
 c002cf0:	7dfb      	ldrb	r3, [r7, #23]
 c002cf2:	3b01      	subs	r3, #1
 c002cf4:	b2db      	uxtb	r3, r3
 c002cf6:	75fb      	strb	r3, [r7, #23]
 c002cf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c002cfc:	2b00      	cmp	r3, #0
 c002cfe:	dad6      	bge.n	c002cae <uECC_vli_cmp_unsafe+0x18>
 c002d00:	2300      	movs	r3, #0
 c002d02:	4618      	mov	r0, r3
 c002d04:	371c      	adds	r7, #28
 c002d06:	46bd      	mov	sp, r7
 c002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002d0c:	4770      	bx	lr

0c002d0e <uECC_vli_equal>:
 c002d0e:	b480      	push	{r7}
 c002d10:	b087      	sub	sp, #28
 c002d12:	af00      	add	r7, sp, #0
 c002d14:	60f8      	str	r0, [r7, #12]
 c002d16:	60b9      	str	r1, [r7, #8]
 c002d18:	4613      	mov	r3, r2
 c002d1a:	71fb      	strb	r3, [r7, #7]
 c002d1c:	2300      	movs	r3, #0
 c002d1e:	617b      	str	r3, [r7, #20]
 c002d20:	79fb      	ldrb	r3, [r7, #7]
 c002d22:	3b01      	subs	r3, #1
 c002d24:	b2db      	uxtb	r3, r3
 c002d26:	74fb      	strb	r3, [r7, #19]
 c002d28:	e013      	b.n	c002d52 <uECC_vli_equal+0x44>
 c002d2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 c002d2e:	009b      	lsls	r3, r3, #2
 c002d30:	68fa      	ldr	r2, [r7, #12]
 c002d32:	4413      	add	r3, r2
 c002d34:	681a      	ldr	r2, [r3, #0]
 c002d36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 c002d3a:	009b      	lsls	r3, r3, #2
 c002d3c:	68b9      	ldr	r1, [r7, #8]
 c002d3e:	440b      	add	r3, r1
 c002d40:	681b      	ldr	r3, [r3, #0]
 c002d42:	4053      	eors	r3, r2
 c002d44:	697a      	ldr	r2, [r7, #20]
 c002d46:	4313      	orrs	r3, r2
 c002d48:	617b      	str	r3, [r7, #20]
 c002d4a:	7cfb      	ldrb	r3, [r7, #19]
 c002d4c:	3b01      	subs	r3, #1
 c002d4e:	b2db      	uxtb	r3, r3
 c002d50:	74fb      	strb	r3, [r7, #19]
 c002d52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 c002d56:	2b00      	cmp	r3, #0
 c002d58:	dae7      	bge.n	c002d2a <uECC_vli_equal+0x1c>
 c002d5a:	697b      	ldr	r3, [r7, #20]
 c002d5c:	2b00      	cmp	r3, #0
 c002d5e:	bf0c      	ite	eq
 c002d60:	2301      	moveq	r3, #1
 c002d62:	2300      	movne	r3, #0
 c002d64:	b2db      	uxtb	r3, r3
 c002d66:	4618      	mov	r0, r3
 c002d68:	371c      	adds	r7, #28
 c002d6a:	46bd      	mov	sp, r7
 c002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002d70:	4770      	bx	lr

0c002d72 <uECC_vli_cmp>:
 c002d72:	b580      	push	{r7, lr}
 c002d74:	b08e      	sub	sp, #56	; 0x38
 c002d76:	af00      	add	r7, sp, #0
 c002d78:	60f8      	str	r0, [r7, #12]
 c002d7a:	60b9      	str	r1, [r7, #8]
 c002d7c:	4613      	mov	r3, r2
 c002d7e:	71fb      	strb	r3, [r7, #7]
 c002d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c002d84:	f107 0010 	add.w	r0, r7, #16
 c002d88:	68ba      	ldr	r2, [r7, #8]
 c002d8a:	68f9      	ldr	r1, [r7, #12]
 c002d8c:	f7ff fdf8 	bl	c002980 <uECC_vli_sub>
 c002d90:	4603      	mov	r3, r0
 c002d92:	2b00      	cmp	r3, #0
 c002d94:	bf14      	ite	ne
 c002d96:	2301      	movne	r3, #1
 c002d98:	2300      	moveq	r3, #0
 c002d9a:	b2db      	uxtb	r3, r3
 c002d9c:	637b      	str	r3, [r7, #52]	; 0x34
 c002d9e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 c002da2:	f107 0310 	add.w	r3, r7, #16
 c002da6:	4611      	mov	r1, r2
 c002da8:	4618      	mov	r0, r3
 c002daa:	f7ff fea9 	bl	c002b00 <uECC_vli_isZero>
 c002dae:	6338      	str	r0, [r7, #48]	; 0x30
 c002db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c002db2:	2b00      	cmp	r3, #0
 c002db4:	bf0c      	ite	eq
 c002db6:	2301      	moveq	r3, #1
 c002db8:	2300      	movne	r3, #0
 c002dba:	b2db      	uxtb	r3, r3
 c002dbc:	461a      	mov	r2, r3
 c002dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c002dc0:	b2db      	uxtb	r3, r3
 c002dc2:	005b      	lsls	r3, r3, #1
 c002dc4:	b2db      	uxtb	r3, r3
 c002dc6:	1ad3      	subs	r3, r2, r3
 c002dc8:	b2db      	uxtb	r3, r3
 c002dca:	b25b      	sxtb	r3, r3
 c002dcc:	4618      	mov	r0, r3
 c002dce:	3738      	adds	r7, #56	; 0x38
 c002dd0:	46bd      	mov	sp, r7
 c002dd2:	bd80      	pop	{r7, pc}

0c002dd4 <uECC_vli_rshift1>:
 c002dd4:	b480      	push	{r7}
 c002dd6:	b087      	sub	sp, #28
 c002dd8:	af00      	add	r7, sp, #0
 c002dda:	6078      	str	r0, [r7, #4]
 c002ddc:	460b      	mov	r3, r1
 c002dde:	70fb      	strb	r3, [r7, #3]
 c002de0:	687b      	ldr	r3, [r7, #4]
 c002de2:	613b      	str	r3, [r7, #16]
 c002de4:	2300      	movs	r3, #0
 c002de6:	617b      	str	r3, [r7, #20]
 c002de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c002dec:	009b      	lsls	r3, r3, #2
 c002dee:	687a      	ldr	r2, [r7, #4]
 c002df0:	4413      	add	r3, r2
 c002df2:	607b      	str	r3, [r7, #4]
 c002df4:	e00b      	b.n	c002e0e <uECC_vli_rshift1+0x3a>
 c002df6:	687b      	ldr	r3, [r7, #4]
 c002df8:	681b      	ldr	r3, [r3, #0]
 c002dfa:	60fb      	str	r3, [r7, #12]
 c002dfc:	68fb      	ldr	r3, [r7, #12]
 c002dfe:	085a      	lsrs	r2, r3, #1
 c002e00:	697b      	ldr	r3, [r7, #20]
 c002e02:	431a      	orrs	r2, r3
 c002e04:	687b      	ldr	r3, [r7, #4]
 c002e06:	601a      	str	r2, [r3, #0]
 c002e08:	68fb      	ldr	r3, [r7, #12]
 c002e0a:	07db      	lsls	r3, r3, #31
 c002e0c:	617b      	str	r3, [r7, #20]
 c002e0e:	687b      	ldr	r3, [r7, #4]
 c002e10:	1f1a      	subs	r2, r3, #4
 c002e12:	607a      	str	r2, [r7, #4]
 c002e14:	693a      	ldr	r2, [r7, #16]
 c002e16:	429a      	cmp	r2, r3
 c002e18:	d3ed      	bcc.n	c002df6 <uECC_vli_rshift1+0x22>
 c002e1a:	bf00      	nop
 c002e1c:	bf00      	nop
 c002e1e:	371c      	adds	r7, #28
 c002e20:	46bd      	mov	sp, r7
 c002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002e26:	4770      	bx	lr

0c002e28 <uECC_vli_modAdd>:
 c002e28:	b580      	push	{r7, lr}
 c002e2a:	b086      	sub	sp, #24
 c002e2c:	af00      	add	r7, sp, #0
 c002e2e:	60f8      	str	r0, [r7, #12]
 c002e30:	60b9      	str	r1, [r7, #8]
 c002e32:	607a      	str	r2, [r7, #4]
 c002e34:	603b      	str	r3, [r7, #0]
 c002e36:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c002e3a:	687a      	ldr	r2, [r7, #4]
 c002e3c:	68b9      	ldr	r1, [r7, #8]
 c002e3e:	68f8      	ldr	r0, [r7, #12]
 c002e40:	f7ff fd56 	bl	c0028f0 <uECC_vli_add>
 c002e44:	6178      	str	r0, [r7, #20]
 c002e46:	697b      	ldr	r3, [r7, #20]
 c002e48:	2b00      	cmp	r3, #0
 c002e4a:	d109      	bne.n	c002e60 <uECC_vli_modAdd+0x38>
 c002e4c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c002e50:	461a      	mov	r2, r3
 c002e52:	68f9      	ldr	r1, [r7, #12]
 c002e54:	6838      	ldr	r0, [r7, #0]
 c002e56:	f7ff ff1e 	bl	c002c96 <uECC_vli_cmp_unsafe>
 c002e5a:	4603      	mov	r3, r0
 c002e5c:	2b01      	cmp	r3, #1
 c002e5e:	d006      	beq.n	c002e6e <uECC_vli_modAdd+0x46>
 c002e60:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c002e64:	683a      	ldr	r2, [r7, #0]
 c002e66:	68f9      	ldr	r1, [r7, #12]
 c002e68:	68f8      	ldr	r0, [r7, #12]
 c002e6a:	f7ff fd89 	bl	c002980 <uECC_vli_sub>
 c002e6e:	bf00      	nop
 c002e70:	3718      	adds	r7, #24
 c002e72:	46bd      	mov	sp, r7
 c002e74:	bd80      	pop	{r7, pc}

0c002e76 <uECC_vli_modSub>:
 c002e76:	b580      	push	{r7, lr}
 c002e78:	b086      	sub	sp, #24
 c002e7a:	af00      	add	r7, sp, #0
 c002e7c:	60f8      	str	r0, [r7, #12]
 c002e7e:	60b9      	str	r1, [r7, #8]
 c002e80:	607a      	str	r2, [r7, #4]
 c002e82:	603b      	str	r3, [r7, #0]
 c002e84:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c002e88:	687a      	ldr	r2, [r7, #4]
 c002e8a:	68b9      	ldr	r1, [r7, #8]
 c002e8c:	68f8      	ldr	r0, [r7, #12]
 c002e8e:	f7ff fd77 	bl	c002980 <uECC_vli_sub>
 c002e92:	6178      	str	r0, [r7, #20]
 c002e94:	697b      	ldr	r3, [r7, #20]
 c002e96:	2b00      	cmp	r3, #0
 c002e98:	d006      	beq.n	c002ea8 <uECC_vli_modSub+0x32>
 c002e9a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c002e9e:	683a      	ldr	r2, [r7, #0]
 c002ea0:	68f9      	ldr	r1, [r7, #12]
 c002ea2:	68f8      	ldr	r0, [r7, #12]
 c002ea4:	f7ff fd24 	bl	c0028f0 <uECC_vli_add>
 c002ea8:	bf00      	nop
 c002eaa:	3718      	adds	r7, #24
 c002eac:	46bd      	mov	sp, r7
 c002eae:	bd80      	pop	{r7, pc}

0c002eb0 <uECC_vli_mmod>:
 c002eb0:	b590      	push	{r4, r7, lr}
 c002eb2:	b0ad      	sub	sp, #180	; 0xb4
 c002eb4:	af00      	add	r7, sp, #0
 c002eb6:	60f8      	str	r0, [r7, #12]
 c002eb8:	60b9      	str	r1, [r7, #8]
 c002eba:	607a      	str	r2, [r7, #4]
 c002ebc:	70fb      	strb	r3, [r7, #3]
 c002ebe:	f107 0318 	add.w	r3, r7, #24
 c002ec2:	613b      	str	r3, [r7, #16]
 c002ec4:	68bb      	ldr	r3, [r7, #8]
 c002ec6:	617b      	str	r3, [r7, #20]
 c002ec8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c002ecc:	b29b      	uxth	r3, r3
 c002ece:	019b      	lsls	r3, r3, #6
 c002ed0:	b29c      	uxth	r4, r3
 c002ed2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c002ed6:	4619      	mov	r1, r3
 c002ed8:	6878      	ldr	r0, [r7, #4]
 c002eda:	f7ff fe7b 	bl	c002bd4 <uECC_vli_numBits>
 c002ede:	4603      	mov	r3, r0
 c002ee0:	b29b      	uxth	r3, r3
 c002ee2:	1ae3      	subs	r3, r4, r3
 c002ee4:	b29b      	uxth	r3, r3
 c002ee6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 c002eea:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 c002eee:	2b00      	cmp	r3, #0
 c002ef0:	da00      	bge.n	c002ef4 <uECC_vli_mmod+0x44>
 c002ef2:	331f      	adds	r3, #31
 c002ef4:	115b      	asrs	r3, r3, #5
 c002ef6:	b21b      	sxth	r3, r3
 c002ef8:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 c002efc:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 c002f00:	425a      	negs	r2, r3
 c002f02:	f003 031f 	and.w	r3, r3, #31
 c002f06:	f002 021f 	and.w	r2, r2, #31
 c002f0a:	bf58      	it	pl
 c002f0c:	4253      	negpl	r3, r2
 c002f0e:	b21b      	sxth	r3, r3
 c002f10:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 c002f14:	2300      	movs	r3, #0
 c002f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 c002f1a:	f997 209e 	ldrsb.w	r2, [r7, #158]	; 0x9e
 c002f1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 c002f22:	4611      	mov	r1, r2
 c002f24:	4618      	mov	r0, r3
 c002f26:	f7ff fdca 	bl	c002abe <uECC_vli_clear>
 c002f2a:	f997 309d 	ldrsb.w	r3, [r7, #157]	; 0x9d
 c002f2e:	2b00      	cmp	r3, #0
 c002f30:	dd34      	ble.n	c002f9c <uECC_vli_mmod+0xec>
 c002f32:	2300      	movs	r3, #0
 c002f34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 c002f38:	e029      	b.n	c002f8e <uECC_vli_mmod+0xde>
 c002f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c002f3e:	009b      	lsls	r3, r3, #2
 c002f40:	687a      	ldr	r2, [r7, #4]
 c002f42:	4413      	add	r3, r2
 c002f44:	681a      	ldr	r2, [r3, #0]
 c002f46:	f997 309d 	ldrsb.w	r3, [r7, #157]	; 0x9d
 c002f4a:	fa02 f103 	lsl.w	r1, r2, r3
 c002f4e:	f997 209e 	ldrsb.w	r2, [r7, #158]	; 0x9e
 c002f52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c002f56:	4413      	add	r3, r2
 c002f58:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 c002f5c:	430a      	orrs	r2, r1
 c002f5e:	009b      	lsls	r3, r3, #2
 c002f60:	33b0      	adds	r3, #176	; 0xb0
 c002f62:	443b      	add	r3, r7
 c002f64:	f843 2c58 	str.w	r2, [r3, #-88]
 c002f68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c002f6c:	009b      	lsls	r3, r3, #2
 c002f6e:	687a      	ldr	r2, [r7, #4]
 c002f70:	4413      	add	r3, r2
 c002f72:	681a      	ldr	r2, [r3, #0]
 c002f74:	f997 309d 	ldrsb.w	r3, [r7, #157]	; 0x9d
 c002f78:	f1c3 0320 	rsb	r3, r3, #32
 c002f7c:	fa22 f303 	lsr.w	r3, r2, r3
 c002f80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 c002f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c002f88:	3301      	adds	r3, #1
 c002f8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 c002f8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c002f92:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 c002f96:	429a      	cmp	r2, r3
 c002f98:	d3cf      	bcc.n	c002f3a <uECC_vli_mmod+0x8a>
 c002f9a:	e00b      	b.n	c002fb4 <uECC_vli_mmod+0x104>
 c002f9c:	f997 309e 	ldrsb.w	r3, [r7, #158]	; 0x9e
 c002fa0:	009b      	lsls	r3, r3, #2
 c002fa2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 c002fa6:	4413      	add	r3, r2
 c002fa8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c002fac:	6879      	ldr	r1, [r7, #4]
 c002fae:	4618      	mov	r0, r3
 c002fb0:	f7ff fe4a 	bl	c002c48 <uECC_vli_set>
 c002fb4:	2301      	movs	r3, #1
 c002fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 c002fba:	e09f      	b.n	c0030fc <uECC_vli_mmod+0x24c>
 c002fbc:	2300      	movs	r3, #0
 c002fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 c002fc2:	2300      	movs	r3, #0
 c002fc4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 c002fc8:	e053      	b.n	c003072 <uECC_vli_mmod+0x1c2>
 c002fca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c002fce:	009b      	lsls	r3, r3, #2
 c002fd0:	33b0      	adds	r3, #176	; 0xb0
 c002fd2:	443b      	add	r3, r7
 c002fd4:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 c002fd8:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 c002fdc:	009b      	lsls	r3, r3, #2
 c002fde:	4413      	add	r3, r2
 c002fe0:	681a      	ldr	r2, [r3, #0]
 c002fe2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 c002fe6:	009b      	lsls	r3, r3, #2
 c002fe8:	33b0      	adds	r3, #176	; 0xb0
 c002fea:	443b      	add	r3, r7
 c002fec:	f853 3c58 	ldr.w	r3, [r3, #-88]
 c002ff0:	1ad2      	subs	r2, r2, r3
 c002ff2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 c002ff6:	1ad3      	subs	r3, r2, r3
 c002ff8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 c002ffc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c003000:	009b      	lsls	r3, r3, #2
 c003002:	33b0      	adds	r3, #176	; 0xb0
 c003004:	443b      	add	r3, r7
 c003006:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 c00300a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 c00300e:	009b      	lsls	r3, r3, #2
 c003010:	4413      	add	r3, r2
 c003012:	681b      	ldr	r3, [r3, #0]
 c003014:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 c003018:	429a      	cmp	r2, r3
 c00301a:	d014      	beq.n	c003046 <uECC_vli_mmod+0x196>
 c00301c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c003020:	009b      	lsls	r3, r3, #2
 c003022:	33b0      	adds	r3, #176	; 0xb0
 c003024:	443b      	add	r3, r7
 c003026:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 c00302a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 c00302e:	009b      	lsls	r3, r3, #2
 c003030:	4413      	add	r3, r2
 c003032:	681b      	ldr	r3, [r3, #0]
 c003034:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 c003038:	429a      	cmp	r2, r3
 c00303a:	bf8c      	ite	hi
 c00303c:	2301      	movhi	r3, #1
 c00303e:	2300      	movls	r3, #0
 c003040:	b2db      	uxtb	r3, r3
 c003042:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 c003046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c00304a:	f1c3 0301 	rsb	r3, r3, #1
 c00304e:	009b      	lsls	r3, r3, #2
 c003050:	33b0      	adds	r3, #176	; 0xb0
 c003052:	443b      	add	r3, r7
 c003054:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 c003058:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 c00305c:	009b      	lsls	r3, r3, #2
 c00305e:	4413      	add	r3, r2
 c003060:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 c003064:	601a      	str	r2, [r3, #0]
 c003066:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 c00306a:	3301      	adds	r3, #1
 c00306c:	b2db      	uxtb	r3, r3
 c00306e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 c003072:	f997 209f 	ldrsb.w	r2, [r7, #159]	; 0x9f
 c003076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c00307a:	005b      	lsls	r3, r3, #1
 c00307c:	429a      	cmp	r2, r3
 c00307e:	dba4      	blt.n	c002fca <uECC_vli_mmod+0x11a>
 c003080:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 c003084:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 c003088:	429a      	cmp	r2, r3
 c00308a:	bf0c      	ite	eq
 c00308c:	2301      	moveq	r3, #1
 c00308e:	2300      	movne	r3, #0
 c003090:	b2db      	uxtb	r3, r3
 c003092:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 c003096:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c00309a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 c00309e:	4611      	mov	r1, r2
 c0030a0:	4618      	mov	r0, r3
 c0030a2:	f7ff fe97 	bl	c002dd4 <uECC_vli_rshift1>
 c0030a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0030aa:	3b01      	subs	r3, #1
 c0030ac:	009b      	lsls	r3, r3, #2
 c0030ae:	33b0      	adds	r3, #176	; 0xb0
 c0030b0:	443b      	add	r3, r7
 c0030b2:	f853 1c58 	ldr.w	r1, [r3, #-88]
 c0030b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0030ba:	009b      	lsls	r3, r3, #2
 c0030bc:	33b0      	adds	r3, #176	; 0xb0
 c0030be:	443b      	add	r3, r7
 c0030c0:	f853 3c58 	ldr.w	r3, [r3, #-88]
 c0030c4:	07da      	lsls	r2, r3, #31
 c0030c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0030ca:	3b01      	subs	r3, #1
 c0030cc:	430a      	orrs	r2, r1
 c0030ce:	009b      	lsls	r3, r3, #2
 c0030d0:	33b0      	adds	r3, #176	; 0xb0
 c0030d2:	443b      	add	r3, r7
 c0030d4:	f843 2c58 	str.w	r2, [r3, #-88]
 c0030d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0030dc:	009b      	lsls	r3, r3, #2
 c0030de:	f107 0258 	add.w	r2, r7, #88	; 0x58
 c0030e2:	4413      	add	r3, r2
 c0030e4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0030e8:	4611      	mov	r1, r2
 c0030ea:	4618      	mov	r0, r3
 c0030ec:	f7ff fe72 	bl	c002dd4 <uECC_vli_rshift1>
 c0030f0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 c0030f4:	3b01      	subs	r3, #1
 c0030f6:	b29b      	uxth	r3, r3
 c0030f8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 c0030fc:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 c003100:	2b00      	cmp	r3, #0
 c003102:	f6bf af5b 	bge.w	c002fbc <uECC_vli_mmod+0x10c>
 c003106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c00310a:	009b      	lsls	r3, r3, #2
 c00310c:	33b0      	adds	r3, #176	; 0xb0
 c00310e:	443b      	add	r3, r7
 c003110:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 c003114:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003118:	4619      	mov	r1, r3
 c00311a:	68f8      	ldr	r0, [r7, #12]
 c00311c:	f7ff fd94 	bl	c002c48 <uECC_vli_set>
 c003120:	bf00      	nop
 c003122:	37b4      	adds	r7, #180	; 0xb4
 c003124:	46bd      	mov	sp, r7
 c003126:	bd90      	pop	{r4, r7, pc}

0c003128 <uECC_vli_modMult>:
 c003128:	b580      	push	{r7, lr}
 c00312a:	b094      	sub	sp, #80	; 0x50
 c00312c:	af00      	add	r7, sp, #0
 c00312e:	60f8      	str	r0, [r7, #12]
 c003130:	60b9      	str	r1, [r7, #8]
 c003132:	607a      	str	r2, [r7, #4]
 c003134:	603b      	str	r3, [r7, #0]
 c003136:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 c00313a:	f107 0010 	add.w	r0, r7, #16
 c00313e:	687a      	ldr	r2, [r7, #4]
 c003140:	68b9      	ldr	r1, [r7, #8]
 c003142:	f7ff fc6b 	bl	c002a1c <uECC_vli_mult>
 c003146:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 c00314a:	f107 0110 	add.w	r1, r7, #16
 c00314e:	683a      	ldr	r2, [r7, #0]
 c003150:	68f8      	ldr	r0, [r7, #12]
 c003152:	f7ff fead 	bl	c002eb0 <uECC_vli_mmod>
 c003156:	bf00      	nop
 c003158:	3750      	adds	r7, #80	; 0x50
 c00315a:	46bd      	mov	sp, r7
 c00315c:	bd80      	pop	{r7, pc}

0c00315e <uECC_vli_modMult_fast>:
 c00315e:	b580      	push	{r7, lr}
 c003160:	b094      	sub	sp, #80	; 0x50
 c003162:	af00      	add	r7, sp, #0
 c003164:	60f8      	str	r0, [r7, #12]
 c003166:	60b9      	str	r1, [r7, #8]
 c003168:	607a      	str	r2, [r7, #4]
 c00316a:	603b      	str	r3, [r7, #0]
 c00316c:	683b      	ldr	r3, [r7, #0]
 c00316e:	f993 3000 	ldrsb.w	r3, [r3]
 c003172:	f107 0010 	add.w	r0, r7, #16
 c003176:	687a      	ldr	r2, [r7, #4]
 c003178:	68b9      	ldr	r1, [r7, #8]
 c00317a:	f7ff fc4f 	bl	c002a1c <uECC_vli_mult>
 c00317e:	683b      	ldr	r3, [r7, #0]
 c003180:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 c003184:	f107 0210 	add.w	r2, r7, #16
 c003188:	4611      	mov	r1, r2
 c00318a:	68f8      	ldr	r0, [r7, #12]
 c00318c:	4798      	blx	r3
 c00318e:	bf00      	nop
 c003190:	3750      	adds	r7, #80	; 0x50
 c003192:	46bd      	mov	sp, r7
 c003194:	bd80      	pop	{r7, pc}

0c003196 <uECC_vli_modSquare_fast>:
 c003196:	b580      	push	{r7, lr}
 c003198:	b084      	sub	sp, #16
 c00319a:	af00      	add	r7, sp, #0
 c00319c:	60f8      	str	r0, [r7, #12]
 c00319e:	60b9      	str	r1, [r7, #8]
 c0031a0:	607a      	str	r2, [r7, #4]
 c0031a2:	687b      	ldr	r3, [r7, #4]
 c0031a4:	68ba      	ldr	r2, [r7, #8]
 c0031a6:	68b9      	ldr	r1, [r7, #8]
 c0031a8:	68f8      	ldr	r0, [r7, #12]
 c0031aa:	f7ff ffd8 	bl	c00315e <uECC_vli_modMult_fast>
 c0031ae:	bf00      	nop
 c0031b0:	3710      	adds	r7, #16
 c0031b2:	46bd      	mov	sp, r7
 c0031b4:	bd80      	pop	{r7, pc}

0c0031b6 <vli_modInv_update>:
 c0031b6:	b580      	push	{r7, lr}
 c0031b8:	b086      	sub	sp, #24
 c0031ba:	af00      	add	r7, sp, #0
 c0031bc:	60f8      	str	r0, [r7, #12]
 c0031be:	60b9      	str	r1, [r7, #8]
 c0031c0:	4613      	mov	r3, r2
 c0031c2:	71fb      	strb	r3, [r7, #7]
 c0031c4:	2300      	movs	r3, #0
 c0031c6:	617b      	str	r3, [r7, #20]
 c0031c8:	68fb      	ldr	r3, [r7, #12]
 c0031ca:	681b      	ldr	r3, [r3, #0]
 c0031cc:	f003 0301 	and.w	r3, r3, #1
 c0031d0:	2b00      	cmp	r3, #0
 c0031d2:	d007      	beq.n	c0031e4 <vli_modInv_update+0x2e>
 c0031d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0031d8:	68ba      	ldr	r2, [r7, #8]
 c0031da:	68f9      	ldr	r1, [r7, #12]
 c0031dc:	68f8      	ldr	r0, [r7, #12]
 c0031de:	f7ff fb87 	bl	c0028f0 <uECC_vli_add>
 c0031e2:	6178      	str	r0, [r7, #20]
 c0031e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0031e8:	4619      	mov	r1, r3
 c0031ea:	68f8      	ldr	r0, [r7, #12]
 c0031ec:	f7ff fdf2 	bl	c002dd4 <uECC_vli_rshift1>
 c0031f0:	697b      	ldr	r3, [r7, #20]
 c0031f2:	2b00      	cmp	r3, #0
 c0031f4:	d013      	beq.n	c00321e <vli_modInv_update+0x68>
 c0031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0031fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c0031fe:	3b01      	subs	r3, #1
 c003200:	009b      	lsls	r3, r3, #2
 c003202:	68fa      	ldr	r2, [r7, #12]
 c003204:	4413      	add	r3, r2
 c003206:	681a      	ldr	r2, [r3, #0]
 c003208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00320c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c003210:	3b01      	subs	r3, #1
 c003212:	009b      	lsls	r3, r3, #2
 c003214:	68f9      	ldr	r1, [r7, #12]
 c003216:	440b      	add	r3, r1
 c003218:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 c00321c:	601a      	str	r2, [r3, #0]
 c00321e:	bf00      	nop
 c003220:	3718      	adds	r7, #24
 c003222:	46bd      	mov	sp, r7
 c003224:	bd80      	pop	{r7, pc}

0c003226 <uECC_vli_modInv>:
 c003226:	b580      	push	{r7, lr}
 c003228:	b0a6      	sub	sp, #152	; 0x98
 c00322a:	af00      	add	r7, sp, #0
 c00322c:	60f8      	str	r0, [r7, #12]
 c00322e:	60b9      	str	r1, [r7, #8]
 c003230:	607a      	str	r2, [r7, #4]
 c003232:	70fb      	strb	r3, [r7, #3]
 c003234:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003238:	4619      	mov	r1, r3
 c00323a:	68b8      	ldr	r0, [r7, #8]
 c00323c:	f7ff fc60 	bl	c002b00 <uECC_vli_isZero>
 c003240:	4603      	mov	r3, r0
 c003242:	2b00      	cmp	r3, #0
 c003244:	d006      	beq.n	c003254 <uECC_vli_modInv+0x2e>
 c003246:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c00324a:	4619      	mov	r1, r3
 c00324c:	68f8      	ldr	r0, [r7, #12]
 c00324e:	f7ff fc36 	bl	c002abe <uECC_vli_clear>
 c003252:	e0de      	b.n	c003412 <uECC_vli_modInv+0x1ec>
 c003254:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003258:	f107 0374 	add.w	r3, r7, #116	; 0x74
 c00325c:	68b9      	ldr	r1, [r7, #8]
 c00325e:	4618      	mov	r0, r3
 c003260:	f7ff fcf2 	bl	c002c48 <uECC_vli_set>
 c003264:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003268:	f107 0354 	add.w	r3, r7, #84	; 0x54
 c00326c:	6879      	ldr	r1, [r7, #4]
 c00326e:	4618      	mov	r0, r3
 c003270:	f7ff fcea 	bl	c002c48 <uECC_vli_set>
 c003274:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003278:	f107 0334 	add.w	r3, r7, #52	; 0x34
 c00327c:	4611      	mov	r1, r2
 c00327e:	4618      	mov	r0, r3
 c003280:	f7ff fc1d 	bl	c002abe <uECC_vli_clear>
 c003284:	2301      	movs	r3, #1
 c003286:	637b      	str	r3, [r7, #52]	; 0x34
 c003288:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c00328c:	f107 0314 	add.w	r3, r7, #20
 c003290:	4611      	mov	r1, r2
 c003292:	4618      	mov	r0, r3
 c003294:	f7ff fc13 	bl	c002abe <uECC_vli_clear>
 c003298:	e0a2      	b.n	c0033e0 <uECC_vli_modInv+0x1ba>
 c00329a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c00329c:	f003 0301 	and.w	r3, r3, #1
 c0032a0:	2b00      	cmp	r3, #0
 c0032a2:	d110      	bne.n	c0032c6 <uECC_vli_modInv+0xa0>
 c0032a4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0032a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 c0032ac:	4611      	mov	r1, r2
 c0032ae:	4618      	mov	r0, r3
 c0032b0:	f7ff fd90 	bl	c002dd4 <uECC_vli_rshift1>
 c0032b4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0032b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 c0032bc:	6879      	ldr	r1, [r7, #4]
 c0032be:	4618      	mov	r0, r3
 c0032c0:	f7ff ff79 	bl	c0031b6 <vli_modInv_update>
 c0032c4:	e08c      	b.n	c0033e0 <uECC_vli_modInv+0x1ba>
 c0032c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c0032c8:	f003 0301 	and.w	r3, r3, #1
 c0032cc:	2b00      	cmp	r3, #0
 c0032ce:	d110      	bne.n	c0032f2 <uECC_vli_modInv+0xcc>
 c0032d0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0032d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 c0032d8:	4611      	mov	r1, r2
 c0032da:	4618      	mov	r0, r3
 c0032dc:	f7ff fd7a 	bl	c002dd4 <uECC_vli_rshift1>
 c0032e0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0032e4:	f107 0314 	add.w	r3, r7, #20
 c0032e8:	6879      	ldr	r1, [r7, #4]
 c0032ea:	4618      	mov	r0, r3
 c0032ec:	f7ff ff63 	bl	c0031b6 <vli_modInv_update>
 c0032f0:	e076      	b.n	c0033e0 <uECC_vli_modInv+0x1ba>
 c0032f2:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 c0032f6:	2b00      	cmp	r3, #0
 c0032f8:	dd39      	ble.n	c00336e <uECC_vli_modInv+0x148>
 c0032fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0032fe:	f107 0254 	add.w	r2, r7, #84	; 0x54
 c003302:	f107 0174 	add.w	r1, r7, #116	; 0x74
 c003306:	f107 0074 	add.w	r0, r7, #116	; 0x74
 c00330a:	f7ff fb39 	bl	c002980 <uECC_vli_sub>
 c00330e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003312:	f107 0374 	add.w	r3, r7, #116	; 0x74
 c003316:	4611      	mov	r1, r2
 c003318:	4618      	mov	r0, r3
 c00331a:	f7ff fd5b 	bl	c002dd4 <uECC_vli_rshift1>
 c00331e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003322:	f107 0114 	add.w	r1, r7, #20
 c003326:	f107 0334 	add.w	r3, r7, #52	; 0x34
 c00332a:	4618      	mov	r0, r3
 c00332c:	f7ff fcb3 	bl	c002c96 <uECC_vli_cmp_unsafe>
 c003330:	4603      	mov	r3, r0
 c003332:	2b00      	cmp	r3, #0
 c003334:	da08      	bge.n	c003348 <uECC_vli_modInv+0x122>
 c003336:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c00333a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 c00333e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 c003342:	687a      	ldr	r2, [r7, #4]
 c003344:	f7ff fad4 	bl	c0028f0 <uECC_vli_add>
 c003348:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c00334c:	f107 0214 	add.w	r2, r7, #20
 c003350:	f107 0134 	add.w	r1, r7, #52	; 0x34
 c003354:	f107 0034 	add.w	r0, r7, #52	; 0x34
 c003358:	f7ff fb12 	bl	c002980 <uECC_vli_sub>
 c00335c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003360:	f107 0334 	add.w	r3, r7, #52	; 0x34
 c003364:	6879      	ldr	r1, [r7, #4]
 c003366:	4618      	mov	r0, r3
 c003368:	f7ff ff25 	bl	c0031b6 <vli_modInv_update>
 c00336c:	e038      	b.n	c0033e0 <uECC_vli_modInv+0x1ba>
 c00336e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003372:	f107 0274 	add.w	r2, r7, #116	; 0x74
 c003376:	f107 0154 	add.w	r1, r7, #84	; 0x54
 c00337a:	f107 0054 	add.w	r0, r7, #84	; 0x54
 c00337e:	f7ff faff 	bl	c002980 <uECC_vli_sub>
 c003382:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003386:	f107 0354 	add.w	r3, r7, #84	; 0x54
 c00338a:	4611      	mov	r1, r2
 c00338c:	4618      	mov	r0, r3
 c00338e:	f7ff fd21 	bl	c002dd4 <uECC_vli_rshift1>
 c003392:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003396:	f107 0134 	add.w	r1, r7, #52	; 0x34
 c00339a:	f107 0314 	add.w	r3, r7, #20
 c00339e:	4618      	mov	r0, r3
 c0033a0:	f7ff fc79 	bl	c002c96 <uECC_vli_cmp_unsafe>
 c0033a4:	4603      	mov	r3, r0
 c0033a6:	2b00      	cmp	r3, #0
 c0033a8:	da08      	bge.n	c0033bc <uECC_vli_modInv+0x196>
 c0033aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0033ae:	f107 0114 	add.w	r1, r7, #20
 c0033b2:	f107 0014 	add.w	r0, r7, #20
 c0033b6:	687a      	ldr	r2, [r7, #4]
 c0033b8:	f7ff fa9a 	bl	c0028f0 <uECC_vli_add>
 c0033bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0033c0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 c0033c4:	f107 0114 	add.w	r1, r7, #20
 c0033c8:	f107 0014 	add.w	r0, r7, #20
 c0033cc:	f7ff fad8 	bl	c002980 <uECC_vli_sub>
 c0033d0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0033d4:	f107 0314 	add.w	r3, r7, #20
 c0033d8:	6879      	ldr	r1, [r7, #4]
 c0033da:	4618      	mov	r0, r3
 c0033dc:	f7ff feeb 	bl	c0031b6 <vli_modInv_update>
 c0033e0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0033e4:	f107 0154 	add.w	r1, r7, #84	; 0x54
 c0033e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 c0033ec:	4618      	mov	r0, r3
 c0033ee:	f7ff fc52 	bl	c002c96 <uECC_vli_cmp_unsafe>
 c0033f2:	4603      	mov	r3, r0
 c0033f4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 c0033f8:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 c0033fc:	2b00      	cmp	r3, #0
 c0033fe:	f47f af4c 	bne.w	c00329a <uECC_vli_modInv+0x74>
 c003402:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003406:	f107 0334 	add.w	r3, r7, #52	; 0x34
 c00340a:	4619      	mov	r1, r3
 c00340c:	68f8      	ldr	r0, [r7, #12]
 c00340e:	f7ff fc1b 	bl	c002c48 <uECC_vli_set>
 c003412:	3798      	adds	r7, #152	; 0x98
 c003414:	46bd      	mov	sp, r7
 c003416:	bd80      	pop	{r7, pc}

0c003418 <double_jacobian_default>:
 c003418:	b580      	push	{r7, lr}
 c00341a:	b098      	sub	sp, #96	; 0x60
 c00341c:	af02      	add	r7, sp, #8
 c00341e:	60f8      	str	r0, [r7, #12]
 c003420:	60b9      	str	r1, [r7, #8]
 c003422:	607a      	str	r2, [r7, #4]
 c003424:	603b      	str	r3, [r7, #0]
 c003426:	683b      	ldr	r3, [r7, #0]
 c003428:	781b      	ldrb	r3, [r3, #0]
 c00342a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 c00342e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003432:	4619      	mov	r1, r3
 c003434:	6878      	ldr	r0, [r7, #4]
 c003436:	f7ff fb63 	bl	c002b00 <uECC_vli_isZero>
 c00343a:	4603      	mov	r3, r0
 c00343c:	2b00      	cmp	r3, #0
 c00343e:	f040 80e6 	bne.w	c00360e <double_jacobian_default+0x1f6>
 c003442:	f107 0330 	add.w	r3, r7, #48	; 0x30
 c003446:	683a      	ldr	r2, [r7, #0]
 c003448:	68b9      	ldr	r1, [r7, #8]
 c00344a:	4618      	mov	r0, r3
 c00344c:	f7ff fea3 	bl	c003196 <uECC_vli_modSquare_fast>
 c003450:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c003454:	f107 0010 	add.w	r0, r7, #16
 c003458:	683b      	ldr	r3, [r7, #0]
 c00345a:	68f9      	ldr	r1, [r7, #12]
 c00345c:	f7ff fe7f 	bl	c00315e <uECC_vli_modMult_fast>
 c003460:	f107 0130 	add.w	r1, r7, #48	; 0x30
 c003464:	f107 0330 	add.w	r3, r7, #48	; 0x30
 c003468:	683a      	ldr	r2, [r7, #0]
 c00346a:	4618      	mov	r0, r3
 c00346c:	f7ff fe93 	bl	c003196 <uECC_vli_modSquare_fast>
 c003470:	683b      	ldr	r3, [r7, #0]
 c003472:	687a      	ldr	r2, [r7, #4]
 c003474:	68b9      	ldr	r1, [r7, #8]
 c003476:	68b8      	ldr	r0, [r7, #8]
 c003478:	f7ff fe71 	bl	c00315e <uECC_vli_modMult_fast>
 c00347c:	683a      	ldr	r2, [r7, #0]
 c00347e:	6879      	ldr	r1, [r7, #4]
 c003480:	6878      	ldr	r0, [r7, #4]
 c003482:	f7ff fe88 	bl	c003196 <uECC_vli_modSquare_fast>
 c003486:	683b      	ldr	r3, [r7, #0]
 c003488:	1d1a      	adds	r2, r3, #4
 c00348a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c00348e:	9300      	str	r3, [sp, #0]
 c003490:	4613      	mov	r3, r2
 c003492:	687a      	ldr	r2, [r7, #4]
 c003494:	68f9      	ldr	r1, [r7, #12]
 c003496:	68f8      	ldr	r0, [r7, #12]
 c003498:	f7ff fcc6 	bl	c002e28 <uECC_vli_modAdd>
 c00349c:	683b      	ldr	r3, [r7, #0]
 c00349e:	1d1a      	adds	r2, r3, #4
 c0034a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0034a4:	9300      	str	r3, [sp, #0]
 c0034a6:	4613      	mov	r3, r2
 c0034a8:	687a      	ldr	r2, [r7, #4]
 c0034aa:	6879      	ldr	r1, [r7, #4]
 c0034ac:	6878      	ldr	r0, [r7, #4]
 c0034ae:	f7ff fcbb 	bl	c002e28 <uECC_vli_modAdd>
 c0034b2:	683b      	ldr	r3, [r7, #0]
 c0034b4:	1d1a      	adds	r2, r3, #4
 c0034b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0034ba:	9300      	str	r3, [sp, #0]
 c0034bc:	4613      	mov	r3, r2
 c0034be:	687a      	ldr	r2, [r7, #4]
 c0034c0:	68f9      	ldr	r1, [r7, #12]
 c0034c2:	6878      	ldr	r0, [r7, #4]
 c0034c4:	f7ff fcd7 	bl	c002e76 <uECC_vli_modSub>
 c0034c8:	683b      	ldr	r3, [r7, #0]
 c0034ca:	687a      	ldr	r2, [r7, #4]
 c0034cc:	68f9      	ldr	r1, [r7, #12]
 c0034ce:	68f8      	ldr	r0, [r7, #12]
 c0034d0:	f7ff fe45 	bl	c00315e <uECC_vli_modMult_fast>
 c0034d4:	683b      	ldr	r3, [r7, #0]
 c0034d6:	1d1a      	adds	r2, r3, #4
 c0034d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0034dc:	9300      	str	r3, [sp, #0]
 c0034de:	4613      	mov	r3, r2
 c0034e0:	68fa      	ldr	r2, [r7, #12]
 c0034e2:	68f9      	ldr	r1, [r7, #12]
 c0034e4:	6878      	ldr	r0, [r7, #4]
 c0034e6:	f7ff fc9f 	bl	c002e28 <uECC_vli_modAdd>
 c0034ea:	683b      	ldr	r3, [r7, #0]
 c0034ec:	1d1a      	adds	r2, r3, #4
 c0034ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0034f2:	9300      	str	r3, [sp, #0]
 c0034f4:	4613      	mov	r3, r2
 c0034f6:	687a      	ldr	r2, [r7, #4]
 c0034f8:	68f9      	ldr	r1, [r7, #12]
 c0034fa:	68f8      	ldr	r0, [r7, #12]
 c0034fc:	f7ff fc94 	bl	c002e28 <uECC_vli_modAdd>
 c003500:	2100      	movs	r1, #0
 c003502:	68f8      	ldr	r0, [r7, #12]
 c003504:	f7ff fb26 	bl	c002b54 <uECC_vli_testBit>
 c003508:	4603      	mov	r3, r0
 c00350a:	2b00      	cmp	r3, #0
 c00350c:	d024      	beq.n	c003558 <double_jacobian_default+0x140>
 c00350e:	683b      	ldr	r3, [r7, #0]
 c003510:	1d1a      	adds	r2, r3, #4
 c003512:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003516:	68f9      	ldr	r1, [r7, #12]
 c003518:	68f8      	ldr	r0, [r7, #12]
 c00351a:	f7ff f9e9 	bl	c0028f0 <uECC_vli_add>
 c00351e:	6538      	str	r0, [r7, #80]	; 0x50
 c003520:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003524:	4619      	mov	r1, r3
 c003526:	68f8      	ldr	r0, [r7, #12]
 c003528:	f7ff fc54 	bl	c002dd4 <uECC_vli_rshift1>
 c00352c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003530:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c003534:	3b01      	subs	r3, #1
 c003536:	009b      	lsls	r3, r3, #2
 c003538:	68fa      	ldr	r2, [r7, #12]
 c00353a:	4413      	add	r3, r2
 c00353c:	6819      	ldr	r1, [r3, #0]
 c00353e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c003540:	07da      	lsls	r2, r3, #31
 c003542:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003546:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c00354a:	3b01      	subs	r3, #1
 c00354c:	009b      	lsls	r3, r3, #2
 c00354e:	68f8      	ldr	r0, [r7, #12]
 c003550:	4403      	add	r3, r0
 c003552:	430a      	orrs	r2, r1
 c003554:	601a      	str	r2, [r3, #0]
 c003556:	e005      	b.n	c003564 <double_jacobian_default+0x14c>
 c003558:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c00355c:	4619      	mov	r1, r3
 c00355e:	68f8      	ldr	r0, [r7, #12]
 c003560:	f7ff fc38 	bl	c002dd4 <uECC_vli_rshift1>
 c003564:	683a      	ldr	r2, [r7, #0]
 c003566:	68f9      	ldr	r1, [r7, #12]
 c003568:	6878      	ldr	r0, [r7, #4]
 c00356a:	f7ff fe14 	bl	c003196 <uECC_vli_modSquare_fast>
 c00356e:	683b      	ldr	r3, [r7, #0]
 c003570:	1d19      	adds	r1, r3, #4
 c003572:	f107 0210 	add.w	r2, r7, #16
 c003576:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c00357a:	9300      	str	r3, [sp, #0]
 c00357c:	460b      	mov	r3, r1
 c00357e:	6879      	ldr	r1, [r7, #4]
 c003580:	6878      	ldr	r0, [r7, #4]
 c003582:	f7ff fc78 	bl	c002e76 <uECC_vli_modSub>
 c003586:	683b      	ldr	r3, [r7, #0]
 c003588:	1d19      	adds	r1, r3, #4
 c00358a:	f107 0210 	add.w	r2, r7, #16
 c00358e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003592:	9300      	str	r3, [sp, #0]
 c003594:	460b      	mov	r3, r1
 c003596:	6879      	ldr	r1, [r7, #4]
 c003598:	6878      	ldr	r0, [r7, #4]
 c00359a:	f7ff fc6c 	bl	c002e76 <uECC_vli_modSub>
 c00359e:	683b      	ldr	r3, [r7, #0]
 c0035a0:	1d1a      	adds	r2, r3, #4
 c0035a2:	f107 0110 	add.w	r1, r7, #16
 c0035a6:	f107 0010 	add.w	r0, r7, #16
 c0035aa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0035ae:	9300      	str	r3, [sp, #0]
 c0035b0:	4613      	mov	r3, r2
 c0035b2:	687a      	ldr	r2, [r7, #4]
 c0035b4:	f7ff fc5f 	bl	c002e76 <uECC_vli_modSub>
 c0035b8:	f107 0210 	add.w	r2, r7, #16
 c0035bc:	683b      	ldr	r3, [r7, #0]
 c0035be:	68f9      	ldr	r1, [r7, #12]
 c0035c0:	68f8      	ldr	r0, [r7, #12]
 c0035c2:	f7ff fdcc 	bl	c00315e <uECC_vli_modMult_fast>
 c0035c6:	683b      	ldr	r3, [r7, #0]
 c0035c8:	1d19      	adds	r1, r3, #4
 c0035ca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c0035ce:	f107 0030 	add.w	r0, r7, #48	; 0x30
 c0035d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0035d6:	9300      	str	r3, [sp, #0]
 c0035d8:	460b      	mov	r3, r1
 c0035da:	68f9      	ldr	r1, [r7, #12]
 c0035dc:	f7ff fc4b 	bl	c002e76 <uECC_vli_modSub>
 c0035e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0035e4:	461a      	mov	r2, r3
 c0035e6:	6879      	ldr	r1, [r7, #4]
 c0035e8:	68f8      	ldr	r0, [r7, #12]
 c0035ea:	f7ff fb2d 	bl	c002c48 <uECC_vli_set>
 c0035ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0035f2:	461a      	mov	r2, r3
 c0035f4:	68b9      	ldr	r1, [r7, #8]
 c0035f6:	6878      	ldr	r0, [r7, #4]
 c0035f8:	f7ff fb26 	bl	c002c48 <uECC_vli_set>
 c0035fc:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 c003600:	f107 0330 	add.w	r3, r7, #48	; 0x30
 c003604:	4619      	mov	r1, r3
 c003606:	68b8      	ldr	r0, [r7, #8]
 c003608:	f7ff fb1e 	bl	c002c48 <uECC_vli_set>
 c00360c:	e000      	b.n	c003610 <double_jacobian_default+0x1f8>
 c00360e:	bf00      	nop
 c003610:	3758      	adds	r7, #88	; 0x58
 c003612:	46bd      	mov	sp, r7
 c003614:	bd80      	pop	{r7, pc}

0c003616 <x_side_default>:
 c003616:	b580      	push	{r7, lr}
 c003618:	b090      	sub	sp, #64	; 0x40
 c00361a:	af02      	add	r7, sp, #8
 c00361c:	60f8      	str	r0, [r7, #12]
 c00361e:	60b9      	str	r1, [r7, #8]
 c003620:	607a      	str	r2, [r7, #4]
 c003622:	f107 0314 	add.w	r3, r7, #20
 c003626:	2220      	movs	r2, #32
 c003628:	2100      	movs	r1, #0
 c00362a:	4618      	mov	r0, r3
 c00362c:	f004 feab 	bl	c008386 <memset>
 c003630:	2303      	movs	r3, #3
 c003632:	617b      	str	r3, [r7, #20]
 c003634:	687b      	ldr	r3, [r7, #4]
 c003636:	781b      	ldrb	r3, [r3, #0]
 c003638:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 c00363c:	687a      	ldr	r2, [r7, #4]
 c00363e:	68b9      	ldr	r1, [r7, #8]
 c003640:	68f8      	ldr	r0, [r7, #12]
 c003642:	f7ff fda8 	bl	c003196 <uECC_vli_modSquare_fast>
 c003646:	687b      	ldr	r3, [r7, #4]
 c003648:	1d19      	adds	r1, r3, #4
 c00364a:	f107 0214 	add.w	r2, r7, #20
 c00364e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003652:	9300      	str	r3, [sp, #0]
 c003654:	460b      	mov	r3, r1
 c003656:	68f9      	ldr	r1, [r7, #12]
 c003658:	68f8      	ldr	r0, [r7, #12]
 c00365a:	f7ff fc0c 	bl	c002e76 <uECC_vli_modSub>
 c00365e:	687b      	ldr	r3, [r7, #4]
 c003660:	68ba      	ldr	r2, [r7, #8]
 c003662:	68f9      	ldr	r1, [r7, #12]
 c003664:	68f8      	ldr	r0, [r7, #12]
 c003666:	f7ff fd7a 	bl	c00315e <uECC_vli_modMult_fast>
 c00366a:	687b      	ldr	r3, [r7, #4]
 c00366c:	f103 0284 	add.w	r2, r3, #132	; 0x84
 c003670:	687b      	ldr	r3, [r7, #4]
 c003672:	1d19      	adds	r1, r3, #4
 c003674:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003678:	9300      	str	r3, [sp, #0]
 c00367a:	460b      	mov	r3, r1
 c00367c:	68f9      	ldr	r1, [r7, #12]
 c00367e:	68f8      	ldr	r0, [r7, #12]
 c003680:	f7ff fbd2 	bl	c002e28 <uECC_vli_modAdd>
 c003684:	bf00      	nop
 c003686:	3738      	adds	r7, #56	; 0x38
 c003688:	46bd      	mov	sp, r7
 c00368a:	bd80      	pop	{r7, pc}

0c00368c <mod_sqrt_default>:
 c00368c:	b580      	push	{r7, lr}
 c00368e:	b094      	sub	sp, #80	; 0x50
 c003690:	af00      	add	r7, sp, #0
 c003692:	6078      	str	r0, [r7, #4]
 c003694:	6039      	str	r1, [r7, #0]
 c003696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c00369a:	2220      	movs	r2, #32
 c00369c:	2100      	movs	r1, #0
 c00369e:	4618      	mov	r0, r3
 c0036a0:	f004 fe71 	bl	c008386 <memset>
 c0036a4:	2301      	movs	r3, #1
 c0036a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 c0036a8:	f107 030c 	add.w	r3, r7, #12
 c0036ac:	2220      	movs	r2, #32
 c0036ae:	2100      	movs	r1, #0
 c0036b0:	4618      	mov	r0, r3
 c0036b2:	f004 fe68 	bl	c008386 <memset>
 c0036b6:	2301      	movs	r3, #1
 c0036b8:	60fb      	str	r3, [r7, #12]
 c0036ba:	683b      	ldr	r3, [r7, #0]
 c0036bc:	781b      	ldrb	r3, [r3, #0]
 c0036be:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 c0036c2:	683b      	ldr	r3, [r7, #0]
 c0036c4:	1d19      	adds	r1, r3, #4
 c0036c6:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 c0036ca:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 c0036ce:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 c0036d2:	f7ff f90d 	bl	c0028f0 <uECC_vli_add>
 c0036d6:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 c0036da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c0036de:	4611      	mov	r1, r2
 c0036e0:	4618      	mov	r0, r3
 c0036e2:	f7ff fa77 	bl	c002bd4 <uECC_vli_numBits>
 c0036e6:	4603      	mov	r3, r0
 c0036e8:	b29b      	uxth	r3, r3
 c0036ea:	3b01      	subs	r3, #1
 c0036ec:	b29b      	uxth	r3, r3
 c0036ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 c0036f2:	e020      	b.n	c003736 <mod_sqrt_default+0xaa>
 c0036f4:	f107 010c 	add.w	r1, r7, #12
 c0036f8:	f107 030c 	add.w	r3, r7, #12
 c0036fc:	683a      	ldr	r2, [r7, #0]
 c0036fe:	4618      	mov	r0, r3
 c003700:	f7ff fd49 	bl	c003196 <uECC_vli_modSquare_fast>
 c003704:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 c003708:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c00370c:	4611      	mov	r1, r2
 c00370e:	4618      	mov	r0, r3
 c003710:	f7ff fa20 	bl	c002b54 <uECC_vli_testBit>
 c003714:	4603      	mov	r3, r0
 c003716:	2b00      	cmp	r3, #0
 c003718:	d007      	beq.n	c00372a <mod_sqrt_default+0x9e>
 c00371a:	f107 010c 	add.w	r1, r7, #12
 c00371e:	f107 000c 	add.w	r0, r7, #12
 c003722:	683b      	ldr	r3, [r7, #0]
 c003724:	687a      	ldr	r2, [r7, #4]
 c003726:	f7ff fd1a 	bl	c00315e <uECC_vli_modMult_fast>
 c00372a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 c00372e:	3b01      	subs	r3, #1
 c003730:	b29b      	uxth	r3, r3
 c003732:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 c003736:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 c00373a:	2b01      	cmp	r3, #1
 c00373c:	dcda      	bgt.n	c0036f4 <mod_sqrt_default+0x68>
 c00373e:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 c003742:	f107 030c 	add.w	r3, r7, #12
 c003746:	4619      	mov	r1, r3
 c003748:	6878      	ldr	r0, [r7, #4]
 c00374a:	f7ff fa7d 	bl	c002c48 <uECC_vli_set>
 c00374e:	bf00      	nop
 c003750:	3750      	adds	r7, #80	; 0x50
 c003752:	46bd      	mov	sp, r7
 c003754:	bd80      	pop	{r7, pc}
	...

0c003758 <uECC_secp256r1>:
 c003758:	b480      	push	{r7}
 c00375a:	af00      	add	r7, sp, #0
 c00375c:	4b02      	ldr	r3, [pc, #8]	; (c003768 <uECC_secp256r1+0x10>)
 c00375e:	4618      	mov	r0, r3
 c003760:	46bd      	mov	sp, r7
 c003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003766:	4770      	bx	lr
 c003768:	0c0094c4 	.word	0x0c0094c4

0c00376c <vli_mmod_fast_secp256r1>:
 c00376c:	b580      	push	{r7, lr}
 c00376e:	b08c      	sub	sp, #48	; 0x30
 c003770:	af00      	add	r7, sp, #0
 c003772:	6078      	str	r0, [r7, #4]
 c003774:	6039      	str	r1, [r7, #0]
 c003776:	2208      	movs	r2, #8
 c003778:	6839      	ldr	r1, [r7, #0]
 c00377a:	6878      	ldr	r0, [r7, #4]
 c00377c:	f7ff fa64 	bl	c002c48 <uECC_vli_set>
 c003780:	2300      	movs	r3, #0
 c003782:	617b      	str	r3, [r7, #20]
 c003784:	697b      	ldr	r3, [r7, #20]
 c003786:	613b      	str	r3, [r7, #16]
 c003788:	693b      	ldr	r3, [r7, #16]
 c00378a:	60fb      	str	r3, [r7, #12]
 c00378c:	683b      	ldr	r3, [r7, #0]
 c00378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c003790:	61bb      	str	r3, [r7, #24]
 c003792:	683b      	ldr	r3, [r7, #0]
 c003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c003796:	61fb      	str	r3, [r7, #28]
 c003798:	683b      	ldr	r3, [r7, #0]
 c00379a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00379c:	623b      	str	r3, [r7, #32]
 c00379e:	683b      	ldr	r3, [r7, #0]
 c0037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0037a2:	627b      	str	r3, [r7, #36]	; 0x24
 c0037a4:	683b      	ldr	r3, [r7, #0]
 c0037a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c0037a8:	62bb      	str	r3, [r7, #40]	; 0x28
 c0037aa:	f107 020c 	add.w	r2, r7, #12
 c0037ae:	f107 010c 	add.w	r1, r7, #12
 c0037b2:	f107 000c 	add.w	r0, r7, #12
 c0037b6:	2308      	movs	r3, #8
 c0037b8:	f7ff f89a 	bl	c0028f0 <uECC_vli_add>
 c0037bc:	4603      	mov	r3, r0
 c0037be:	62fb      	str	r3, [r7, #44]	; 0x2c
 c0037c0:	f107 020c 	add.w	r2, r7, #12
 c0037c4:	2308      	movs	r3, #8
 c0037c6:	6879      	ldr	r1, [r7, #4]
 c0037c8:	6878      	ldr	r0, [r7, #4]
 c0037ca:	f7ff f891 	bl	c0028f0 <uECC_vli_add>
 c0037ce:	4602      	mov	r2, r0
 c0037d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0037d2:	4413      	add	r3, r2
 c0037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 c0037d6:	683b      	ldr	r3, [r7, #0]
 c0037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0037da:	61bb      	str	r3, [r7, #24]
 c0037dc:	683b      	ldr	r3, [r7, #0]
 c0037de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0037e0:	61fb      	str	r3, [r7, #28]
 c0037e2:	683b      	ldr	r3, [r7, #0]
 c0037e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0037e6:	623b      	str	r3, [r7, #32]
 c0037e8:	683b      	ldr	r3, [r7, #0]
 c0037ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c0037ec:	627b      	str	r3, [r7, #36]	; 0x24
 c0037ee:	2300      	movs	r3, #0
 c0037f0:	62bb      	str	r3, [r7, #40]	; 0x28
 c0037f2:	f107 020c 	add.w	r2, r7, #12
 c0037f6:	f107 010c 	add.w	r1, r7, #12
 c0037fa:	f107 000c 	add.w	r0, r7, #12
 c0037fe:	2308      	movs	r3, #8
 c003800:	f7ff f876 	bl	c0028f0 <uECC_vli_add>
 c003804:	4602      	mov	r2, r0
 c003806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003808:	4413      	add	r3, r2
 c00380a:	62fb      	str	r3, [r7, #44]	; 0x2c
 c00380c:	f107 020c 	add.w	r2, r7, #12
 c003810:	2308      	movs	r3, #8
 c003812:	6879      	ldr	r1, [r7, #4]
 c003814:	6878      	ldr	r0, [r7, #4]
 c003816:	f7ff f86b 	bl	c0028f0 <uECC_vli_add>
 c00381a:	4602      	mov	r2, r0
 c00381c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c00381e:	4413      	add	r3, r2
 c003820:	62fb      	str	r3, [r7, #44]	; 0x2c
 c003822:	683b      	ldr	r3, [r7, #0]
 c003824:	6a1b      	ldr	r3, [r3, #32]
 c003826:	60fb      	str	r3, [r7, #12]
 c003828:	683b      	ldr	r3, [r7, #0]
 c00382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00382c:	613b      	str	r3, [r7, #16]
 c00382e:	683b      	ldr	r3, [r7, #0]
 c003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003832:	617b      	str	r3, [r7, #20]
 c003834:	2300      	movs	r3, #0
 c003836:	623b      	str	r3, [r7, #32]
 c003838:	6a3b      	ldr	r3, [r7, #32]
 c00383a:	61fb      	str	r3, [r7, #28]
 c00383c:	69fb      	ldr	r3, [r7, #28]
 c00383e:	61bb      	str	r3, [r7, #24]
 c003840:	683b      	ldr	r3, [r7, #0]
 c003842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003844:	627b      	str	r3, [r7, #36]	; 0x24
 c003846:	683b      	ldr	r3, [r7, #0]
 c003848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c00384a:	62bb      	str	r3, [r7, #40]	; 0x28
 c00384c:	f107 020c 	add.w	r2, r7, #12
 c003850:	2308      	movs	r3, #8
 c003852:	6879      	ldr	r1, [r7, #4]
 c003854:	6878      	ldr	r0, [r7, #4]
 c003856:	f7ff f84b 	bl	c0028f0 <uECC_vli_add>
 c00385a:	4602      	mov	r2, r0
 c00385c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c00385e:	4413      	add	r3, r2
 c003860:	62fb      	str	r3, [r7, #44]	; 0x2c
 c003862:	683b      	ldr	r3, [r7, #0]
 c003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003866:	60fb      	str	r3, [r7, #12]
 c003868:	683b      	ldr	r3, [r7, #0]
 c00386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00386c:	613b      	str	r3, [r7, #16]
 c00386e:	683b      	ldr	r3, [r7, #0]
 c003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c003872:	617b      	str	r3, [r7, #20]
 c003874:	683b      	ldr	r3, [r7, #0]
 c003876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003878:	61bb      	str	r3, [r7, #24]
 c00387a:	683b      	ldr	r3, [r7, #0]
 c00387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c00387e:	61fb      	str	r3, [r7, #28]
 c003880:	683b      	ldr	r3, [r7, #0]
 c003882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003884:	623b      	str	r3, [r7, #32]
 c003886:	683b      	ldr	r3, [r7, #0]
 c003888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00388a:	627b      	str	r3, [r7, #36]	; 0x24
 c00388c:	683b      	ldr	r3, [r7, #0]
 c00388e:	6a1b      	ldr	r3, [r3, #32]
 c003890:	62bb      	str	r3, [r7, #40]	; 0x28
 c003892:	f107 020c 	add.w	r2, r7, #12
 c003896:	2308      	movs	r3, #8
 c003898:	6879      	ldr	r1, [r7, #4]
 c00389a:	6878      	ldr	r0, [r7, #4]
 c00389c:	f7ff f828 	bl	c0028f0 <uECC_vli_add>
 c0038a0:	4602      	mov	r2, r0
 c0038a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0038a4:	4413      	add	r3, r2
 c0038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 c0038a8:	683b      	ldr	r3, [r7, #0]
 c0038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0038ac:	60fb      	str	r3, [r7, #12]
 c0038ae:	683b      	ldr	r3, [r7, #0]
 c0038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0038b2:	613b      	str	r3, [r7, #16]
 c0038b4:	683b      	ldr	r3, [r7, #0]
 c0038b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0038b8:	617b      	str	r3, [r7, #20]
 c0038ba:	2300      	movs	r3, #0
 c0038bc:	623b      	str	r3, [r7, #32]
 c0038be:	6a3b      	ldr	r3, [r7, #32]
 c0038c0:	61fb      	str	r3, [r7, #28]
 c0038c2:	69fb      	ldr	r3, [r7, #28]
 c0038c4:	61bb      	str	r3, [r7, #24]
 c0038c6:	683b      	ldr	r3, [r7, #0]
 c0038c8:	6a1b      	ldr	r3, [r3, #32]
 c0038ca:	627b      	str	r3, [r7, #36]	; 0x24
 c0038cc:	683b      	ldr	r3, [r7, #0]
 c0038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0038d0:	62bb      	str	r3, [r7, #40]	; 0x28
 c0038d2:	f107 020c 	add.w	r2, r7, #12
 c0038d6:	2308      	movs	r3, #8
 c0038d8:	6879      	ldr	r1, [r7, #4]
 c0038da:	6878      	ldr	r0, [r7, #4]
 c0038dc:	f7ff f850 	bl	c002980 <uECC_vli_sub>
 c0038e0:	4602      	mov	r2, r0
 c0038e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0038e4:	1a9b      	subs	r3, r3, r2
 c0038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 c0038e8:	683b      	ldr	r3, [r7, #0]
 c0038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0038ec:	60fb      	str	r3, [r7, #12]
 c0038ee:	683b      	ldr	r3, [r7, #0]
 c0038f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0038f2:	613b      	str	r3, [r7, #16]
 c0038f4:	683b      	ldr	r3, [r7, #0]
 c0038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0038f8:	617b      	str	r3, [r7, #20]
 c0038fa:	683b      	ldr	r3, [r7, #0]
 c0038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c0038fe:	61bb      	str	r3, [r7, #24]
 c003900:	2300      	movs	r3, #0
 c003902:	623b      	str	r3, [r7, #32]
 c003904:	6a3b      	ldr	r3, [r7, #32]
 c003906:	61fb      	str	r3, [r7, #28]
 c003908:	683b      	ldr	r3, [r7, #0]
 c00390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00390c:	627b      	str	r3, [r7, #36]	; 0x24
 c00390e:	683b      	ldr	r3, [r7, #0]
 c003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c003912:	62bb      	str	r3, [r7, #40]	; 0x28
 c003914:	f107 020c 	add.w	r2, r7, #12
 c003918:	2308      	movs	r3, #8
 c00391a:	6879      	ldr	r1, [r7, #4]
 c00391c:	6878      	ldr	r0, [r7, #4]
 c00391e:	f7ff f82f 	bl	c002980 <uECC_vli_sub>
 c003922:	4602      	mov	r2, r0
 c003924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003926:	1a9b      	subs	r3, r3, r2
 c003928:	62fb      	str	r3, [r7, #44]	; 0x2c
 c00392a:	683b      	ldr	r3, [r7, #0]
 c00392c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00392e:	60fb      	str	r3, [r7, #12]
 c003930:	683b      	ldr	r3, [r7, #0]
 c003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003934:	613b      	str	r3, [r7, #16]
 c003936:	683b      	ldr	r3, [r7, #0]
 c003938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c00393a:	617b      	str	r3, [r7, #20]
 c00393c:	683b      	ldr	r3, [r7, #0]
 c00393e:	6a1b      	ldr	r3, [r3, #32]
 c003940:	61bb      	str	r3, [r7, #24]
 c003942:	683b      	ldr	r3, [r7, #0]
 c003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003946:	61fb      	str	r3, [r7, #28]
 c003948:	683b      	ldr	r3, [r7, #0]
 c00394a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00394c:	623b      	str	r3, [r7, #32]
 c00394e:	2300      	movs	r3, #0
 c003950:	627b      	str	r3, [r7, #36]	; 0x24
 c003952:	683b      	ldr	r3, [r7, #0]
 c003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c003956:	62bb      	str	r3, [r7, #40]	; 0x28
 c003958:	f107 020c 	add.w	r2, r7, #12
 c00395c:	2308      	movs	r3, #8
 c00395e:	6879      	ldr	r1, [r7, #4]
 c003960:	6878      	ldr	r0, [r7, #4]
 c003962:	f7ff f80d 	bl	c002980 <uECC_vli_sub>
 c003966:	4602      	mov	r2, r0
 c003968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c00396a:	1a9b      	subs	r3, r3, r2
 c00396c:	62fb      	str	r3, [r7, #44]	; 0x2c
 c00396e:	683b      	ldr	r3, [r7, #0]
 c003970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003972:	60fb      	str	r3, [r7, #12]
 c003974:	683b      	ldr	r3, [r7, #0]
 c003976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003978:	613b      	str	r3, [r7, #16]
 c00397a:	2300      	movs	r3, #0
 c00397c:	617b      	str	r3, [r7, #20]
 c00397e:	683b      	ldr	r3, [r7, #0]
 c003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003982:	61bb      	str	r3, [r7, #24]
 c003984:	683b      	ldr	r3, [r7, #0]
 c003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003988:	61fb      	str	r3, [r7, #28]
 c00398a:	683b      	ldr	r3, [r7, #0]
 c00398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c00398e:	623b      	str	r3, [r7, #32]
 c003990:	2300      	movs	r3, #0
 c003992:	627b      	str	r3, [r7, #36]	; 0x24
 c003994:	683b      	ldr	r3, [r7, #0]
 c003996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003998:	62bb      	str	r3, [r7, #40]	; 0x28
 c00399a:	f107 020c 	add.w	r2, r7, #12
 c00399e:	2308      	movs	r3, #8
 c0039a0:	6879      	ldr	r1, [r7, #4]
 c0039a2:	6878      	ldr	r0, [r7, #4]
 c0039a4:	f7fe ffec 	bl	c002980 <uECC_vli_sub>
 c0039a8:	4602      	mov	r2, r0
 c0039aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0039ac:	1a9b      	subs	r3, r3, r2
 c0039ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 c0039b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0039b2:	2b00      	cmp	r3, #0
 c0039b4:	da17      	bge.n	c0039e6 <vli_mmod_fast_secp256r1+0x27a>
 c0039b6:	2308      	movs	r3, #8
 c0039b8:	4a12      	ldr	r2, [pc, #72]	; (c003a04 <vli_mmod_fast_secp256r1+0x298>)
 c0039ba:	6879      	ldr	r1, [r7, #4]
 c0039bc:	6878      	ldr	r0, [r7, #4]
 c0039be:	f7fe ff97 	bl	c0028f0 <uECC_vli_add>
 c0039c2:	4602      	mov	r2, r0
 c0039c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0039c6:	4413      	add	r3, r2
 c0039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 c0039ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0039cc:	2b00      	cmp	r3, #0
 c0039ce:	dbf2      	blt.n	c0039b6 <vli_mmod_fast_secp256r1+0x24a>
 c0039d0:	e014      	b.n	c0039fc <vli_mmod_fast_secp256r1+0x290>
 c0039d2:	2308      	movs	r3, #8
 c0039d4:	4a0b      	ldr	r2, [pc, #44]	; (c003a04 <vli_mmod_fast_secp256r1+0x298>)
 c0039d6:	6879      	ldr	r1, [r7, #4]
 c0039d8:	6878      	ldr	r0, [r7, #4]
 c0039da:	f7fe ffd1 	bl	c002980 <uECC_vli_sub>
 c0039de:	4602      	mov	r2, r0
 c0039e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0039e2:	1a9b      	subs	r3, r3, r2
 c0039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 c0039e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0039e8:	2b00      	cmp	r3, #0
 c0039ea:	d1f2      	bne.n	c0039d2 <vli_mmod_fast_secp256r1+0x266>
 c0039ec:	2208      	movs	r2, #8
 c0039ee:	6879      	ldr	r1, [r7, #4]
 c0039f0:	4804      	ldr	r0, [pc, #16]	; (c003a04 <vli_mmod_fast_secp256r1+0x298>)
 c0039f2:	f7ff f950 	bl	c002c96 <uECC_vli_cmp_unsafe>
 c0039f6:	4603      	mov	r3, r0
 c0039f8:	2b01      	cmp	r3, #1
 c0039fa:	d1ea      	bne.n	c0039d2 <vli_mmod_fast_secp256r1+0x266>
 c0039fc:	bf00      	nop
 c0039fe:	3730      	adds	r7, #48	; 0x30
 c003a00:	46bd      	mov	sp, r7
 c003a02:	bd80      	pop	{r7, pc}
 c003a04:	0c0094c8 	.word	0x0c0094c8

0c003a08 <apply_z>:
 c003a08:	b580      	push	{r7, lr}
 c003a0a:	b08c      	sub	sp, #48	; 0x30
 c003a0c:	af00      	add	r7, sp, #0
 c003a0e:	60f8      	str	r0, [r7, #12]
 c003a10:	60b9      	str	r1, [r7, #8]
 c003a12:	607a      	str	r2, [r7, #4]
 c003a14:	603b      	str	r3, [r7, #0]
 c003a16:	f107 0310 	add.w	r3, r7, #16
 c003a1a:	683a      	ldr	r2, [r7, #0]
 c003a1c:	6879      	ldr	r1, [r7, #4]
 c003a1e:	4618      	mov	r0, r3
 c003a20:	f7ff fbb9 	bl	c003196 <uECC_vli_modSquare_fast>
 c003a24:	f107 0210 	add.w	r2, r7, #16
 c003a28:	683b      	ldr	r3, [r7, #0]
 c003a2a:	68f9      	ldr	r1, [r7, #12]
 c003a2c:	68f8      	ldr	r0, [r7, #12]
 c003a2e:	f7ff fb96 	bl	c00315e <uECC_vli_modMult_fast>
 c003a32:	f107 0110 	add.w	r1, r7, #16
 c003a36:	f107 0010 	add.w	r0, r7, #16
 c003a3a:	683b      	ldr	r3, [r7, #0]
 c003a3c:	687a      	ldr	r2, [r7, #4]
 c003a3e:	f7ff fb8e 	bl	c00315e <uECC_vli_modMult_fast>
 c003a42:	f107 0210 	add.w	r2, r7, #16
 c003a46:	683b      	ldr	r3, [r7, #0]
 c003a48:	68b9      	ldr	r1, [r7, #8]
 c003a4a:	68b8      	ldr	r0, [r7, #8]
 c003a4c:	f7ff fb87 	bl	c00315e <uECC_vli_modMult_fast>
 c003a50:	bf00      	nop
 c003a52:	3730      	adds	r7, #48	; 0x30
 c003a54:	46bd      	mov	sp, r7
 c003a56:	bd80      	pop	{r7, pc}

0c003a58 <XYcZ_initial_double>:
 c003a58:	b590      	push	{r4, r7, lr}
 c003a5a:	b08f      	sub	sp, #60	; 0x3c
 c003a5c:	af00      	add	r7, sp, #0
 c003a5e:	60f8      	str	r0, [r7, #12]
 c003a60:	60b9      	str	r1, [r7, #8]
 c003a62:	607a      	str	r2, [r7, #4]
 c003a64:	603b      	str	r3, [r7, #0]
 c003a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c003a68:	781b      	ldrb	r3, [r3, #0]
 c003a6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 c003a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c003a70:	2b00      	cmp	r3, #0
 c003a72:	d008      	beq.n	c003a86 <XYcZ_initial_double+0x2e>
 c003a74:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 c003a78:	f107 0314 	add.w	r3, r7, #20
 c003a7c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 c003a7e:	4618      	mov	r0, r3
 c003a80:	f7ff f8e2 	bl	c002c48 <uECC_vli_set>
 c003a84:	e009      	b.n	c003a9a <XYcZ_initial_double+0x42>
 c003a86:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 c003a8a:	f107 0314 	add.w	r3, r7, #20
 c003a8e:	4611      	mov	r1, r2
 c003a90:	4618      	mov	r0, r3
 c003a92:	f7ff f814 	bl	c002abe <uECC_vli_clear>
 c003a96:	2301      	movs	r3, #1
 c003a98:	617b      	str	r3, [r7, #20]
 c003a9a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003a9e:	461a      	mov	r2, r3
 c003aa0:	68f9      	ldr	r1, [r7, #12]
 c003aa2:	6878      	ldr	r0, [r7, #4]
 c003aa4:	f7ff f8d0 	bl	c002c48 <uECC_vli_set>
 c003aa8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003aac:	461a      	mov	r2, r3
 c003aae:	68b9      	ldr	r1, [r7, #8]
 c003ab0:	6838      	ldr	r0, [r7, #0]
 c003ab2:	f7ff f8c9 	bl	c002c48 <uECC_vli_set>
 c003ab6:	f107 0214 	add.w	r2, r7, #20
 c003aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c003abc:	68b9      	ldr	r1, [r7, #8]
 c003abe:	68f8      	ldr	r0, [r7, #12]
 c003ac0:	f7ff ffa2 	bl	c003a08 <apply_z>
 c003ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c003ac6:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
 c003aca:	f107 0214 	add.w	r2, r7, #20
 c003ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c003ad0:	68b9      	ldr	r1, [r7, #8]
 c003ad2:	68f8      	ldr	r0, [r7, #12]
 c003ad4:	47a0      	blx	r4
 c003ad6:	f107 0214 	add.w	r2, r7, #20
 c003ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c003adc:	6839      	ldr	r1, [r7, #0]
 c003ade:	6878      	ldr	r0, [r7, #4]
 c003ae0:	f7ff ff92 	bl	c003a08 <apply_z>
 c003ae4:	bf00      	nop
 c003ae6:	373c      	adds	r7, #60	; 0x3c
 c003ae8:	46bd      	mov	sp, r7
 c003aea:	bd90      	pop	{r4, r7, pc}

0c003aec <XYcZ_add>:
 c003aec:	b580      	push	{r7, lr}
 c003aee:	b090      	sub	sp, #64	; 0x40
 c003af0:	af02      	add	r7, sp, #8
 c003af2:	60f8      	str	r0, [r7, #12]
 c003af4:	60b9      	str	r1, [r7, #8]
 c003af6:	607a      	str	r2, [r7, #4]
 c003af8:	603b      	str	r3, [r7, #0]
 c003afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003afc:	781b      	ldrb	r3, [r3, #0]
 c003afe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 c003b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003b04:	1d1a      	adds	r2, r3, #4
 c003b06:	f107 0014 	add.w	r0, r7, #20
 c003b0a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003b0e:	9300      	str	r3, [sp, #0]
 c003b10:	4613      	mov	r3, r2
 c003b12:	68fa      	ldr	r2, [r7, #12]
 c003b14:	6879      	ldr	r1, [r7, #4]
 c003b16:	f7ff f9ae 	bl	c002e76 <uECC_vli_modSub>
 c003b1a:	f107 0114 	add.w	r1, r7, #20
 c003b1e:	f107 0314 	add.w	r3, r7, #20
 c003b22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 c003b24:	4618      	mov	r0, r3
 c003b26:	f7ff fb36 	bl	c003196 <uECC_vli_modSquare_fast>
 c003b2a:	f107 0214 	add.w	r2, r7, #20
 c003b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003b30:	68f9      	ldr	r1, [r7, #12]
 c003b32:	68f8      	ldr	r0, [r7, #12]
 c003b34:	f7ff fb13 	bl	c00315e <uECC_vli_modMult_fast>
 c003b38:	f107 0214 	add.w	r2, r7, #20
 c003b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003b3e:	6879      	ldr	r1, [r7, #4]
 c003b40:	6878      	ldr	r0, [r7, #4]
 c003b42:	f7ff fb0c 	bl	c00315e <uECC_vli_modMult_fast>
 c003b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003b48:	1d1a      	adds	r2, r3, #4
 c003b4a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003b4e:	9300      	str	r3, [sp, #0]
 c003b50:	4613      	mov	r3, r2
 c003b52:	68ba      	ldr	r2, [r7, #8]
 c003b54:	6839      	ldr	r1, [r7, #0]
 c003b56:	6838      	ldr	r0, [r7, #0]
 c003b58:	f7ff f98d 	bl	c002e76 <uECC_vli_modSub>
 c003b5c:	f107 0314 	add.w	r3, r7, #20
 c003b60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 c003b62:	6839      	ldr	r1, [r7, #0]
 c003b64:	4618      	mov	r0, r3
 c003b66:	f7ff fb16 	bl	c003196 <uECC_vli_modSquare_fast>
 c003b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003b6c:	1d1a      	adds	r2, r3, #4
 c003b6e:	f107 0114 	add.w	r1, r7, #20
 c003b72:	f107 0014 	add.w	r0, r7, #20
 c003b76:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003b7a:	9300      	str	r3, [sp, #0]
 c003b7c:	4613      	mov	r3, r2
 c003b7e:	68fa      	ldr	r2, [r7, #12]
 c003b80:	f7ff f979 	bl	c002e76 <uECC_vli_modSub>
 c003b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003b86:	1d1a      	adds	r2, r3, #4
 c003b88:	f107 0114 	add.w	r1, r7, #20
 c003b8c:	f107 0014 	add.w	r0, r7, #20
 c003b90:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003b94:	9300      	str	r3, [sp, #0]
 c003b96:	4613      	mov	r3, r2
 c003b98:	687a      	ldr	r2, [r7, #4]
 c003b9a:	f7ff f96c 	bl	c002e76 <uECC_vli_modSub>
 c003b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003ba0:	1d1a      	adds	r2, r3, #4
 c003ba2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003ba6:	9300      	str	r3, [sp, #0]
 c003ba8:	4613      	mov	r3, r2
 c003baa:	68fa      	ldr	r2, [r7, #12]
 c003bac:	6879      	ldr	r1, [r7, #4]
 c003bae:	6878      	ldr	r0, [r7, #4]
 c003bb0:	f7ff f961 	bl	c002e76 <uECC_vli_modSub>
 c003bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003bb6:	687a      	ldr	r2, [r7, #4]
 c003bb8:	68b9      	ldr	r1, [r7, #8]
 c003bba:	68b8      	ldr	r0, [r7, #8]
 c003bbc:	f7ff facf 	bl	c00315e <uECC_vli_modMult_fast>
 c003bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003bc2:	1d19      	adds	r1, r3, #4
 c003bc4:	f107 0214 	add.w	r2, r7, #20
 c003bc8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003bcc:	9300      	str	r3, [sp, #0]
 c003bce:	460b      	mov	r3, r1
 c003bd0:	68f9      	ldr	r1, [r7, #12]
 c003bd2:	6878      	ldr	r0, [r7, #4]
 c003bd4:	f7ff f94f 	bl	c002e76 <uECC_vli_modSub>
 c003bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003bda:	687a      	ldr	r2, [r7, #4]
 c003bdc:	6839      	ldr	r1, [r7, #0]
 c003bde:	6838      	ldr	r0, [r7, #0]
 c003be0:	f7ff fabd 	bl	c00315e <uECC_vli_modMult_fast>
 c003be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003be6:	1d1a      	adds	r2, r3, #4
 c003be8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003bec:	9300      	str	r3, [sp, #0]
 c003bee:	4613      	mov	r3, r2
 c003bf0:	68ba      	ldr	r2, [r7, #8]
 c003bf2:	6839      	ldr	r1, [r7, #0]
 c003bf4:	6838      	ldr	r0, [r7, #0]
 c003bf6:	f7ff f93e 	bl	c002e76 <uECC_vli_modSub>
 c003bfa:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 c003bfe:	f107 0314 	add.w	r3, r7, #20
 c003c02:	4619      	mov	r1, r3
 c003c04:	6878      	ldr	r0, [r7, #4]
 c003c06:	f7ff f81f 	bl	c002c48 <uECC_vli_set>
 c003c0a:	bf00      	nop
 c003c0c:	3738      	adds	r7, #56	; 0x38
 c003c0e:	46bd      	mov	sp, r7
 c003c10:	bd80      	pop	{r7, pc}

0c003c12 <XYcZ_addC>:
 c003c12:	b590      	push	{r4, r7, lr}
 c003c14:	b0a1      	sub	sp, #132	; 0x84
 c003c16:	af02      	add	r7, sp, #8
 c003c18:	60f8      	str	r0, [r7, #12]
 c003c1a:	60b9      	str	r1, [r7, #8]
 c003c1c:	607a      	str	r2, [r7, #4]
 c003c1e:	603b      	str	r3, [r7, #0]
 c003c20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c003c24:	781b      	ldrb	r3, [r3, #0]
 c003c26:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 c003c2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c003c2e:	1d1a      	adds	r2, r3, #4
 c003c30:	f107 0054 	add.w	r0, r7, #84	; 0x54
 c003c34:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 c003c38:	9300      	str	r3, [sp, #0]
 c003c3a:	4613      	mov	r3, r2
 c003c3c:	68fa      	ldr	r2, [r7, #12]
 c003c3e:	6879      	ldr	r1, [r7, #4]
 c003c40:	f7ff f919 	bl	c002e76 <uECC_vli_modSub>
 c003c44:	f107 0154 	add.w	r1, r7, #84	; 0x54
 c003c48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 c003c4c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 c003c50:	4618      	mov	r0, r3
 c003c52:	f7ff faa0 	bl	c003196 <uECC_vli_modSquare_fast>
 c003c56:	f107 0254 	add.w	r2, r7, #84	; 0x54
 c003c5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c003c5e:	68f9      	ldr	r1, [r7, #12]
 c003c60:	68f8      	ldr	r0, [r7, #12]
 c003c62:	f7ff fa7c 	bl	c00315e <uECC_vli_modMult_fast>
 c003c66:	f107 0254 	add.w	r2, r7, #84	; 0x54
 c003c6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c003c6e:	6879      	ldr	r1, [r7, #4]
 c003c70:	6878      	ldr	r0, [r7, #4]
 c003c72:	f7ff fa74 	bl	c00315e <uECC_vli_modMult_fast>
 c003c76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c003c7a:	1d1a      	adds	r2, r3, #4
 c003c7c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 c003c80:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 c003c84:	9300      	str	r3, [sp, #0]
 c003c86:	4613      	mov	r3, r2
 c003c88:	68ba      	ldr	r2, [r7, #8]
 c003c8a:	6839      	ldr	r1, [r7, #0]
 c003c8c:	f7ff f8cc 	bl	c002e28 <uECC_vli_modAdd>
 c003c90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c003c94:	1d1a      	adds	r2, r3, #4
 c003c96:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 c003c9a:	9300      	str	r3, [sp, #0]
 c003c9c:	4613      	mov	r3, r2
 c003c9e:	68ba      	ldr	r2, [r7, #8]
 c003ca0:	6839      	ldr	r1, [r7, #0]
 c003ca2:	6838      	ldr	r0, [r7, #0]
 c003ca4:	f7ff f8e7 	bl	c002e76 <uECC_vli_modSub>
 c003ca8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c003cac:	1d1a      	adds	r2, r3, #4
 c003cae:	f107 0034 	add.w	r0, r7, #52	; 0x34
 c003cb2:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 c003cb6:	9300      	str	r3, [sp, #0]
 c003cb8:	4613      	mov	r3, r2
 c003cba:	68fa      	ldr	r2, [r7, #12]
 c003cbc:	6879      	ldr	r1, [r7, #4]
 c003cbe:	f7ff f8da 	bl	c002e76 <uECC_vli_modSub>
 c003cc2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 c003cc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c003cca:	68b9      	ldr	r1, [r7, #8]
 c003ccc:	68b8      	ldr	r0, [r7, #8]
 c003cce:	f7ff fa46 	bl	c00315e <uECC_vli_modMult_fast>
 c003cd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c003cd6:	1d1a      	adds	r2, r3, #4
 c003cd8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 c003cdc:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 c003ce0:	9300      	str	r3, [sp, #0]
 c003ce2:	4613      	mov	r3, r2
 c003ce4:	687a      	ldr	r2, [r7, #4]
 c003ce6:	68f9      	ldr	r1, [r7, #12]
 c003ce8:	f7ff f89e 	bl	c002e28 <uECC_vli_modAdd>
 c003cec:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 c003cf0:	6839      	ldr	r1, [r7, #0]
 c003cf2:	6878      	ldr	r0, [r7, #4]
 c003cf4:	f7ff fa4f 	bl	c003196 <uECC_vli_modSquare_fast>
 c003cf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c003cfc:	1d19      	adds	r1, r3, #4
 c003cfe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 c003d02:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 c003d06:	9300      	str	r3, [sp, #0]
 c003d08:	460b      	mov	r3, r1
 c003d0a:	6879      	ldr	r1, [r7, #4]
 c003d0c:	6878      	ldr	r0, [r7, #4]
 c003d0e:	f7ff f8b2 	bl	c002e76 <uECC_vli_modSub>
 c003d12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c003d16:	1d1a      	adds	r2, r3, #4
 c003d18:	f107 0014 	add.w	r0, r7, #20
 c003d1c:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 c003d20:	9300      	str	r3, [sp, #0]
 c003d22:	4613      	mov	r3, r2
 c003d24:	687a      	ldr	r2, [r7, #4]
 c003d26:	68f9      	ldr	r1, [r7, #12]
 c003d28:	f7ff f8a5 	bl	c002e76 <uECC_vli_modSub>
 c003d2c:	f107 0214 	add.w	r2, r7, #20
 c003d30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c003d34:	6839      	ldr	r1, [r7, #0]
 c003d36:	6838      	ldr	r0, [r7, #0]
 c003d38:	f7ff fa11 	bl	c00315e <uECC_vli_modMult_fast>
 c003d3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c003d40:	1d1a      	adds	r2, r3, #4
 c003d42:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 c003d46:	9300      	str	r3, [sp, #0]
 c003d48:	4613      	mov	r3, r2
 c003d4a:	68ba      	ldr	r2, [r7, #8]
 c003d4c:	6839      	ldr	r1, [r7, #0]
 c003d4e:	6838      	ldr	r0, [r7, #0]
 c003d50:	f7ff f891 	bl	c002e76 <uECC_vli_modSub>
 c003d54:	f107 0154 	add.w	r1, r7, #84	; 0x54
 c003d58:	f107 0314 	add.w	r3, r7, #20
 c003d5c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 c003d60:	4618      	mov	r0, r3
 c003d62:	f7ff fa18 	bl	c003196 <uECC_vli_modSquare_fast>
 c003d66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c003d6a:	1d1c      	adds	r4, r3, #4
 c003d6c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 c003d70:	f107 0114 	add.w	r1, r7, #20
 c003d74:	f107 0014 	add.w	r0, r7, #20
 c003d78:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 c003d7c:	9300      	str	r3, [sp, #0]
 c003d7e:	4623      	mov	r3, r4
 c003d80:	f7ff f879 	bl	c002e76 <uECC_vli_modSub>
 c003d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c003d88:	1d1a      	adds	r2, r3, #4
 c003d8a:	f107 0114 	add.w	r1, r7, #20
 c003d8e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 c003d92:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 c003d96:	9300      	str	r3, [sp, #0]
 c003d98:	4613      	mov	r3, r2
 c003d9a:	68fa      	ldr	r2, [r7, #12]
 c003d9c:	f7ff f86b 	bl	c002e76 <uECC_vli_modSub>
 c003da0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 c003da4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 c003da8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 c003dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c003db0:	f7ff f9d5 	bl	c00315e <uECC_vli_modMult_fast>
 c003db4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c003db8:	1d1a      	adds	r2, r3, #4
 c003dba:	f107 0134 	add.w	r1, r7, #52	; 0x34
 c003dbe:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 c003dc2:	9300      	str	r3, [sp, #0]
 c003dc4:	4613      	mov	r3, r2
 c003dc6:	68ba      	ldr	r2, [r7, #8]
 c003dc8:	68b8      	ldr	r0, [r7, #8]
 c003dca:	f7ff f854 	bl	c002e76 <uECC_vli_modSub>
 c003dce:	f997 2077 	ldrsb.w	r2, [r7, #119]	; 0x77
 c003dd2:	f107 0314 	add.w	r3, r7, #20
 c003dd6:	4619      	mov	r1, r3
 c003dd8:	68f8      	ldr	r0, [r7, #12]
 c003dda:	f7fe ff35 	bl	c002c48 <uECC_vli_set>
 c003dde:	bf00      	nop
 c003de0:	377c      	adds	r7, #124	; 0x7c
 c003de2:	46bd      	mov	sp, r7
 c003de4:	bd90      	pop	{r4, r7, pc}

0c003de6 <EccPoint_mult>:
 c003de6:	b590      	push	{r4, r7, lr}
 c003de8:	b0b1      	sub	sp, #196	; 0xc4
 c003dea:	af02      	add	r7, sp, #8
 c003dec:	60f8      	str	r0, [r7, #12]
 c003dee:	60b9      	str	r1, [r7, #8]
 c003df0:	607a      	str	r2, [r7, #4]
 c003df2:	603b      	str	r3, [r7, #0]
 c003df4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c003df8:	781b      	ldrb	r3, [r3, #0]
 c003dfa:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 c003dfe:	f997 20b5 	ldrsb.w	r2, [r7, #181]	; 0xb5
 c003e02:	f107 0370 	add.w	r3, r7, #112	; 0x70
 c003e06:	3320      	adds	r3, #32
 c003e08:	68b9      	ldr	r1, [r7, #8]
 c003e0a:	4618      	mov	r0, r3
 c003e0c:	f7fe ff1c 	bl	c002c48 <uECC_vli_set>
 c003e10:	f997 30b5 	ldrsb.w	r3, [r7, #181]	; 0xb5
 c003e14:	009b      	lsls	r3, r3, #2
 c003e16:	68ba      	ldr	r2, [r7, #8]
 c003e18:	18d1      	adds	r1, r2, r3
 c003e1a:	f997 20b5 	ldrsb.w	r2, [r7, #181]	; 0xb5
 c003e1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 c003e22:	3320      	adds	r3, #32
 c003e24:	4618      	mov	r0, r3
 c003e26:	f7fe ff0f 	bl	c002c48 <uECC_vli_set>
 c003e2a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 c003e2e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 c003e32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 c003e36:	f103 0120 	add.w	r1, r3, #32
 c003e3a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 c003e3e:	f103 0020 	add.w	r0, r3, #32
 c003e42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c003e46:	9301      	str	r3, [sp, #4]
 c003e48:	683b      	ldr	r3, [r7, #0]
 c003e4a:	9300      	str	r3, [sp, #0]
 c003e4c:	4623      	mov	r3, r4
 c003e4e:	f7ff fe03 	bl	c003a58 <XYcZ_initial_double>
 c003e52:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 c003e56:	3b02      	subs	r3, #2
 c003e58:	b29b      	uxth	r3, r3
 c003e5a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 c003e5e:	e059      	b.n	c003f14 <EccPoint_mult+0x12e>
 c003e60:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 c003e64:	4619      	mov	r1, r3
 c003e66:	6878      	ldr	r0, [r7, #4]
 c003e68:	f7fe fe74 	bl	c002b54 <uECC_vli_testBit>
 c003e6c:	4603      	mov	r3, r0
 c003e6e:	2b00      	cmp	r3, #0
 c003e70:	bf0c      	ite	eq
 c003e72:	2301      	moveq	r3, #1
 c003e74:	2300      	movne	r3, #0
 c003e76:	b2db      	uxtb	r3, r3
 c003e78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 c003e7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c003e80:	f1c3 0301 	rsb	r3, r3, #1
 c003e84:	f107 0270 	add.w	r2, r7, #112	; 0x70
 c003e88:	015b      	lsls	r3, r3, #5
 c003e8a:	18d0      	adds	r0, r2, r3
 c003e8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c003e90:	f1c3 0301 	rsb	r3, r3, #1
 c003e94:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c003e98:	015b      	lsls	r3, r3, #5
 c003e9a:	18d1      	adds	r1, r2, r3
 c003e9c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 c003ea0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c003ea4:	015b      	lsls	r3, r3, #5
 c003ea6:	18d4      	adds	r4, r2, r3
 c003ea8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c003eac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c003eb0:	015b      	lsls	r3, r3, #5
 c003eb2:	441a      	add	r2, r3
 c003eb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c003eb8:	9300      	str	r3, [sp, #0]
 c003eba:	4613      	mov	r3, r2
 c003ebc:	4622      	mov	r2, r4
 c003ebe:	f7ff fea8 	bl	c003c12 <XYcZ_addC>
 c003ec2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 c003ec6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c003eca:	015b      	lsls	r3, r3, #5
 c003ecc:	18d0      	adds	r0, r2, r3
 c003ece:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c003ed2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c003ed6:	015b      	lsls	r3, r3, #5
 c003ed8:	18d1      	adds	r1, r2, r3
 c003eda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c003ede:	f1c3 0301 	rsb	r3, r3, #1
 c003ee2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 c003ee6:	015b      	lsls	r3, r3, #5
 c003ee8:	18d4      	adds	r4, r2, r3
 c003eea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c003eee:	f1c3 0301 	rsb	r3, r3, #1
 c003ef2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c003ef6:	015b      	lsls	r3, r3, #5
 c003ef8:	441a      	add	r2, r3
 c003efa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c003efe:	9300      	str	r3, [sp, #0]
 c003f00:	4613      	mov	r3, r2
 c003f02:	4622      	mov	r2, r4
 c003f04:	f7ff fdf2 	bl	c003aec <XYcZ_add>
 c003f08:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 c003f0c:	3b01      	subs	r3, #1
 c003f0e:	b29b      	uxth	r3, r3
 c003f10:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 c003f14:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 c003f18:	2b00      	cmp	r3, #0
 c003f1a:	dca1      	bgt.n	c003e60 <EccPoint_mult+0x7a>
 c003f1c:	2100      	movs	r1, #0
 c003f1e:	6878      	ldr	r0, [r7, #4]
 c003f20:	f7fe fe18 	bl	c002b54 <uECC_vli_testBit>
 c003f24:	4603      	mov	r3, r0
 c003f26:	2b00      	cmp	r3, #0
 c003f28:	bf0c      	ite	eq
 c003f2a:	2301      	moveq	r3, #1
 c003f2c:	2300      	movne	r3, #0
 c003f2e:	b2db      	uxtb	r3, r3
 c003f30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 c003f34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c003f38:	f1c3 0301 	rsb	r3, r3, #1
 c003f3c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 c003f40:	015b      	lsls	r3, r3, #5
 c003f42:	18d0      	adds	r0, r2, r3
 c003f44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c003f48:	f1c3 0301 	rsb	r3, r3, #1
 c003f4c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c003f50:	015b      	lsls	r3, r3, #5
 c003f52:	18d1      	adds	r1, r2, r3
 c003f54:	f107 0270 	add.w	r2, r7, #112	; 0x70
 c003f58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c003f5c:	015b      	lsls	r3, r3, #5
 c003f5e:	18d4      	adds	r4, r2, r3
 c003f60:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c003f64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c003f68:	015b      	lsls	r3, r3, #5
 c003f6a:	441a      	add	r2, r3
 c003f6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c003f70:	9300      	str	r3, [sp, #0]
 c003f72:	4613      	mov	r3, r2
 c003f74:	4622      	mov	r2, r4
 c003f76:	f7ff fe4c 	bl	c003c12 <XYcZ_addC>
 c003f7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c003f7e:	1d1c      	adds	r4, r3, #4
 c003f80:	f107 0270 	add.w	r2, r7, #112	; 0x70
 c003f84:	f107 0370 	add.w	r3, r7, #112	; 0x70
 c003f88:	f103 0120 	add.w	r1, r3, #32
 c003f8c:	f107 0010 	add.w	r0, r7, #16
 c003f90:	f997 30b5 	ldrsb.w	r3, [r7, #181]	; 0xb5
 c003f94:	9300      	str	r3, [sp, #0]
 c003f96:	4623      	mov	r3, r4
 c003f98:	f7fe ff6d 	bl	c002e76 <uECC_vli_modSub>
 c003f9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c003fa0:	f1c3 0301 	rsb	r3, r3, #1
 c003fa4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c003fa8:	015b      	lsls	r3, r3, #5
 c003faa:	441a      	add	r2, r3
 c003fac:	f107 0110 	add.w	r1, r7, #16
 c003fb0:	f107 0010 	add.w	r0, r7, #16
 c003fb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c003fb8:	f7ff f8d1 	bl	c00315e <uECC_vli_modMult_fast>
 c003fbc:	f107 0110 	add.w	r1, r7, #16
 c003fc0:	f107 0010 	add.w	r0, r7, #16
 c003fc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c003fc8:	68ba      	ldr	r2, [r7, #8]
 c003fca:	f7ff f8c8 	bl	c00315e <uECC_vli_modMult_fast>
 c003fce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c003fd2:	1d1a      	adds	r2, r3, #4
 c003fd4:	f997 30b5 	ldrsb.w	r3, [r7, #181]	; 0xb5
 c003fd8:	f107 0110 	add.w	r1, r7, #16
 c003fdc:	f107 0010 	add.w	r0, r7, #16
 c003fe0:	f7ff f921 	bl	c003226 <uECC_vli_modInv>
 c003fe4:	f997 30b5 	ldrsb.w	r3, [r7, #181]	; 0xb5
 c003fe8:	009b      	lsls	r3, r3, #2
 c003fea:	68ba      	ldr	r2, [r7, #8]
 c003fec:	441a      	add	r2, r3
 c003fee:	f107 0110 	add.w	r1, r7, #16
 c003ff2:	f107 0010 	add.w	r0, r7, #16
 c003ff6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c003ffa:	f7ff f8b0 	bl	c00315e <uECC_vli_modMult_fast>
 c003ffe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c004002:	f1c3 0301 	rsb	r3, r3, #1
 c004006:	f107 0270 	add.w	r2, r7, #112	; 0x70
 c00400a:	015b      	lsls	r3, r3, #5
 c00400c:	441a      	add	r2, r3
 c00400e:	f107 0110 	add.w	r1, r7, #16
 c004012:	f107 0010 	add.w	r0, r7, #16
 c004016:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c00401a:	f7ff f8a0 	bl	c00315e <uECC_vli_modMult_fast>
 c00401e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 c004022:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c004026:	015b      	lsls	r3, r3, #5
 c004028:	18d0      	adds	r0, r2, r3
 c00402a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c00402e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c004032:	015b      	lsls	r3, r3, #5
 c004034:	18d1      	adds	r1, r2, r3
 c004036:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c00403a:	f1c3 0301 	rsb	r3, r3, #1
 c00403e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 c004042:	015b      	lsls	r3, r3, #5
 c004044:	18d4      	adds	r4, r2, r3
 c004046:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c00404a:	f1c3 0301 	rsb	r3, r3, #1
 c00404e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c004052:	015b      	lsls	r3, r3, #5
 c004054:	441a      	add	r2, r3
 c004056:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c00405a:	9300      	str	r3, [sp, #0]
 c00405c:	4613      	mov	r3, r2
 c00405e:	4622      	mov	r2, r4
 c004060:	f7ff fd44 	bl	c003aec <XYcZ_add>
 c004064:	f107 0210 	add.w	r2, r7, #16
 c004068:	f107 0130 	add.w	r1, r7, #48	; 0x30
 c00406c:	f107 0070 	add.w	r0, r7, #112	; 0x70
 c004070:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c004074:	f7ff fcc8 	bl	c003a08 <apply_z>
 c004078:	f997 20b5 	ldrsb.w	r2, [r7, #181]	; 0xb5
 c00407c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 c004080:	4619      	mov	r1, r3
 c004082:	68f8      	ldr	r0, [r7, #12]
 c004084:	f7fe fde0 	bl	c002c48 <uECC_vli_set>
 c004088:	f997 30b5 	ldrsb.w	r3, [r7, #181]	; 0xb5
 c00408c:	009b      	lsls	r3, r3, #2
 c00408e:	68fa      	ldr	r2, [r7, #12]
 c004090:	4413      	add	r3, r2
 c004092:	f997 20b5 	ldrsb.w	r2, [r7, #181]	; 0xb5
 c004096:	f107 0130 	add.w	r1, r7, #48	; 0x30
 c00409a:	4618      	mov	r0, r3
 c00409c:	f7fe fdd4 	bl	c002c48 <uECC_vli_set>
 c0040a0:	bf00      	nop
 c0040a2:	37bc      	adds	r7, #188	; 0xbc
 c0040a4:	46bd      	mov	sp, r7
 c0040a6:	bd90      	pop	{r4, r7, pc}

0c0040a8 <regularize_k>:
 c0040a8:	b580      	push	{r7, lr}
 c0040aa:	b086      	sub	sp, #24
 c0040ac:	af00      	add	r7, sp, #0
 c0040ae:	60f8      	str	r0, [r7, #12]
 c0040b0:	60b9      	str	r1, [r7, #8]
 c0040b2:	607a      	str	r2, [r7, #4]
 c0040b4:	603b      	str	r3, [r7, #0]
 c0040b6:	683b      	ldr	r3, [r7, #0]
 c0040b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c0040bc:	331f      	adds	r3, #31
 c0040be:	2b00      	cmp	r3, #0
 c0040c0:	da00      	bge.n	c0040c4 <regularize_k+0x1c>
 c0040c2:	331f      	adds	r3, #31
 c0040c4:	115b      	asrs	r3, r3, #5
 c0040c6:	75fb      	strb	r3, [r7, #23]
 c0040c8:	683b      	ldr	r3, [r7, #0]
 c0040ca:	885b      	ldrh	r3, [r3, #2]
 c0040cc:	82bb      	strh	r3, [r7, #20]
 c0040ce:	683b      	ldr	r3, [r7, #0]
 c0040d0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 c0040d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c0040d8:	68f9      	ldr	r1, [r7, #12]
 c0040da:	68b8      	ldr	r0, [r7, #8]
 c0040dc:	f7fe fc08 	bl	c0028f0 <uECC_vli_add>
 c0040e0:	4603      	mov	r3, r0
 c0040e2:	2b00      	cmp	r3, #0
 c0040e4:	d10f      	bne.n	c004106 <regularize_k+0x5e>
 c0040e6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 c0040ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c0040ee:	015b      	lsls	r3, r3, #5
 c0040f0:	429a      	cmp	r2, r3
 c0040f2:	da0a      	bge.n	c00410a <regularize_k+0x62>
 c0040f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 c0040f8:	4619      	mov	r1, r3
 c0040fa:	68b8      	ldr	r0, [r7, #8]
 c0040fc:	f7fe fd2a 	bl	c002b54 <uECC_vli_testBit>
 c004100:	4603      	mov	r3, r0
 c004102:	2b00      	cmp	r3, #0
 c004104:	d001      	beq.n	c00410a <regularize_k+0x62>
 c004106:	2301      	movs	r3, #1
 c004108:	e000      	b.n	c00410c <regularize_k+0x64>
 c00410a:	2300      	movs	r3, #0
 c00410c:	613b      	str	r3, [r7, #16]
 c00410e:	683b      	ldr	r3, [r7, #0]
 c004110:	f103 0224 	add.w	r2, r3, #36	; 0x24
 c004114:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c004118:	68b9      	ldr	r1, [r7, #8]
 c00411a:	6878      	ldr	r0, [r7, #4]
 c00411c:	f7fe fbe8 	bl	c0028f0 <uECC_vli_add>
 c004120:	693b      	ldr	r3, [r7, #16]
 c004122:	4618      	mov	r0, r3
 c004124:	3718      	adds	r7, #24
 c004126:	46bd      	mov	sp, r7
 c004128:	bd80      	pop	{r7, pc}
	...

0c00412c <uECC_generate_random_int>:
 c00412c:	b580      	push	{r7, lr}
 c00412e:	b088      	sub	sp, #32
 c004130:	af00      	add	r7, sp, #0
 c004132:	60f8      	str	r0, [r7, #12]
 c004134:	60b9      	str	r1, [r7, #8]
 c004136:	4613      	mov	r3, r2
 c004138:	71fb      	strb	r3, [r7, #7]
 c00413a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00413e:	61bb      	str	r3, [r7, #24]
 c004140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c004144:	4619      	mov	r1, r3
 c004146:	68b8      	ldr	r0, [r7, #8]
 c004148:	f7fe fd44 	bl	c002bd4 <uECC_vli_numBits>
 c00414c:	4603      	mov	r3, r0
 c00414e:	82fb      	strh	r3, [r7, #22]
 c004150:	4b2a      	ldr	r3, [pc, #168]	; (c0041fc <uECC_generate_random_int+0xd0>)
 c004152:	681b      	ldr	r3, [r3, #0]
 c004154:	2b00      	cmp	r3, #0
 c004156:	d101      	bne.n	c00415c <uECC_generate_random_int+0x30>
 c004158:	2300      	movs	r3, #0
 c00415a:	e04b      	b.n	c0041f4 <uECC_generate_random_int+0xc8>
 c00415c:	2300      	movs	r3, #0
 c00415e:	61fb      	str	r3, [r7, #28]
 c004160:	e044      	b.n	c0041ec <uECC_generate_random_int+0xc0>
 c004162:	4b26      	ldr	r3, [pc, #152]	; (c0041fc <uECC_generate_random_int+0xd0>)
 c004164:	681b      	ldr	r3, [r3, #0]
 c004166:	f997 2007 	ldrsb.w	r2, [r7, #7]
 c00416a:	0092      	lsls	r2, r2, #2
 c00416c:	4611      	mov	r1, r2
 c00416e:	68f8      	ldr	r0, [r7, #12]
 c004170:	4798      	blx	r3
 c004172:	4603      	mov	r3, r0
 c004174:	2b00      	cmp	r3, #0
 c004176:	d101      	bne.n	c00417c <uECC_generate_random_int+0x50>
 c004178:	2300      	movs	r3, #0
 c00417a:	e03b      	b.n	c0041f4 <uECC_generate_random_int+0xc8>
 c00417c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c004180:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c004184:	3b01      	subs	r3, #1
 c004186:	009b      	lsls	r3, r3, #2
 c004188:	68fa      	ldr	r2, [r7, #12]
 c00418a:	4413      	add	r3, r2
 c00418c:	6819      	ldr	r1, [r3, #0]
 c00418e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c004192:	b29b      	uxth	r3, r3
 c004194:	015b      	lsls	r3, r3, #5
 c004196:	b29a      	uxth	r2, r3
 c004198:	8afb      	ldrh	r3, [r7, #22]
 c00419a:	1ad3      	subs	r3, r2, r3
 c00419c:	b29b      	uxth	r3, r3
 c00419e:	b21b      	sxth	r3, r3
 c0041a0:	461a      	mov	r2, r3
 c0041a2:	69bb      	ldr	r3, [r7, #24]
 c0041a4:	fa23 f202 	lsr.w	r2, r3, r2
 c0041a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0041ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c0041b0:	3b01      	subs	r3, #1
 c0041b2:	009b      	lsls	r3, r3, #2
 c0041b4:	68f8      	ldr	r0, [r7, #12]
 c0041b6:	4403      	add	r3, r0
 c0041b8:	400a      	ands	r2, r1
 c0041ba:	601a      	str	r2, [r3, #0]
 c0041bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0041c0:	4619      	mov	r1, r3
 c0041c2:	68f8      	ldr	r0, [r7, #12]
 c0041c4:	f7fe fc9c 	bl	c002b00 <uECC_vli_isZero>
 c0041c8:	4603      	mov	r3, r0
 c0041ca:	2b00      	cmp	r3, #0
 c0041cc:	d10b      	bne.n	c0041e6 <uECC_generate_random_int+0xba>
 c0041ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0041d2:	461a      	mov	r2, r3
 c0041d4:	68f9      	ldr	r1, [r7, #12]
 c0041d6:	68b8      	ldr	r0, [r7, #8]
 c0041d8:	f7fe fdcb 	bl	c002d72 <uECC_vli_cmp>
 c0041dc:	4603      	mov	r3, r0
 c0041de:	2b01      	cmp	r3, #1
 c0041e0:	d101      	bne.n	c0041e6 <uECC_generate_random_int+0xba>
 c0041e2:	2301      	movs	r3, #1
 c0041e4:	e006      	b.n	c0041f4 <uECC_generate_random_int+0xc8>
 c0041e6:	69fb      	ldr	r3, [r7, #28]
 c0041e8:	3301      	adds	r3, #1
 c0041ea:	61fb      	str	r3, [r7, #28]
 c0041ec:	69fb      	ldr	r3, [r7, #28]
 c0041ee:	2b3f      	cmp	r3, #63	; 0x3f
 c0041f0:	d9b7      	bls.n	c004162 <uECC_generate_random_int+0x36>
 c0041f2:	2300      	movs	r3, #0
 c0041f4:	4618      	mov	r0, r3
 c0041f6:	3720      	adds	r7, #32
 c0041f8:	46bd      	mov	sp, r7
 c0041fa:	bd80      	pop	{r7, pc}
 c0041fc:	30000068 	.word	0x30000068

0c004200 <uECC_vli_nativeToBytes>:
 c004200:	b480      	push	{r7}
 c004202:	b087      	sub	sp, #28
 c004204:	af00      	add	r7, sp, #0
 c004206:	60f8      	str	r0, [r7, #12]
 c004208:	60b9      	str	r1, [r7, #8]
 c00420a:	607a      	str	r2, [r7, #4]
 c00420c:	2300      	movs	r3, #0
 c00420e:	617b      	str	r3, [r7, #20]
 c004210:	e018      	b.n	c004244 <uECC_vli_nativeToBytes+0x44>
 c004212:	68bb      	ldr	r3, [r7, #8]
 c004214:	1e5a      	subs	r2, r3, #1
 c004216:	697b      	ldr	r3, [r7, #20]
 c004218:	1ad3      	subs	r3, r2, r3
 c00421a:	613b      	str	r3, [r7, #16]
 c00421c:	693b      	ldr	r3, [r7, #16]
 c00421e:	f023 0303 	bic.w	r3, r3, #3
 c004222:	687a      	ldr	r2, [r7, #4]
 c004224:	4413      	add	r3, r2
 c004226:	681a      	ldr	r2, [r3, #0]
 c004228:	693b      	ldr	r3, [r7, #16]
 c00422a:	f003 0303 	and.w	r3, r3, #3
 c00422e:	00db      	lsls	r3, r3, #3
 c004230:	fa22 f103 	lsr.w	r1, r2, r3
 c004234:	697b      	ldr	r3, [r7, #20]
 c004236:	68fa      	ldr	r2, [r7, #12]
 c004238:	4413      	add	r3, r2
 c00423a:	b2ca      	uxtb	r2, r1
 c00423c:	701a      	strb	r2, [r3, #0]
 c00423e:	697b      	ldr	r3, [r7, #20]
 c004240:	3301      	adds	r3, #1
 c004242:	617b      	str	r3, [r7, #20]
 c004244:	697a      	ldr	r2, [r7, #20]
 c004246:	68bb      	ldr	r3, [r7, #8]
 c004248:	429a      	cmp	r2, r3
 c00424a:	dbe2      	blt.n	c004212 <uECC_vli_nativeToBytes+0x12>
 c00424c:	bf00      	nop
 c00424e:	bf00      	nop
 c004250:	371c      	adds	r7, #28
 c004252:	46bd      	mov	sp, r7
 c004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004258:	4770      	bx	lr

0c00425a <uECC_vli_bytesToNative>:
 c00425a:	b580      	push	{r7, lr}
 c00425c:	b086      	sub	sp, #24
 c00425e:	af00      	add	r7, sp, #0
 c004260:	60f8      	str	r0, [r7, #12]
 c004262:	60b9      	str	r1, [r7, #8]
 c004264:	607a      	str	r2, [r7, #4]
 c004266:	687b      	ldr	r3, [r7, #4]
 c004268:	3303      	adds	r3, #3
 c00426a:	2b00      	cmp	r3, #0
 c00426c:	da00      	bge.n	c004270 <uECC_vli_bytesToNative+0x16>
 c00426e:	3303      	adds	r3, #3
 c004270:	109b      	asrs	r3, r3, #2
 c004272:	b25b      	sxtb	r3, r3
 c004274:	4619      	mov	r1, r3
 c004276:	68f8      	ldr	r0, [r7, #12]
 c004278:	f7fe fc21 	bl	c002abe <uECC_vli_clear>
 c00427c:	2300      	movs	r3, #0
 c00427e:	617b      	str	r3, [r7, #20]
 c004280:	e01e      	b.n	c0042c0 <uECC_vli_bytesToNative+0x66>
 c004282:	687b      	ldr	r3, [r7, #4]
 c004284:	1e5a      	subs	r2, r3, #1
 c004286:	697b      	ldr	r3, [r7, #20]
 c004288:	1ad3      	subs	r3, r2, r3
 c00428a:	613b      	str	r3, [r7, #16]
 c00428c:	693b      	ldr	r3, [r7, #16]
 c00428e:	f023 0303 	bic.w	r3, r3, #3
 c004292:	68fa      	ldr	r2, [r7, #12]
 c004294:	4413      	add	r3, r2
 c004296:	6819      	ldr	r1, [r3, #0]
 c004298:	697b      	ldr	r3, [r7, #20]
 c00429a:	68ba      	ldr	r2, [r7, #8]
 c00429c:	4413      	add	r3, r2
 c00429e:	781b      	ldrb	r3, [r3, #0]
 c0042a0:	461a      	mov	r2, r3
 c0042a2:	693b      	ldr	r3, [r7, #16]
 c0042a4:	f003 0303 	and.w	r3, r3, #3
 c0042a8:	00db      	lsls	r3, r3, #3
 c0042aa:	409a      	lsls	r2, r3
 c0042ac:	693b      	ldr	r3, [r7, #16]
 c0042ae:	f023 0303 	bic.w	r3, r3, #3
 c0042b2:	68f8      	ldr	r0, [r7, #12]
 c0042b4:	4403      	add	r3, r0
 c0042b6:	430a      	orrs	r2, r1
 c0042b8:	601a      	str	r2, [r3, #0]
 c0042ba:	697b      	ldr	r3, [r7, #20]
 c0042bc:	3301      	adds	r3, #1
 c0042be:	617b      	str	r3, [r7, #20]
 c0042c0:	697a      	ldr	r2, [r7, #20]
 c0042c2:	687b      	ldr	r3, [r7, #4]
 c0042c4:	429a      	cmp	r2, r3
 c0042c6:	dbdc      	blt.n	c004282 <uECC_vli_bytesToNative+0x28>
 c0042c8:	bf00      	nop
 c0042ca:	bf00      	nop
 c0042cc:	3718      	adds	r7, #24
 c0042ce:	46bd      	mov	sp, r7
 c0042d0:	bd80      	pop	{r7, pc}

0c0042d2 <bits2int>:
 c0042d2:	b580      	push	{r7, lr}
 c0042d4:	b08a      	sub	sp, #40	; 0x28
 c0042d6:	af00      	add	r7, sp, #0
 c0042d8:	60f8      	str	r0, [r7, #12]
 c0042da:	60b9      	str	r1, [r7, #8]
 c0042dc:	607a      	str	r2, [r7, #4]
 c0042de:	603b      	str	r3, [r7, #0]
 c0042e0:	683b      	ldr	r3, [r7, #0]
 c0042e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c0042e6:	3307      	adds	r3, #7
 c0042e8:	2b00      	cmp	r3, #0
 c0042ea:	da00      	bge.n	c0042ee <bits2int+0x1c>
 c0042ec:	3307      	adds	r3, #7
 c0042ee:	10db      	asrs	r3, r3, #3
 c0042f0:	61fb      	str	r3, [r7, #28]
 c0042f2:	683b      	ldr	r3, [r7, #0]
 c0042f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c0042f8:	331f      	adds	r3, #31
 c0042fa:	2b00      	cmp	r3, #0
 c0042fc:	da00      	bge.n	c004300 <bits2int+0x2e>
 c0042fe:	331f      	adds	r3, #31
 c004300:	115b      	asrs	r3, r3, #5
 c004302:	61bb      	str	r3, [r7, #24]
 c004304:	687a      	ldr	r2, [r7, #4]
 c004306:	69fb      	ldr	r3, [r7, #28]
 c004308:	429a      	cmp	r2, r3
 c00430a:	d901      	bls.n	c004310 <bits2int+0x3e>
 c00430c:	69fb      	ldr	r3, [r7, #28]
 c00430e:	607b      	str	r3, [r7, #4]
 c004310:	69bb      	ldr	r3, [r7, #24]
 c004312:	b25b      	sxtb	r3, r3
 c004314:	4619      	mov	r1, r3
 c004316:	68f8      	ldr	r0, [r7, #12]
 c004318:	f7fe fbd1 	bl	c002abe <uECC_vli_clear>
 c00431c:	687b      	ldr	r3, [r7, #4]
 c00431e:	461a      	mov	r2, r3
 c004320:	68b9      	ldr	r1, [r7, #8]
 c004322:	68f8      	ldr	r0, [r7, #12]
 c004324:	f7ff ff99 	bl	c00425a <uECC_vli_bytesToNative>
 c004328:	687b      	ldr	r3, [r7, #4]
 c00432a:	00db      	lsls	r3, r3, #3
 c00432c:	683a      	ldr	r2, [r7, #0]
 c00432e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 c004332:	4293      	cmp	r3, r2
 c004334:	d93a      	bls.n	c0043ac <bits2int+0xda>
 c004336:	687b      	ldr	r3, [r7, #4]
 c004338:	00db      	lsls	r3, r3, #3
 c00433a:	683a      	ldr	r2, [r7, #0]
 c00433c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 c004340:	1a9b      	subs	r3, r3, r2
 c004342:	617b      	str	r3, [r7, #20]
 c004344:	2300      	movs	r3, #0
 c004346:	627b      	str	r3, [r7, #36]	; 0x24
 c004348:	69bb      	ldr	r3, [r7, #24]
 c00434a:	009b      	lsls	r3, r3, #2
 c00434c:	68fa      	ldr	r2, [r7, #12]
 c00434e:	4413      	add	r3, r2
 c004350:	623b      	str	r3, [r7, #32]
 c004352:	e010      	b.n	c004376 <bits2int+0xa4>
 c004354:	6a3b      	ldr	r3, [r7, #32]
 c004356:	681b      	ldr	r3, [r3, #0]
 c004358:	613b      	str	r3, [r7, #16]
 c00435a:	693a      	ldr	r2, [r7, #16]
 c00435c:	697b      	ldr	r3, [r7, #20]
 c00435e:	40da      	lsrs	r2, r3
 c004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004362:	431a      	orrs	r2, r3
 c004364:	6a3b      	ldr	r3, [r7, #32]
 c004366:	601a      	str	r2, [r3, #0]
 c004368:	697b      	ldr	r3, [r7, #20]
 c00436a:	f1c3 0320 	rsb	r3, r3, #32
 c00436e:	693a      	ldr	r2, [r7, #16]
 c004370:	fa02 f303 	lsl.w	r3, r2, r3
 c004374:	627b      	str	r3, [r7, #36]	; 0x24
 c004376:	6a3b      	ldr	r3, [r7, #32]
 c004378:	1f1a      	subs	r2, r3, #4
 c00437a:	623a      	str	r2, [r7, #32]
 c00437c:	68fa      	ldr	r2, [r7, #12]
 c00437e:	429a      	cmp	r2, r3
 c004380:	d3e8      	bcc.n	c004354 <bits2int+0x82>
 c004382:	683b      	ldr	r3, [r7, #0]
 c004384:	3324      	adds	r3, #36	; 0x24
 c004386:	69ba      	ldr	r2, [r7, #24]
 c004388:	b252      	sxtb	r2, r2
 c00438a:	68f9      	ldr	r1, [r7, #12]
 c00438c:	4618      	mov	r0, r3
 c00438e:	f7fe fc82 	bl	c002c96 <uECC_vli_cmp_unsafe>
 c004392:	4603      	mov	r3, r0
 c004394:	2b01      	cmp	r3, #1
 c004396:	d00a      	beq.n	c0043ae <bits2int+0xdc>
 c004398:	683b      	ldr	r3, [r7, #0]
 c00439a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 c00439e:	69bb      	ldr	r3, [r7, #24]
 c0043a0:	b25b      	sxtb	r3, r3
 c0043a2:	68f9      	ldr	r1, [r7, #12]
 c0043a4:	68f8      	ldr	r0, [r7, #12]
 c0043a6:	f7fe faeb 	bl	c002980 <uECC_vli_sub>
 c0043aa:	e000      	b.n	c0043ae <bits2int+0xdc>
 c0043ac:	bf00      	nop
 c0043ae:	3728      	adds	r7, #40	; 0x28
 c0043b0:	46bd      	mov	sp, r7
 c0043b2:	bd80      	pop	{r7, pc}

0c0043b4 <uECC_sign_with_k_internal>:
 c0043b4:	b590      	push	{r4, r7, lr}
 c0043b6:	b0ad      	sub	sp, #180	; 0xb4
 c0043b8:	af02      	add	r7, sp, #8
 c0043ba:	60f8      	str	r0, [r7, #12]
 c0043bc:	60b9      	str	r1, [r7, #8]
 c0043be:	607a      	str	r2, [r7, #4]
 c0043c0:	603b      	str	r3, [r7, #0]
 c0043c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 c0043c6:	657b      	str	r3, [r7, #84]	; 0x54
 c0043c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 c0043cc:	65bb      	str	r3, [r7, #88]	; 0x58
 c0043ce:	2300      	movs	r3, #0
 c0043d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 c0043d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c0043d8:	781b      	ldrb	r3, [r3, #0]
 c0043da:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 c0043de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c0043e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c0043e6:	331f      	adds	r3, #31
 c0043e8:	2b00      	cmp	r3, #0
 c0043ea:	da00      	bge.n	c0043ee <uECC_sign_with_k_internal+0x3a>
 c0043ec:	331f      	adds	r3, #31
 c0043ee:	115b      	asrs	r3, r3, #5
 c0043f0:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 c0043f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c0043f8:	885b      	ldrh	r3, [r3, #2]
 c0043fa:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 c0043fe:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 c004402:	4619      	mov	r1, r3
 c004404:	6838      	ldr	r0, [r7, #0]
 c004406:	f7fe fb7b 	bl	c002b00 <uECC_vli_isZero>
 c00440a:	4603      	mov	r3, r0
 c00440c:	2b00      	cmp	r3, #0
 c00440e:	d10b      	bne.n	c004428 <uECC_sign_with_k_internal+0x74>
 c004410:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c004414:	3324      	adds	r3, #36	; 0x24
 c004416:	f997 20a2 	ldrsb.w	r2, [r7, #162]	; 0xa2
 c00441a:	6839      	ldr	r1, [r7, #0]
 c00441c:	4618      	mov	r0, r3
 c00441e:	f7fe fca8 	bl	c002d72 <uECC_vli_cmp>
 c004422:	4603      	mov	r3, r0
 c004424:	2b01      	cmp	r3, #1
 c004426:	d001      	beq.n	c00442c <uECC_sign_with_k_internal+0x78>
 c004428:	2300      	movs	r3, #0
 c00442a:	e128      	b.n	c00467e <uECC_sign_with_k_internal+0x2ca>
 c00442c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 c004430:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 c004434:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c004438:	6838      	ldr	r0, [r7, #0]
 c00443a:	f7ff fe35 	bl	c0040a8 <regularize_k>
 c00443e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 c004442:	4b91      	ldr	r3, [pc, #580]	; (c004688 <uECC_sign_with_k_internal+0x2d4>)
 c004444:	681b      	ldr	r3, [r3, #0]
 c004446:	2b00      	cmp	r3, #0
 c004448:	d01c      	beq.n	c004484 <uECC_sign_with_k_internal+0xd0>
 c00444a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 c00444e:	009b      	lsls	r3, r3, #2
 c004450:	33a8      	adds	r3, #168	; 0xa8
 c004452:	443b      	add	r3, r7
 c004454:	f853 0c54 	ldr.w	r0, [r3, #-84]
 c004458:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c00445c:	3304      	adds	r3, #4
 c00445e:	f997 20a3 	ldrsb.w	r2, [r7, #163]	; 0xa3
 c004462:	4619      	mov	r1, r3
 c004464:	f7ff fe62 	bl	c00412c <uECC_generate_random_int>
 c004468:	4603      	mov	r3, r0
 c00446a:	2b00      	cmp	r3, #0
 c00446c:	d101      	bne.n	c004472 <uECC_sign_with_k_internal+0xbe>
 c00446e:	2300      	movs	r3, #0
 c004470:	e105      	b.n	c00467e <uECC_sign_with_k_internal+0x2ca>
 c004472:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 c004476:	009b      	lsls	r3, r3, #2
 c004478:	33a8      	adds	r3, #168	; 0xa8
 c00447a:	443b      	add	r3, r7
 c00447c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 c004480:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 c004484:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c004488:	f103 0144 	add.w	r1, r3, #68	; 0x44
 c00448c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 c004490:	2b00      	cmp	r3, #0
 c004492:	bf0c      	ite	eq
 c004494:	2301      	moveq	r3, #1
 c004496:	2300      	movne	r3, #0
 c004498:	b2db      	uxtb	r3, r3
 c00449a:	009b      	lsls	r3, r3, #2
 c00449c:	33a8      	adds	r3, #168	; 0xa8
 c00449e:	443b      	add	r3, r7
 c0044a0:	f853 4c54 	ldr.w	r4, [r3, #-84]
 c0044a4:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 c0044a8:	3301      	adds	r3, #1
 c0044aa:	b29b      	uxth	r3, r3
 c0044ac:	b21b      	sxth	r3, r3
 c0044ae:	f107 0014 	add.w	r0, r7, #20
 c0044b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 c0044b6:	9201      	str	r2, [sp, #4]
 c0044b8:	9300      	str	r3, [sp, #0]
 c0044ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 c0044be:	4622      	mov	r2, r4
 c0044c0:	f7ff fc91 	bl	c003de6 <EccPoint_mult>
 c0044c4:	f997 20a3 	ldrsb.w	r2, [r7, #163]	; 0xa3
 c0044c8:	f107 0314 	add.w	r3, r7, #20
 c0044cc:	4611      	mov	r1, r2
 c0044ce:	4618      	mov	r0, r3
 c0044d0:	f7fe fb16 	bl	c002b00 <uECC_vli_isZero>
 c0044d4:	4603      	mov	r3, r0
 c0044d6:	2b00      	cmp	r3, #0
 c0044d8:	d001      	beq.n	c0044de <uECC_sign_with_k_internal+0x12a>
 c0044da:	2300      	movs	r3, #0
 c0044dc:	e0cf      	b.n	c00467e <uECC_sign_with_k_internal+0x2ca>
 c0044de:	4b6a      	ldr	r3, [pc, #424]	; (c004688 <uECC_sign_with_k_internal+0x2d4>)
 c0044e0:	681b      	ldr	r3, [r3, #0]
 c0044e2:	2b00      	cmp	r3, #0
 c0044e4:	d10a      	bne.n	c0044fc <uECC_sign_with_k_internal+0x148>
 c0044e6:	f997 20a2 	ldrsb.w	r2, [r7, #162]	; 0xa2
 c0044ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 c0044ee:	4611      	mov	r1, r2
 c0044f0:	4618      	mov	r0, r3
 c0044f2:	f7fe fae4 	bl	c002abe <uECC_vli_clear>
 c0044f6:	2301      	movs	r3, #1
 c0044f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 c0044fa:	e00f      	b.n	c00451c <uECC_sign_with_k_internal+0x168>
 c0044fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c004500:	f103 0124 	add.w	r1, r3, #36	; 0x24
 c004504:	f997 20a2 	ldrsb.w	r2, [r7, #162]	; 0xa2
 c004508:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 c00450c:	4618      	mov	r0, r3
 c00450e:	f7ff fe0d 	bl	c00412c <uECC_generate_random_int>
 c004512:	4603      	mov	r3, r0
 c004514:	2b00      	cmp	r3, #0
 c004516:	d101      	bne.n	c00451c <uECC_sign_with_k_internal+0x168>
 c004518:	2300      	movs	r3, #0
 c00451a:	e0b0      	b.n	c00467e <uECC_sign_with_k_internal+0x2ca>
 c00451c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c004520:	f103 0124 	add.w	r1, r3, #36	; 0x24
 c004524:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 c004528:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 c00452c:	9300      	str	r3, [sp, #0]
 c00452e:	460b      	mov	r3, r1
 c004530:	6839      	ldr	r1, [r7, #0]
 c004532:	6838      	ldr	r0, [r7, #0]
 c004534:	f7fe fdf8 	bl	c003128 <uECC_vli_modMult>
 c004538:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c00453c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 c004540:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 c004544:	6839      	ldr	r1, [r7, #0]
 c004546:	6838      	ldr	r0, [r7, #0]
 c004548:	f7fe fe6d 	bl	c003226 <uECC_vli_modInv>
 c00454c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c004550:	f103 0124 	add.w	r1, r3, #36	; 0x24
 c004554:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 c004558:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 c00455c:	9300      	str	r3, [sp, #0]
 c00455e:	460b      	mov	r3, r1
 c004560:	6839      	ldr	r1, [r7, #0]
 c004562:	6838      	ldr	r0, [r7, #0]
 c004564:	f7fe fde0 	bl	c003128 <uECC_vli_modMult>
 c004568:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c00456c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c004570:	4619      	mov	r1, r3
 c004572:	f107 0314 	add.w	r3, r7, #20
 c004576:	461a      	mov	r2, r3
 c004578:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 c00457c:	f7ff fe40 	bl	c004200 <uECC_vli_nativeToBytes>
 c004580:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c004584:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c004588:	3307      	adds	r3, #7
 c00458a:	2b00      	cmp	r3, #0
 c00458c:	da00      	bge.n	c004590 <uECC_sign_with_k_internal+0x1dc>
 c00458e:	3307      	adds	r3, #7
 c004590:	10db      	asrs	r3, r3, #3
 c004592:	461a      	mov	r2, r3
 c004594:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 c004598:	68f9      	ldr	r1, [r7, #12]
 c00459a:	4618      	mov	r0, r3
 c00459c:	f7ff fe5d 	bl	c00425a <uECC_vli_bytesToNative>
 c0045a0:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 c0045a4:	3b01      	subs	r3, #1
 c0045a6:	009b      	lsls	r3, r3, #2
 c0045a8:	33a8      	adds	r3, #168	; 0xa8
 c0045aa:	443b      	add	r3, r7
 c0045ac:	2200      	movs	r2, #0
 c0045ae:	f843 2c4c 	str.w	r2, [r3, #-76]
 c0045b2:	f997 20a3 	ldrsb.w	r2, [r7, #163]	; 0xa3
 c0045b6:	f107 0114 	add.w	r1, r7, #20
 c0045ba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 c0045be:	4618      	mov	r0, r3
 c0045c0:	f7fe fb42 	bl	c002c48 <uECC_vli_set>
 c0045c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c0045c8:	f103 0424 	add.w	r4, r3, #36	; 0x24
 c0045cc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 c0045d0:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 c0045d4:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 c0045d8:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 c0045dc:	9300      	str	r3, [sp, #0]
 c0045de:	4623      	mov	r3, r4
 c0045e0:	f7fe fda2 	bl	c003128 <uECC_vli_modMult>
 c0045e4:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 c0045e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c0045ec:	687a      	ldr	r2, [r7, #4]
 c0045ee:	68b9      	ldr	r1, [r7, #8]
 c0045f0:	f7ff fe6f 	bl	c0042d2 <bits2int>
 c0045f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c0045f8:	f103 0424 	add.w	r4, r3, #36	; 0x24
 c0045fc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 c004600:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 c004604:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 c004608:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 c00460c:	9300      	str	r3, [sp, #0]
 c00460e:	4623      	mov	r3, r4
 c004610:	f7fe fc0a 	bl	c002e28 <uECC_vli_modAdd>
 c004614:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c004618:	f103 0224 	add.w	r2, r3, #36	; 0x24
 c00461c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 c004620:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 c004624:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 c004628:	9300      	str	r3, [sp, #0]
 c00462a:	4613      	mov	r3, r2
 c00462c:	683a      	ldr	r2, [r7, #0]
 c00462e:	f7fe fd7b 	bl	c003128 <uECC_vli_modMult>
 c004632:	f997 20a2 	ldrsb.w	r2, [r7, #162]	; 0xa2
 c004636:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 c00463a:	4611      	mov	r1, r2
 c00463c:	4618      	mov	r0, r3
 c00463e:	f7fe fac9 	bl	c002bd4 <uECC_vli_numBits>
 c004642:	4603      	mov	r3, r0
 c004644:	461a      	mov	r2, r3
 c004646:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c00464a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c00464e:	00db      	lsls	r3, r3, #3
 c004650:	429a      	cmp	r2, r3
 c004652:	dd01      	ble.n	c004658 <uECC_sign_with_k_internal+0x2a4>
 c004654:	2300      	movs	r3, #0
 c004656:	e012      	b.n	c00467e <uECC_sign_with_k_internal+0x2ca>
 c004658:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c00465c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c004660:	461a      	mov	r2, r3
 c004662:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c004666:	1898      	adds	r0, r3, r2
 c004668:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c00466c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c004670:	4619      	mov	r1, r3
 c004672:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 c004676:	461a      	mov	r2, r3
 c004678:	f7ff fdc2 	bl	c004200 <uECC_vli_nativeToBytes>
 c00467c:	2301      	movs	r3, #1
 c00467e:	4618      	mov	r0, r3
 c004680:	37ac      	adds	r7, #172	; 0xac
 c004682:	46bd      	mov	sp, r7
 c004684:	bd90      	pop	{r4, r7, pc}
 c004686:	bf00      	nop
 c004688:	30000068 	.word	0x30000068

0c00468c <uECC_sign>:
 c00468c:	b580      	push	{r7, lr}
 c00468e:	b090      	sub	sp, #64	; 0x40
 c004690:	af02      	add	r7, sp, #8
 c004692:	60f8      	str	r0, [r7, #12]
 c004694:	60b9      	str	r1, [r7, #8]
 c004696:	607a      	str	r2, [r7, #4]
 c004698:	603b      	str	r3, [r7, #0]
 c00469a:	2300      	movs	r3, #0
 c00469c:	637b      	str	r3, [r7, #52]	; 0x34
 c00469e:	e029      	b.n	c0046f4 <uECC_sign+0x68>
 c0046a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c0046a2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 c0046a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c0046a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c0046ac:	331f      	adds	r3, #31
 c0046ae:	2b00      	cmp	r3, #0
 c0046b0:	da00      	bge.n	c0046b4 <uECC_sign+0x28>
 c0046b2:	331f      	adds	r3, #31
 c0046b4:	115b      	asrs	r3, r3, #5
 c0046b6:	b25a      	sxtb	r2, r3
 c0046b8:	f107 0314 	add.w	r3, r7, #20
 c0046bc:	4618      	mov	r0, r3
 c0046be:	f7ff fd35 	bl	c00412c <uECC_generate_random_int>
 c0046c2:	4603      	mov	r3, r0
 c0046c4:	2b00      	cmp	r3, #0
 c0046c6:	d101      	bne.n	c0046cc <uECC_sign+0x40>
 c0046c8:	2300      	movs	r3, #0
 c0046ca:	e017      	b.n	c0046fc <uECC_sign+0x70>
 c0046cc:	f107 0214 	add.w	r2, r7, #20
 c0046d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c0046d2:	9301      	str	r3, [sp, #4]
 c0046d4:	683b      	ldr	r3, [r7, #0]
 c0046d6:	9300      	str	r3, [sp, #0]
 c0046d8:	4613      	mov	r3, r2
 c0046da:	687a      	ldr	r2, [r7, #4]
 c0046dc:	68b9      	ldr	r1, [r7, #8]
 c0046de:	68f8      	ldr	r0, [r7, #12]
 c0046e0:	f7ff fe68 	bl	c0043b4 <uECC_sign_with_k_internal>
 c0046e4:	4603      	mov	r3, r0
 c0046e6:	2b00      	cmp	r3, #0
 c0046e8:	d001      	beq.n	c0046ee <uECC_sign+0x62>
 c0046ea:	2301      	movs	r3, #1
 c0046ec:	e006      	b.n	c0046fc <uECC_sign+0x70>
 c0046ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c0046f0:	3301      	adds	r3, #1
 c0046f2:	637b      	str	r3, [r7, #52]	; 0x34
 c0046f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c0046f6:	2b3f      	cmp	r3, #63	; 0x3f
 c0046f8:	d9d2      	bls.n	c0046a0 <uECC_sign+0x14>
 c0046fa:	2300      	movs	r3, #0
 c0046fc:	4618      	mov	r0, r3
 c0046fe:	3738      	adds	r7, #56	; 0x38
 c004700:	46bd      	mov	sp, r7
 c004702:	bd80      	pop	{r7, pc}

0c004704 <smax>:
 c004704:	b480      	push	{r7}
 c004706:	b083      	sub	sp, #12
 c004708:	af00      	add	r7, sp, #0
 c00470a:	4603      	mov	r3, r0
 c00470c:	460a      	mov	r2, r1
 c00470e:	80fb      	strh	r3, [r7, #6]
 c004710:	4613      	mov	r3, r2
 c004712:	80bb      	strh	r3, [r7, #4]
 c004714:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 c004718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 c00471c:	4293      	cmp	r3, r2
 c00471e:	bfb8      	it	lt
 c004720:	4613      	movlt	r3, r2
 c004722:	b21b      	sxth	r3, r3
 c004724:	4618      	mov	r0, r3
 c004726:	370c      	adds	r7, #12
 c004728:	46bd      	mov	sp, r7
 c00472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00472e:	4770      	bx	lr

0c004730 <uECC_verify>:
 c004730:	b590      	push	{r4, r7, lr}
 c004732:	b0ff      	sub	sp, #508	; 0x1fc
 c004734:	af02      	add	r7, sp, #8
 c004736:	f507 74f8 	add.w	r4, r7, #496	; 0x1f0
 c00473a:	f5a4 74f2 	sub.w	r4, r4, #484	; 0x1e4
 c00473e:	6020      	str	r0, [r4, #0]
 c004740:	f507 70f8 	add.w	r0, r7, #496	; 0x1f0
 c004744:	f5a0 70f4 	sub.w	r0, r0, #488	; 0x1e8
 c004748:	6001      	str	r1, [r0, #0]
 c00474a:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 c00474e:	f5a1 71f6 	sub.w	r1, r1, #492	; 0x1ec
 c004752:	600a      	str	r2, [r1, #0]
 c004754:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 c004758:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 c00475c:	6013      	str	r3, [r2, #0]
 c00475e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004762:	781b      	ldrb	r3, [r3, #0]
 c004764:	f887 31ed 	strb.w	r3, [r7, #493]	; 0x1ed
 c004768:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c00476c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c004770:	331f      	adds	r3, #31
 c004772:	2b00      	cmp	r3, #0
 c004774:	da00      	bge.n	c004778 <uECC_verify+0x48>
 c004776:	331f      	adds	r3, #31
 c004778:	115b      	asrs	r3, r3, #5
 c00477a:	f887 31ec 	strb.w	r3, [r7, #492]	; 0x1ec
 c00477e:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c004782:	3b01      	subs	r3, #1
 c004784:	009b      	lsls	r3, r3, #2
 c004786:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 c00478a:	443b      	add	r3, r7
 c00478c:	2200      	movs	r2, #0
 c00478e:	f843 2cd0 	str.w	r2, [r3, #-208]
 c004792:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c004796:	1e5a      	subs	r2, r3, #1
 c004798:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c00479c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 c0047a0:	2100      	movs	r1, #0
 c0047a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 c0047a6:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c0047aa:	1e5a      	subs	r2, r3, #1
 c0047ac:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c0047b0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 c0047b4:	2100      	movs	r1, #0
 c0047b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 c0047ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0047be:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c0047c2:	461a      	mov	r2, r3
 c0047c4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c0047c8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 c0047cc:	f107 0050 	add.w	r0, r7, #80	; 0x50
 c0047d0:	6819      	ldr	r1, [r3, #0]
 c0047d2:	f7ff fd42 	bl	c00425a <uECC_vli_bytesToNative>
 c0047d6:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c0047da:	009b      	lsls	r3, r3, #2
 c0047dc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 c0047e0:	18d0      	adds	r0, r2, r3
 c0047e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0047e6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c0047ea:	461a      	mov	r2, r3
 c0047ec:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c0047f0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 c0047f4:	681b      	ldr	r3, [r3, #0]
 c0047f6:	1899      	adds	r1, r3, r2
 c0047f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0047fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c004800:	461a      	mov	r2, r3
 c004802:	f7ff fd2a 	bl	c00425a <uECC_vli_bytesToNative>
 c004806:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c00480a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c00480e:	461a      	mov	r2, r3
 c004810:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004814:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 c004818:	f107 0030 	add.w	r0, r7, #48	; 0x30
 c00481c:	6819      	ldr	r1, [r3, #0]
 c00481e:	f7ff fd1c 	bl	c00425a <uECC_vli_bytesToNative>
 c004822:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004826:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c00482a:	461a      	mov	r2, r3
 c00482c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004830:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 c004834:	681b      	ldr	r3, [r3, #0]
 c004836:	1899      	adds	r1, r3, r2
 c004838:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c00483c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c004840:	461a      	mov	r2, r3
 c004842:	f107 0310 	add.w	r3, r7, #16
 c004846:	4618      	mov	r0, r3
 c004848:	f7ff fd07 	bl	c00425a <uECC_vli_bytesToNative>
 c00484c:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004850:	f107 0330 	add.w	r3, r7, #48	; 0x30
 c004854:	4611      	mov	r1, r2
 c004856:	4618      	mov	r0, r3
 c004858:	f7fe f952 	bl	c002b00 <uECC_vli_isZero>
 c00485c:	4603      	mov	r3, r0
 c00485e:	2b00      	cmp	r3, #0
 c004860:	d10a      	bne.n	c004878 <uECC_verify+0x148>
 c004862:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004866:	f107 0310 	add.w	r3, r7, #16
 c00486a:	4611      	mov	r1, r2
 c00486c:	4618      	mov	r0, r3
 c00486e:	f7fe f947 	bl	c002b00 <uECC_vli_isZero>
 c004872:	4603      	mov	r3, r0
 c004874:	2b00      	cmp	r3, #0
 c004876:	d001      	beq.n	c00487c <uECC_verify+0x14c>
 c004878:	2300      	movs	r3, #0
 c00487a:	e220      	b.n	c004cbe <uECC_verify+0x58e>
 c00487c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004880:	3324      	adds	r3, #36	; 0x24
 c004882:	f997 21ec 	ldrsb.w	r2, [r7, #492]	; 0x1ec
 c004886:	f107 0130 	add.w	r1, r7, #48	; 0x30
 c00488a:	4618      	mov	r0, r3
 c00488c:	f7fe fa03 	bl	c002c96 <uECC_vli_cmp_unsafe>
 c004890:	4603      	mov	r3, r0
 c004892:	2b01      	cmp	r3, #1
 c004894:	d10c      	bne.n	c0048b0 <uECC_verify+0x180>
 c004896:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c00489a:	3324      	adds	r3, #36	; 0x24
 c00489c:	f997 21ec 	ldrsb.w	r2, [r7, #492]	; 0x1ec
 c0048a0:	f107 0110 	add.w	r1, r7, #16
 c0048a4:	4618      	mov	r0, r3
 c0048a6:	f7fe f9f6 	bl	c002c96 <uECC_vli_cmp_unsafe>
 c0048aa:	4603      	mov	r3, r0
 c0048ac:	2b01      	cmp	r3, #1
 c0048ae:	d001      	beq.n	c0048b4 <uECC_verify+0x184>
 c0048b0:	2300      	movs	r3, #0
 c0048b2:	e204      	b.n	c004cbe <uECC_verify+0x58e>
 c0048b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0048b8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 c0048bc:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c0048c0:	f107 0110 	add.w	r1, r7, #16
 c0048c4:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 c0048c8:	f7fe fcad 	bl	c003226 <uECC_vli_modInv>
 c0048cc:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c0048d0:	3b01      	subs	r3, #1
 c0048d2:	009b      	lsls	r3, r3, #2
 c0048d4:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 c0048d8:	443b      	add	r3, r7
 c0048da:	2200      	movs	r2, #0
 c0048dc:	f843 2c30 	str.w	r2, [r3, #-48]
 c0048e0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c0048e4:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 c0048e8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c0048ec:	f5a3 71f4 	sub.w	r1, r3, #488	; 0x1e8
 c0048f0:	f507 70e0 	add.w	r0, r7, #448	; 0x1c0
 c0048f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0048f8:	6812      	ldr	r2, [r2, #0]
 c0048fa:	6809      	ldr	r1, [r1, #0]
 c0048fc:	f7ff fce9 	bl	c0042d2 <bits2int>
 c004900:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004904:	f103 0424 	add.w	r4, r3, #36	; 0x24
 c004908:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c00490c:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 c004910:	f507 70e0 	add.w	r0, r7, #448	; 0x1c0
 c004914:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c004918:	9300      	str	r3, [sp, #0]
 c00491a:	4623      	mov	r3, r4
 c00491c:	f7fe fc04 	bl	c003128 <uECC_vli_modMult>
 c004920:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004924:	f103 0424 	add.w	r4, r3, #36	; 0x24
 c004928:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c00492c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 c004930:	f507 70d0 	add.w	r0, r7, #416	; 0x1a0
 c004934:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c004938:	9300      	str	r3, [sp, #0]
 c00493a:	4623      	mov	r3, r4
 c00493c:	f7fe fbf4 	bl	c003128 <uECC_vli_modMult>
 c004940:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004944:	f107 0150 	add.w	r1, r7, #80	; 0x50
 c004948:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 c00494c:	4618      	mov	r0, r3
 c00494e:	f7fe f97b 	bl	c002c48 <uECC_vli_set>
 c004952:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004956:	009b      	lsls	r3, r3, #2
 c004958:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 c00495c:	18d0      	adds	r0, r2, r3
 c00495e:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004962:	009b      	lsls	r3, r3, #2
 c004964:	f107 0250 	add.w	r2, r7, #80	; 0x50
 c004968:	4413      	add	r3, r2
 c00496a:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c00496e:	4619      	mov	r1, r3
 c004970:	f7fe f96a 	bl	c002c48 <uECC_vli_set>
 c004974:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004978:	f103 0144 	add.w	r1, r3, #68	; 0x44
 c00497c:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004980:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 c004984:	4618      	mov	r0, r3
 c004986:	f7fe f95f 	bl	c002c48 <uECC_vli_set>
 c00498a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c00498e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 c004992:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004996:	009b      	lsls	r3, r3, #2
 c004998:	18d1      	adds	r1, r2, r3
 c00499a:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c00499e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 c0049a2:	4618      	mov	r0, r3
 c0049a4:	f7fe f950 	bl	c002c48 <uECC_vli_set>
 c0049a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0049ac:	1d1c      	adds	r4, r3, #4
 c0049ae:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 c0049b2:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 c0049b6:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 c0049ba:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c0049be:	9300      	str	r3, [sp, #0]
 c0049c0:	4623      	mov	r3, r4
 c0049c2:	f7fe fa58 	bl	c002e76 <uECC_vli_modSub>
 c0049c6:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c0049ca:	009b      	lsls	r3, r3, #2
 c0049cc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 c0049d0:	18d4      	adds	r4, r2, r3
 c0049d2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 c0049d6:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 c0049da:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 c0049de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0049e2:	9300      	str	r3, [sp, #0]
 c0049e4:	4623      	mov	r3, r4
 c0049e6:	f7ff f881 	bl	c003aec <XYcZ_add>
 c0049ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0049ee:	1d1a      	adds	r2, r3, #4
 c0049f0:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c0049f4:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 c0049f8:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 c0049fc:	f7fe fc13 	bl	c003226 <uECC_vli_modInv>
 c004a00:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004a04:	009b      	lsls	r3, r3, #2
 c004a06:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 c004a0a:	18d1      	adds	r1, r2, r3
 c004a0c:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c004a10:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 c004a14:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004a18:	f7fe fff6 	bl	c003a08 <apply_z>
 c004a1c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004a20:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c004a24:	2200      	movs	r2, #0
 c004a26:	601a      	str	r2, [r3, #0]
 c004a28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004a2c:	f103 0244 	add.w	r2, r3, #68	; 0x44
 c004a30:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004a34:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c004a38:	605a      	str	r2, [r3, #4]
 c004a3a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004a3e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c004a42:	f107 0250 	add.w	r2, r7, #80	; 0x50
 c004a46:	609a      	str	r2, [r3, #8]
 c004a48:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004a4c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c004a50:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 c004a54:	60da      	str	r2, [r3, #12]
 c004a56:	f997 21ec 	ldrsb.w	r2, [r7, #492]	; 0x1ec
 c004a5a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 c004a5e:	4611      	mov	r1, r2
 c004a60:	4618      	mov	r0, r3
 c004a62:	f7fe f8b7 	bl	c002bd4 <uECC_vli_numBits>
 c004a66:	4603      	mov	r3, r0
 c004a68:	461c      	mov	r4, r3
 c004a6a:	f997 21ec 	ldrsb.w	r2, [r7, #492]	; 0x1ec
 c004a6e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 c004a72:	4611      	mov	r1, r2
 c004a74:	4618      	mov	r0, r3
 c004a76:	f7fe f8ad 	bl	c002bd4 <uECC_vli_numBits>
 c004a7a:	4603      	mov	r3, r0
 c004a7c:	4619      	mov	r1, r3
 c004a7e:	4620      	mov	r0, r4
 c004a80:	f7ff fe40 	bl	c004704 <smax>
 c004a84:	4603      	mov	r3, r0
 c004a86:	f8a7 31ea 	strh.w	r3, [r7, #490]	; 0x1ea
 c004a8a:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
 c004a8e:	3b01      	subs	r3, #1
 c004a90:	b29b      	uxth	r3, r3
 c004a92:	b21a      	sxth	r2, r3
 c004a94:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 c004a98:	4611      	mov	r1, r2
 c004a9a:	4618      	mov	r0, r3
 c004a9c:	f7fe f85a 	bl	c002b54 <uECC_vli_testBit>
 c004aa0:	4603      	mov	r3, r0
 c004aa2:	2b00      	cmp	r3, #0
 c004aa4:	bf14      	ite	ne
 c004aa6:	2301      	movne	r3, #1
 c004aa8:	2300      	moveq	r3, #0
 c004aaa:	b2db      	uxtb	r3, r3
 c004aac:	461c      	mov	r4, r3
 c004aae:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
 c004ab2:	3b01      	subs	r3, #1
 c004ab4:	b29b      	uxth	r3, r3
 c004ab6:	b21a      	sxth	r2, r3
 c004ab8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 c004abc:	4611      	mov	r1, r2
 c004abe:	4618      	mov	r0, r3
 c004ac0:	f7fe f848 	bl	c002b54 <uECC_vli_testBit>
 c004ac4:	4603      	mov	r3, r0
 c004ac6:	2b00      	cmp	r3, #0
 c004ac8:	d001      	beq.n	c004ace <uECC_verify+0x39e>
 c004aca:	2302      	movs	r3, #2
 c004acc:	e000      	b.n	c004ad0 <uECC_verify+0x3a0>
 c004ace:	2300      	movs	r3, #0
 c004ad0:	ea43 0204 	orr.w	r2, r3, r4
 c004ad4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004ad8:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c004adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c004ae0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 c004ae4:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004ae8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 c004aec:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 c004af0:	4618      	mov	r0, r3
 c004af2:	f7fe f8a9 	bl	c002c48 <uECC_vli_set>
 c004af6:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004afa:	009b      	lsls	r3, r3, #2
 c004afc:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 c004b00:	18d1      	adds	r1, r2, r3
 c004b02:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004b06:	f507 7380 	add.w	r3, r7, #256	; 0x100
 c004b0a:	4618      	mov	r0, r3
 c004b0c:	f7fe f89c 	bl	c002c48 <uECC_vli_set>
 c004b10:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004b14:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 c004b18:	4611      	mov	r1, r2
 c004b1a:	4618      	mov	r0, r3
 c004b1c:	f7fd ffcf 	bl	c002abe <uECC_vli_clear>
 c004b20:	2301      	movs	r3, #1
 c004b22:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 c004b26:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
 c004b2a:	3b02      	subs	r3, #2
 c004b2c:	b29b      	uxth	r3, r3
 c004b2e:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
 c004b32:	e087      	b.n	c004c44 <uECC_verify+0x514>
 c004b34:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004b38:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
 c004b3c:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c004b40:	f507 7180 	add.w	r1, r7, #256	; 0x100
 c004b44:	f507 7090 	add.w	r0, r7, #288	; 0x120
 c004b48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004b4c:	47a0      	blx	r4
 c004b4e:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	; 0x1ee
 c004b52:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 c004b56:	4611      	mov	r1, r2
 c004b58:	4618      	mov	r0, r3
 c004b5a:	f7fd fffb 	bl	c002b54 <uECC_vli_testBit>
 c004b5e:	4603      	mov	r3, r0
 c004b60:	2b00      	cmp	r3, #0
 c004b62:	bf14      	ite	ne
 c004b64:	2301      	movne	r3, #1
 c004b66:	2300      	moveq	r3, #0
 c004b68:	b2db      	uxtb	r3, r3
 c004b6a:	461c      	mov	r4, r3
 c004b6c:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	; 0x1ee
 c004b70:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 c004b74:	4611      	mov	r1, r2
 c004b76:	4618      	mov	r0, r3
 c004b78:	f7fd ffec 	bl	c002b54 <uECC_vli_testBit>
 c004b7c:	4603      	mov	r3, r0
 c004b7e:	2b00      	cmp	r3, #0
 c004b80:	d001      	beq.n	c004b86 <uECC_verify+0x456>
 c004b82:	2302      	movs	r3, #2
 c004b84:	e000      	b.n	c004b88 <uECC_verify+0x458>
 c004b86:	2300      	movs	r3, #0
 c004b88:	4323      	orrs	r3, r4
 c004b8a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 c004b8e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004b92:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c004b96:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 c004b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c004b9e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 c004ba2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 c004ba6:	2b00      	cmp	r3, #0
 c004ba8:	d046      	beq.n	c004c38 <uECC_verify+0x508>
 c004baa:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004bae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 c004bb2:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 c004bb6:	4618      	mov	r0, r3
 c004bb8:	f7fe f846 	bl	c002c48 <uECC_vli_set>
 c004bbc:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004bc0:	009b      	lsls	r3, r3, #2
 c004bc2:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 c004bc6:	18d1      	adds	r1, r2, r3
 c004bc8:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004bcc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 c004bd0:	4618      	mov	r0, r3
 c004bd2:	f7fe f839 	bl	c002c48 <uECC_vli_set>
 c004bd6:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c004bda:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 c004bde:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 c004be2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004be6:	f7fe ff0f 	bl	c003a08 <apply_z>
 c004bea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004bee:	1d1c      	adds	r4, r3, #4
 c004bf0:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 c004bf4:	f507 7190 	add.w	r1, r7, #288	; 0x120
 c004bf8:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 c004bfc:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004c00:	9300      	str	r3, [sp, #0]
 c004c02:	4623      	mov	r3, r4
 c004c04:	f7fe f937 	bl	c002e76 <uECC_vli_modSub>
 c004c08:	f507 7480 	add.w	r4, r7, #256	; 0x100
 c004c0c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 c004c10:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 c004c14:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 c004c18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004c1c:	9300      	str	r3, [sp, #0]
 c004c1e:	4623      	mov	r3, r4
 c004c20:	f7fe ff64 	bl	c003aec <XYcZ_add>
 c004c24:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 c004c28:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 c004c2c:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 c004c30:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004c34:	f7fe fa93 	bl	c00315e <uECC_vli_modMult_fast>
 c004c38:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 c004c3c:	3b01      	subs	r3, #1
 c004c3e:	b29b      	uxth	r3, r3
 c004c40:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
 c004c44:	f9b7 31ee 	ldrsh.w	r3, [r7, #494]	; 0x1ee
 c004c48:	2b00      	cmp	r3, #0
 c004c4a:	f6bf af73 	bge.w	c004b34 <uECC_verify+0x404>
 c004c4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004c52:	1d1a      	adds	r2, r3, #4
 c004c54:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004c58:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 c004c5c:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 c004c60:	f7fe fae1 	bl	c003226 <uECC_vli_modInv>
 c004c64:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c004c68:	f507 7180 	add.w	r1, r7, #256	; 0x100
 c004c6c:	f507 7090 	add.w	r0, r7, #288	; 0x120
 c004c70:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004c74:	f7fe fec8 	bl	c003a08 <apply_z>
 c004c78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004c7c:	3324      	adds	r3, #36	; 0x24
 c004c7e:	f997 21ec 	ldrsb.w	r2, [r7, #492]	; 0x1ec
 c004c82:	f507 7190 	add.w	r1, r7, #288	; 0x120
 c004c86:	4618      	mov	r0, r3
 c004c88:	f7fe f805 	bl	c002c96 <uECC_vli_cmp_unsafe>
 c004c8c:	4603      	mov	r3, r0
 c004c8e:	2b01      	cmp	r3, #1
 c004c90:	d00b      	beq.n	c004caa <uECC_verify+0x57a>
 c004c92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004c96:	f103 0224 	add.w	r2, r3, #36	; 0x24
 c004c9a:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c004c9e:	f507 7190 	add.w	r1, r7, #288	; 0x120
 c004ca2:	f507 7090 	add.w	r0, r7, #288	; 0x120
 c004ca6:	f7fd fe6b 	bl	c002980 <uECC_vli_sub>
 c004caa:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004cae:	f107 0130 	add.w	r1, r7, #48	; 0x30
 c004cb2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 c004cb6:	4618      	mov	r0, r3
 c004cb8:	f7fe f829 	bl	c002d0e <uECC_vli_equal>
 c004cbc:	4603      	mov	r3, r0
 c004cbe:	4618      	mov	r0, r3
 c004cc0:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 c004cc4:	46bd      	mov	sp, r7
 c004cc6:	bd90      	pop	{r4, r7, pc}

0c004cc8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 c004cc8:	b580      	push	{r7, lr}
 c004cca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 c004ccc:	4b22      	ldr	r3, [pc, #136]	; (c004d58 <MX_LPUART1_UART_Init+0x90>)
 c004cce:	4a23      	ldr	r2, [pc, #140]	; (c004d5c <MX_LPUART1_UART_Init+0x94>)
 c004cd0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 38400;
 c004cd2:	4b21      	ldr	r3, [pc, #132]	; (c004d58 <MX_LPUART1_UART_Init+0x90>)
 c004cd4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 c004cd8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 c004cda:	4b1f      	ldr	r3, [pc, #124]	; (c004d58 <MX_LPUART1_UART_Init+0x90>)
 c004cdc:	2200      	movs	r2, #0
 c004cde:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 c004ce0:	4b1d      	ldr	r3, [pc, #116]	; (c004d58 <MX_LPUART1_UART_Init+0x90>)
 c004ce2:	2200      	movs	r2, #0
 c004ce4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 c004ce6:	4b1c      	ldr	r3, [pc, #112]	; (c004d58 <MX_LPUART1_UART_Init+0x90>)
 c004ce8:	2200      	movs	r2, #0
 c004cea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 c004cec:	4b1a      	ldr	r3, [pc, #104]	; (c004d58 <MX_LPUART1_UART_Init+0x90>)
 c004cee:	220c      	movs	r2, #12
 c004cf0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 c004cf2:	4b19      	ldr	r3, [pc, #100]	; (c004d58 <MX_LPUART1_UART_Init+0x90>)
 c004cf4:	2200      	movs	r2, #0
 c004cf6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c004cf8:	4b17      	ldr	r3, [pc, #92]	; (c004d58 <MX_LPUART1_UART_Init+0x90>)
 c004cfa:	2200      	movs	r2, #0
 c004cfc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 c004cfe:	4b16      	ldr	r3, [pc, #88]	; (c004d58 <MX_LPUART1_UART_Init+0x90>)
 c004d00:	2200      	movs	r2, #0
 c004d02:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 c004d04:	4b14      	ldr	r3, [pc, #80]	; (c004d58 <MX_LPUART1_UART_Init+0x90>)
 c004d06:	2200      	movs	r2, #0
 c004d08:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 c004d0a:	4b13      	ldr	r3, [pc, #76]	; (c004d58 <MX_LPUART1_UART_Init+0x90>)
 c004d0c:	2200      	movs	r2, #0
 c004d0e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 c004d10:	4811      	ldr	r0, [pc, #68]	; (c004d58 <MX_LPUART1_UART_Init+0x90>)
 c004d12:	f002 fbd9 	bl	c0074c8 <HAL_UART_Init>
 c004d16:	4603      	mov	r3, r0
 c004d18:	2b00      	cmp	r3, #0
 c004d1a:	d001      	beq.n	c004d20 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 c004d1c:	f7fd f808 	bl	c001d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 c004d20:	2100      	movs	r1, #0
 c004d22:	480d      	ldr	r0, [pc, #52]	; (c004d58 <MX_LPUART1_UART_Init+0x90>)
 c004d24:	f003 fa2e 	bl	c008184 <HAL_UARTEx_SetTxFifoThreshold>
 c004d28:	4603      	mov	r3, r0
 c004d2a:	2b00      	cmp	r3, #0
 c004d2c:	d001      	beq.n	c004d32 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 c004d2e:	f7fc ffff 	bl	c001d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 c004d32:	2100      	movs	r1, #0
 c004d34:	4808      	ldr	r0, [pc, #32]	; (c004d58 <MX_LPUART1_UART_Init+0x90>)
 c004d36:	f003 fa63 	bl	c008200 <HAL_UARTEx_SetRxFifoThreshold>
 c004d3a:	4603      	mov	r3, r0
 c004d3c:	2b00      	cmp	r3, #0
 c004d3e:	d001      	beq.n	c004d44 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 c004d40:	f7fc fff6 	bl	c001d30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 c004d44:	4804      	ldr	r0, [pc, #16]	; (c004d58 <MX_LPUART1_UART_Init+0x90>)
 c004d46:	f003 f9e4 	bl	c008112 <HAL_UARTEx_DisableFifoMode>
 c004d4a:	4603      	mov	r3, r0
 c004d4c:	2b00      	cmp	r3, #0
 c004d4e:	d001      	beq.n	c004d54 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 c004d50:	f7fc ffee 	bl	c001d30 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 c004d54:	bf00      	nop
 c004d56:	bd80      	pop	{r7, pc}
 c004d58:	30000438 	.word	0x30000438
 c004d5c:	50008000 	.word	0x50008000

0c004d60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 c004d60:	b580      	push	{r7, lr}
 c004d62:	b0ae      	sub	sp, #184	; 0xb8
 c004d64:	af00      	add	r7, sp, #0
 c004d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c004d68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c004d6c:	2200      	movs	r2, #0
 c004d6e:	601a      	str	r2, [r3, #0]
 c004d70:	605a      	str	r2, [r3, #4]
 c004d72:	609a      	str	r2, [r3, #8]
 c004d74:	60da      	str	r2, [r3, #12]
 c004d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c004d78:	f107 0310 	add.w	r3, r7, #16
 c004d7c:	2294      	movs	r2, #148	; 0x94
 c004d7e:	2100      	movs	r1, #0
 c004d80:	4618      	mov	r0, r3
 c004d82:	f003 fb00 	bl	c008386 <memset>
  if(uartHandle->Instance==LPUART1)
 c004d86:	687b      	ldr	r3, [r7, #4]
 c004d88:	681b      	ldr	r3, [r3, #0]
 c004d8a:	4a22      	ldr	r2, [pc, #136]	; (c004e14 <HAL_UART_MspInit+0xb4>)
 c004d8c:	4293      	cmp	r3, r2
 c004d8e:	d13d      	bne.n	c004e0c <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 c004d90:	2320      	movs	r3, #32
 c004d92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 c004d94:	2300      	movs	r3, #0
 c004d96:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c004d98:	f107 0310 	add.w	r3, r7, #16
 c004d9c:	4618      	mov	r0, r3
 c004d9e:	f001 fe7d 	bl	c006a9c <HAL_RCCEx_PeriphCLKConfig>
 c004da2:	4603      	mov	r3, r0
 c004da4:	2b00      	cmp	r3, #0
 c004da6:	d001      	beq.n	c004dac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 c004da8:	f7fc ffc2 	bl	c001d30 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 c004dac:	4b1a      	ldr	r3, [pc, #104]	; (c004e18 <HAL_UART_MspInit+0xb8>)
 c004dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c004db0:	4a19      	ldr	r2, [pc, #100]	; (c004e18 <HAL_UART_MspInit+0xb8>)
 c004db2:	f043 0301 	orr.w	r3, r3, #1
 c004db6:	65d3      	str	r3, [r2, #92]	; 0x5c
 c004db8:	4b17      	ldr	r3, [pc, #92]	; (c004e18 <HAL_UART_MspInit+0xb8>)
 c004dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c004dbc:	f003 0301 	and.w	r3, r3, #1
 c004dc0:	60fb      	str	r3, [r7, #12]
 c004dc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 c004dc4:	4b14      	ldr	r3, [pc, #80]	; (c004e18 <HAL_UART_MspInit+0xb8>)
 c004dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c004dc8:	4a13      	ldr	r2, [pc, #76]	; (c004e18 <HAL_UART_MspInit+0xb8>)
 c004dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c004dce:	64d3      	str	r3, [r2, #76]	; 0x4c
 c004dd0:	4b11      	ldr	r3, [pc, #68]	; (c004e18 <HAL_UART_MspInit+0xb8>)
 c004dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c004dd8:	60bb      	str	r3, [r7, #8]
 c004dda:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 c004ddc:	f000 fe5c 	bl	c005a98 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 c004de0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 c004de4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c004de8:	2302      	movs	r3, #2
 c004dea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c004dee:	2300      	movs	r3, #0
 c004df0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c004df4:	2300      	movs	r3, #0
 c004df6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 c004dfa:	2308      	movs	r3, #8
 c004dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 c004e00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c004e04:	4619      	mov	r1, r3
 c004e06:	4805      	ldr	r0, [pc, #20]	; (c004e1c <HAL_UART_MspInit+0xbc>)
 c004e08:	f000 f9e2 	bl	c0051d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 c004e0c:	bf00      	nop
 c004e0e:	37b8      	adds	r7, #184	; 0xb8
 c004e10:	46bd      	mov	sp, r7
 c004e12:	bd80      	pop	{r7, pc}
 c004e14:	50008000 	.word	0x50008000
 c004e18:	50021000 	.word	0x50021000
 c004e1c:	52021800 	.word	0x52021800

0c004e20 <SecureUartTx>:
}

/* USER CODE BEGIN 1 */

void SecureUartTx(uint8_t* data, uint16_t len)
{
 c004e20:	b580      	push	{r7, lr}
 c004e22:	b082      	sub	sp, #8
 c004e24:	af00      	add	r7, sp, #0
 c004e26:	6078      	str	r0, [r7, #4]
 c004e28:	460b      	mov	r3, r1
 c004e2a:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&hlpuart1, data, len, HAL_MAX_DELAY);
 c004e2c:	887a      	ldrh	r2, [r7, #2]
 c004e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c004e32:	6879      	ldr	r1, [r7, #4]
 c004e34:	4803      	ldr	r0, [pc, #12]	; (c004e44 <SecureUartTx+0x24>)
 c004e36:	f002 fb97 	bl	c007568 <HAL_UART_Transmit>
}
 c004e3a:	bf00      	nop
 c004e3c:	3708      	adds	r7, #8
 c004e3e:	46bd      	mov	sp, r7
 c004e40:	bd80      	pop	{r7, pc}
 c004e42:	bf00      	nop
 c004e44:	30000438 	.word	0x30000438

0c004e48 <SecureUartRx>:

void SecureUartRx(uint8_t* data, uint16_t len)
{
 c004e48:	b580      	push	{r7, lr}
 c004e4a:	b082      	sub	sp, #8
 c004e4c:	af00      	add	r7, sp, #0
 c004e4e:	6078      	str	r0, [r7, #4]
 c004e50:	460b      	mov	r3, r1
 c004e52:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&hlpuart1, data, len, HAL_MAX_DELAY);
 c004e54:	887a      	ldrh	r2, [r7, #2]
 c004e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c004e5a:	6879      	ldr	r1, [r7, #4]
 c004e5c:	4803      	ldr	r0, [pc, #12]	; (c004e6c <SecureUartRx+0x24>)
 c004e5e:	f002 fc19 	bl	c007694 <HAL_UART_Receive>

}
 c004e62:	bf00      	nop
 c004e64:	3708      	adds	r7, #8
 c004e66:	46bd      	mov	sp, r7
 c004e68:	bd80      	pop	{r7, pc}
 c004e6a:	bf00      	nop
 c004e6c:	30000438 	.word	0x30000438

0c004e70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c004e70:	f8df d034 	ldr.w	sp, [pc, #52]	; c004ea8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c004e74:	f7fd fc18 	bl	c0026a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c004e78:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c004e7a:	e003      	b.n	c004e84 <LoopCopyDataInit>

0c004e7c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c004e7c:	4b0b      	ldr	r3, [pc, #44]	; (c004eac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c004e7e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c004e80:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c004e82:	3104      	adds	r1, #4

0c004e84 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c004e84:	480a      	ldr	r0, [pc, #40]	; (c004eb0 <LoopForever+0xa>)
	ldr	r3, =_edata
 c004e86:	4b0b      	ldr	r3, [pc, #44]	; (c004eb4 <LoopForever+0xe>)
	adds	r2, r0, r1
 c004e88:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c004e8a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c004e8c:	d3f6      	bcc.n	c004e7c <CopyDataInit>
	ldr	r2, =_sbss
 c004e8e:	4a0a      	ldr	r2, [pc, #40]	; (c004eb8 <LoopForever+0x12>)
	b	LoopFillZerobss
 c004e90:	e002      	b.n	c004e98 <LoopFillZerobss>

0c004e92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c004e92:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c004e94:	f842 3b04 	str.w	r3, [r2], #4

0c004e98 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c004e98:	4b08      	ldr	r3, [pc, #32]	; (c004ebc <LoopForever+0x16>)
	cmp	r2, r3
 c004e9a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c004e9c:	d3f9      	bcc.n	c004e92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c004e9e:	f003 fa41 	bl	c008324 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c004ea2:	f7fc fe6d 	bl	c001b80 <main>

0c004ea6 <LoopForever>:

LoopForever:
    b LoopForever
 c004ea6:	e7fe      	b.n	c004ea6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c004ea8:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c004eac:	0c0096f8 	.word	0x0c0096f8
	ldr	r0, =_sdata
 c004eb0:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c004eb4:	300000d8 	.word	0x300000d8
	ldr	r2, =_sbss
 c004eb8:	300000d8 	.word	0x300000d8
	ldr	r3, = _ebss
 c004ebc:	300004dc 	.word	0x300004dc

0c004ec0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c004ec0:	e7fe      	b.n	c004ec0 <ADC1_2_IRQHandler>

0c004ec2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c004ec2:	b580      	push	{r7, lr}
 c004ec4:	b082      	sub	sp, #8
 c004ec6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c004ec8:	2300      	movs	r3, #0
 c004eca:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c004ecc:	2004      	movs	r0, #4
 c004ece:	f000 f93f 	bl	c005150 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c004ed2:	f7fd fc03 	bl	c0026dc <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c004ed6:	2007      	movs	r0, #7
 c004ed8:	f000 f80e 	bl	c004ef8 <HAL_InitTick>
 c004edc:	4603      	mov	r3, r0
 c004ede:	2b00      	cmp	r3, #0
 c004ee0:	d002      	beq.n	c004ee8 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c004ee2:	2301      	movs	r3, #1
 c004ee4:	71fb      	strb	r3, [r7, #7]
 c004ee6:	e001      	b.n	c004eec <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c004ee8:	f7fd fa00 	bl	c0022ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c004eec:	79fb      	ldrb	r3, [r7, #7]
}
 c004eee:	4618      	mov	r0, r3
 c004ef0:	3708      	adds	r7, #8
 c004ef2:	46bd      	mov	sp, r7
 c004ef4:	bd80      	pop	{r7, pc}
	...

0c004ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c004ef8:	b580      	push	{r7, lr}
 c004efa:	b084      	sub	sp, #16
 c004efc:	af00      	add	r7, sp, #0
 c004efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c004f00:	2300      	movs	r3, #0
 c004f02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c004f04:	4b17      	ldr	r3, [pc, #92]	; (c004f64 <HAL_InitTick+0x6c>)
 c004f06:	781b      	ldrb	r3, [r3, #0]
 c004f08:	2b00      	cmp	r3, #0
 c004f0a:	d023      	beq.n	c004f54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c004f0c:	4b16      	ldr	r3, [pc, #88]	; (c004f68 <HAL_InitTick+0x70>)
 c004f0e:	681a      	ldr	r2, [r3, #0]
 c004f10:	4b14      	ldr	r3, [pc, #80]	; (c004f64 <HAL_InitTick+0x6c>)
 c004f12:	781b      	ldrb	r3, [r3, #0]
 c004f14:	4619      	mov	r1, r3
 c004f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c004f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 c004f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 c004f22:	4618      	mov	r0, r3
 c004f24:	f000 f947 	bl	c0051b6 <HAL_SYSTICK_Config>
 c004f28:	4603      	mov	r3, r0
 c004f2a:	2b00      	cmp	r3, #0
 c004f2c:	d10f      	bne.n	c004f4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c004f2e:	687b      	ldr	r3, [r7, #4]
 c004f30:	2b07      	cmp	r3, #7
 c004f32:	d809      	bhi.n	c004f48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c004f34:	2200      	movs	r2, #0
 c004f36:	6879      	ldr	r1, [r7, #4]
 c004f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c004f3c:	f000 f913 	bl	c005166 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c004f40:	4a0a      	ldr	r2, [pc, #40]	; (c004f6c <HAL_InitTick+0x74>)
 c004f42:	687b      	ldr	r3, [r7, #4]
 c004f44:	6013      	str	r3, [r2, #0]
 c004f46:	e007      	b.n	c004f58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c004f48:	2301      	movs	r3, #1
 c004f4a:	73fb      	strb	r3, [r7, #15]
 c004f4c:	e004      	b.n	c004f58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c004f4e:	2301      	movs	r3, #1
 c004f50:	73fb      	strb	r3, [r7, #15]
 c004f52:	e001      	b.n	c004f58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c004f54:	2301      	movs	r3, #1
 c004f56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c004f58:	7bfb      	ldrb	r3, [r7, #15]
}
 c004f5a:	4618      	mov	r0, r3
 c004f5c:	3710      	adds	r7, #16
 c004f5e:	46bd      	mov	sp, r7
 c004f60:	bd80      	pop	{r7, pc}
 c004f62:	bf00      	nop
 c004f64:	30000070 	.word	0x30000070
 c004f68:	30000064 	.word	0x30000064
 c004f6c:	3000006c 	.word	0x3000006c

0c004f70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c004f70:	b480      	push	{r7}
 c004f72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c004f74:	4b06      	ldr	r3, [pc, #24]	; (c004f90 <HAL_IncTick+0x20>)
 c004f76:	781b      	ldrb	r3, [r3, #0]
 c004f78:	461a      	mov	r2, r3
 c004f7a:	4b06      	ldr	r3, [pc, #24]	; (c004f94 <HAL_IncTick+0x24>)
 c004f7c:	681b      	ldr	r3, [r3, #0]
 c004f7e:	4413      	add	r3, r2
 c004f80:	4a04      	ldr	r2, [pc, #16]	; (c004f94 <HAL_IncTick+0x24>)
 c004f82:	6013      	str	r3, [r2, #0]
}
 c004f84:	bf00      	nop
 c004f86:	46bd      	mov	sp, r7
 c004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004f8c:	4770      	bx	lr
 c004f8e:	bf00      	nop
 c004f90:	30000070 	.word	0x30000070
 c004f94:	300004c8 	.word	0x300004c8

0c004f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c004f98:	b480      	push	{r7}
 c004f9a:	af00      	add	r7, sp, #0
  return uwTick;
 c004f9c:	4b03      	ldr	r3, [pc, #12]	; (c004fac <HAL_GetTick+0x14>)
 c004f9e:	681b      	ldr	r3, [r3, #0]
}
 c004fa0:	4618      	mov	r0, r3
 c004fa2:	46bd      	mov	sp, r7
 c004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004fa8:	4770      	bx	lr
 c004faa:	bf00      	nop
 c004fac:	300004c8 	.word	0x300004c8

0c004fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c004fb0:	b480      	push	{r7}
 c004fb2:	b085      	sub	sp, #20
 c004fb4:	af00      	add	r7, sp, #0
 c004fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c004fb8:	687b      	ldr	r3, [r7, #4]
 c004fba:	f003 0307 	and.w	r3, r3, #7
 c004fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c004fc0:	4b0c      	ldr	r3, [pc, #48]	; (c004ff4 <__NVIC_SetPriorityGrouping+0x44>)
 c004fc2:	68db      	ldr	r3, [r3, #12]
 c004fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c004fc6:	68ba      	ldr	r2, [r7, #8]
 c004fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c004fcc:	4013      	ands	r3, r2
 c004fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c004fd0:	68fb      	ldr	r3, [r7, #12]
 c004fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c004fd4:	68bb      	ldr	r3, [r7, #8]
 c004fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c004fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c004fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c004fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c004fe2:	4a04      	ldr	r2, [pc, #16]	; (c004ff4 <__NVIC_SetPriorityGrouping+0x44>)
 c004fe4:	68bb      	ldr	r3, [r7, #8]
 c004fe6:	60d3      	str	r3, [r2, #12]
}
 c004fe8:	bf00      	nop
 c004fea:	3714      	adds	r7, #20
 c004fec:	46bd      	mov	sp, r7
 c004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004ff2:	4770      	bx	lr
 c004ff4:	e000ed00 	.word	0xe000ed00

0c004ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c004ff8:	b480      	push	{r7}
 c004ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c004ffc:	4b04      	ldr	r3, [pc, #16]	; (c005010 <__NVIC_GetPriorityGrouping+0x18>)
 c004ffe:	68db      	ldr	r3, [r3, #12]
 c005000:	0a1b      	lsrs	r3, r3, #8
 c005002:	f003 0307 	and.w	r3, r3, #7
}
 c005006:	4618      	mov	r0, r3
 c005008:	46bd      	mov	sp, r7
 c00500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00500e:	4770      	bx	lr
 c005010:	e000ed00 	.word	0xe000ed00

0c005014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c005014:	b480      	push	{r7}
 c005016:	b083      	sub	sp, #12
 c005018:	af00      	add	r7, sp, #0
 c00501a:	4603      	mov	r3, r0
 c00501c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c00501e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c005022:	2b00      	cmp	r3, #0
 c005024:	db0b      	blt.n	c00503e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c005026:	79fb      	ldrb	r3, [r7, #7]
 c005028:	f003 021f 	and.w	r2, r3, #31
 c00502c:	4907      	ldr	r1, [pc, #28]	; (c00504c <__NVIC_EnableIRQ+0x38>)
 c00502e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c005032:	095b      	lsrs	r3, r3, #5
 c005034:	2001      	movs	r0, #1
 c005036:	fa00 f202 	lsl.w	r2, r0, r2
 c00503a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 c00503e:	bf00      	nop
 c005040:	370c      	adds	r7, #12
 c005042:	46bd      	mov	sp, r7
 c005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005048:	4770      	bx	lr
 c00504a:	bf00      	nop
 c00504c:	e000e100 	.word	0xe000e100

0c005050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c005050:	b480      	push	{r7}
 c005052:	b083      	sub	sp, #12
 c005054:	af00      	add	r7, sp, #0
 c005056:	4603      	mov	r3, r0
 c005058:	6039      	str	r1, [r7, #0]
 c00505a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c00505c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c005060:	2b00      	cmp	r3, #0
 c005062:	db0a      	blt.n	c00507a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c005064:	683b      	ldr	r3, [r7, #0]
 c005066:	b2da      	uxtb	r2, r3
 c005068:	490c      	ldr	r1, [pc, #48]	; (c00509c <__NVIC_SetPriority+0x4c>)
 c00506a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00506e:	0152      	lsls	r2, r2, #5
 c005070:	b2d2      	uxtb	r2, r2
 c005072:	440b      	add	r3, r1
 c005074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c005078:	e00a      	b.n	c005090 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c00507a:	683b      	ldr	r3, [r7, #0]
 c00507c:	b2da      	uxtb	r2, r3
 c00507e:	4908      	ldr	r1, [pc, #32]	; (c0050a0 <__NVIC_SetPriority+0x50>)
 c005080:	79fb      	ldrb	r3, [r7, #7]
 c005082:	f003 030f 	and.w	r3, r3, #15
 c005086:	3b04      	subs	r3, #4
 c005088:	0152      	lsls	r2, r2, #5
 c00508a:	b2d2      	uxtb	r2, r2
 c00508c:	440b      	add	r3, r1
 c00508e:	761a      	strb	r2, [r3, #24]
}
 c005090:	bf00      	nop
 c005092:	370c      	adds	r7, #12
 c005094:	46bd      	mov	sp, r7
 c005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00509a:	4770      	bx	lr
 c00509c:	e000e100 	.word	0xe000e100
 c0050a0:	e000ed00 	.word	0xe000ed00

0c0050a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c0050a4:	b480      	push	{r7}
 c0050a6:	b089      	sub	sp, #36	; 0x24
 c0050a8:	af00      	add	r7, sp, #0
 c0050aa:	60f8      	str	r0, [r7, #12]
 c0050ac:	60b9      	str	r1, [r7, #8]
 c0050ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c0050b0:	68fb      	ldr	r3, [r7, #12]
 c0050b2:	f003 0307 	and.w	r3, r3, #7
 c0050b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c0050b8:	69fb      	ldr	r3, [r7, #28]
 c0050ba:	f1c3 0307 	rsb	r3, r3, #7
 c0050be:	2b03      	cmp	r3, #3
 c0050c0:	bf28      	it	cs
 c0050c2:	2303      	movcs	r3, #3
 c0050c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c0050c6:	69fb      	ldr	r3, [r7, #28]
 c0050c8:	3303      	adds	r3, #3
 c0050ca:	2b06      	cmp	r3, #6
 c0050cc:	d902      	bls.n	c0050d4 <NVIC_EncodePriority+0x30>
 c0050ce:	69fb      	ldr	r3, [r7, #28]
 c0050d0:	3b04      	subs	r3, #4
 c0050d2:	e000      	b.n	c0050d6 <NVIC_EncodePriority+0x32>
 c0050d4:	2300      	movs	r3, #0
 c0050d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c0050d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0050dc:	69bb      	ldr	r3, [r7, #24]
 c0050de:	fa02 f303 	lsl.w	r3, r2, r3
 c0050e2:	43da      	mvns	r2, r3
 c0050e4:	68bb      	ldr	r3, [r7, #8]
 c0050e6:	401a      	ands	r2, r3
 c0050e8:	697b      	ldr	r3, [r7, #20]
 c0050ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c0050ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 c0050f0:	697b      	ldr	r3, [r7, #20]
 c0050f2:	fa01 f303 	lsl.w	r3, r1, r3
 c0050f6:	43d9      	mvns	r1, r3
 c0050f8:	687b      	ldr	r3, [r7, #4]
 c0050fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c0050fc:	4313      	orrs	r3, r2
         );
}
 c0050fe:	4618      	mov	r0, r3
 c005100:	3724      	adds	r7, #36	; 0x24
 c005102:	46bd      	mov	sp, r7
 c005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005108:	4770      	bx	lr
	...

0c00510c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c00510c:	b580      	push	{r7, lr}
 c00510e:	b082      	sub	sp, #8
 c005110:	af00      	add	r7, sp, #0
 c005112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c005114:	687b      	ldr	r3, [r7, #4]
 c005116:	3b01      	subs	r3, #1
 c005118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c00511c:	d301      	bcc.n	c005122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c00511e:	2301      	movs	r3, #1
 c005120:	e00f      	b.n	c005142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c005122:	4a0a      	ldr	r2, [pc, #40]	; (c00514c <SysTick_Config+0x40>)
 c005124:	687b      	ldr	r3, [r7, #4]
 c005126:	3b01      	subs	r3, #1
 c005128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c00512a:	2107      	movs	r1, #7
 c00512c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c005130:	f7ff ff8e 	bl	c005050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c005134:	4b05      	ldr	r3, [pc, #20]	; (c00514c <SysTick_Config+0x40>)
 c005136:	2200      	movs	r2, #0
 c005138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c00513a:	4b04      	ldr	r3, [pc, #16]	; (c00514c <SysTick_Config+0x40>)
 c00513c:	2207      	movs	r2, #7
 c00513e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c005140:	2300      	movs	r3, #0
}
 c005142:	4618      	mov	r0, r3
 c005144:	3708      	adds	r7, #8
 c005146:	46bd      	mov	sp, r7
 c005148:	bd80      	pop	{r7, pc}
 c00514a:	bf00      	nop
 c00514c:	e000e010 	.word	0xe000e010

0c005150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c005150:	b580      	push	{r7, lr}
 c005152:	b082      	sub	sp, #8
 c005154:	af00      	add	r7, sp, #0
 c005156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c005158:	6878      	ldr	r0, [r7, #4]
 c00515a:	f7ff ff29 	bl	c004fb0 <__NVIC_SetPriorityGrouping>
}
 c00515e:	bf00      	nop
 c005160:	3708      	adds	r7, #8
 c005162:	46bd      	mov	sp, r7
 c005164:	bd80      	pop	{r7, pc}

0c005166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c005166:	b580      	push	{r7, lr}
 c005168:	b086      	sub	sp, #24
 c00516a:	af00      	add	r7, sp, #0
 c00516c:	4603      	mov	r3, r0
 c00516e:	60b9      	str	r1, [r7, #8]
 c005170:	607a      	str	r2, [r7, #4]
 c005172:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c005174:	f7ff ff40 	bl	c004ff8 <__NVIC_GetPriorityGrouping>
 c005178:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c00517a:	687a      	ldr	r2, [r7, #4]
 c00517c:	68b9      	ldr	r1, [r7, #8]
 c00517e:	6978      	ldr	r0, [r7, #20]
 c005180:	f7ff ff90 	bl	c0050a4 <NVIC_EncodePriority>
 c005184:	4602      	mov	r2, r0
 c005186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c00518a:	4611      	mov	r1, r2
 c00518c:	4618      	mov	r0, r3
 c00518e:	f7ff ff5f 	bl	c005050 <__NVIC_SetPriority>
}
 c005192:	bf00      	nop
 c005194:	3718      	adds	r7, #24
 c005196:	46bd      	mov	sp, r7
 c005198:	bd80      	pop	{r7, pc}

0c00519a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c00519a:	b580      	push	{r7, lr}
 c00519c:	b082      	sub	sp, #8
 c00519e:	af00      	add	r7, sp, #0
 c0051a0:	4603      	mov	r3, r0
 c0051a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c0051a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0051a8:	4618      	mov	r0, r3
 c0051aa:	f7ff ff33 	bl	c005014 <__NVIC_EnableIRQ>
}
 c0051ae:	bf00      	nop
 c0051b0:	3708      	adds	r7, #8
 c0051b2:	46bd      	mov	sp, r7
 c0051b4:	bd80      	pop	{r7, pc}

0c0051b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c0051b6:	b580      	push	{r7, lr}
 c0051b8:	b082      	sub	sp, #8
 c0051ba:	af00      	add	r7, sp, #0
 c0051bc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c0051be:	6878      	ldr	r0, [r7, #4]
 c0051c0:	f7ff ffa4 	bl	c00510c <SysTick_Config>
 c0051c4:	4603      	mov	r3, r0
}
 c0051c6:	4618      	mov	r0, r3
 c0051c8:	3708      	adds	r7, #8
 c0051ca:	46bd      	mov	sp, r7
 c0051cc:	bd80      	pop	{r7, pc}
	...

0c0051d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c0051d0:	b480      	push	{r7}
 c0051d2:	b087      	sub	sp, #28
 c0051d4:	af00      	add	r7, sp, #0
 c0051d6:	6078      	str	r0, [r7, #4]
 c0051d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c0051da:	2300      	movs	r3, #0
 c0051dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c0051de:	e158      	b.n	c005492 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c0051e0:	683b      	ldr	r3, [r7, #0]
 c0051e2:	681a      	ldr	r2, [r3, #0]
 c0051e4:	2101      	movs	r1, #1
 c0051e6:	697b      	ldr	r3, [r7, #20]
 c0051e8:	fa01 f303 	lsl.w	r3, r1, r3
 c0051ec:	4013      	ands	r3, r2
 c0051ee:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 c0051f0:	68fb      	ldr	r3, [r7, #12]
 c0051f2:	2b00      	cmp	r3, #0
 c0051f4:	f000 814a 	beq.w	c00548c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c0051f8:	683b      	ldr	r3, [r7, #0]
 c0051fa:	685b      	ldr	r3, [r3, #4]
 c0051fc:	2b01      	cmp	r3, #1
 c0051fe:	d00b      	beq.n	c005218 <HAL_GPIO_Init+0x48>
 c005200:	683b      	ldr	r3, [r7, #0]
 c005202:	685b      	ldr	r3, [r3, #4]
 c005204:	2b02      	cmp	r3, #2
 c005206:	d007      	beq.n	c005218 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c005208:	683b      	ldr	r3, [r7, #0]
 c00520a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c00520c:	2b11      	cmp	r3, #17
 c00520e:	d003      	beq.n	c005218 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c005210:	683b      	ldr	r3, [r7, #0]
 c005212:	685b      	ldr	r3, [r3, #4]
 c005214:	2b12      	cmp	r3, #18
 c005216:	d130      	bne.n	c00527a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c005218:	687b      	ldr	r3, [r7, #4]
 c00521a:	689b      	ldr	r3, [r3, #8]
 c00521c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c00521e:	697b      	ldr	r3, [r7, #20]
 c005220:	005b      	lsls	r3, r3, #1
 c005222:	2203      	movs	r2, #3
 c005224:	fa02 f303 	lsl.w	r3, r2, r3
 c005228:	43db      	mvns	r3, r3
 c00522a:	693a      	ldr	r2, [r7, #16]
 c00522c:	4013      	ands	r3, r2
 c00522e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c005230:	683b      	ldr	r3, [r7, #0]
 c005232:	68da      	ldr	r2, [r3, #12]
 c005234:	697b      	ldr	r3, [r7, #20]
 c005236:	005b      	lsls	r3, r3, #1
 c005238:	fa02 f303 	lsl.w	r3, r2, r3
 c00523c:	693a      	ldr	r2, [r7, #16]
 c00523e:	4313      	orrs	r3, r2
 c005240:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c005242:	687b      	ldr	r3, [r7, #4]
 c005244:	693a      	ldr	r2, [r7, #16]
 c005246:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c005248:	687b      	ldr	r3, [r7, #4]
 c00524a:	685b      	ldr	r3, [r3, #4]
 c00524c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c00524e:	2201      	movs	r2, #1
 c005250:	697b      	ldr	r3, [r7, #20]
 c005252:	fa02 f303 	lsl.w	r3, r2, r3
 c005256:	43db      	mvns	r3, r3
 c005258:	693a      	ldr	r2, [r7, #16]
 c00525a:	4013      	ands	r3, r2
 c00525c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 c00525e:	683b      	ldr	r3, [r7, #0]
 c005260:	685b      	ldr	r3, [r3, #4]
 c005262:	091b      	lsrs	r3, r3, #4
 c005264:	f003 0201 	and.w	r2, r3, #1
 c005268:	697b      	ldr	r3, [r7, #20]
 c00526a:	fa02 f303 	lsl.w	r3, r2, r3
 c00526e:	693a      	ldr	r2, [r7, #16]
 c005270:	4313      	orrs	r3, r2
 c005272:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c005274:	687b      	ldr	r3, [r7, #4]
 c005276:	693a      	ldr	r2, [r7, #16]
 c005278:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 c00527a:	687b      	ldr	r3, [r7, #4]
 c00527c:	68db      	ldr	r3, [r3, #12]
 c00527e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c005280:	697b      	ldr	r3, [r7, #20]
 c005282:	005b      	lsls	r3, r3, #1
 c005284:	2203      	movs	r2, #3
 c005286:	fa02 f303 	lsl.w	r3, r2, r3
 c00528a:	43db      	mvns	r3, r3
 c00528c:	693a      	ldr	r2, [r7, #16]
 c00528e:	4013      	ands	r3, r2
 c005290:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 c005292:	683b      	ldr	r3, [r7, #0]
 c005294:	689a      	ldr	r2, [r3, #8]
 c005296:	697b      	ldr	r3, [r7, #20]
 c005298:	005b      	lsls	r3, r3, #1
 c00529a:	fa02 f303 	lsl.w	r3, r2, r3
 c00529e:	693a      	ldr	r2, [r7, #16]
 c0052a0:	4313      	orrs	r3, r2
 c0052a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 c0052a4:	687b      	ldr	r3, [r7, #4]
 c0052a6:	693a      	ldr	r2, [r7, #16]
 c0052a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c0052aa:	683b      	ldr	r3, [r7, #0]
 c0052ac:	685b      	ldr	r3, [r3, #4]
 c0052ae:	2b02      	cmp	r3, #2
 c0052b0:	d003      	beq.n	c0052ba <HAL_GPIO_Init+0xea>
 c0052b2:	683b      	ldr	r3, [r7, #0]
 c0052b4:	685b      	ldr	r3, [r3, #4]
 c0052b6:	2b12      	cmp	r3, #18
 c0052b8:	d123      	bne.n	c005302 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c0052ba:	697b      	ldr	r3, [r7, #20]
 c0052bc:	08da      	lsrs	r2, r3, #3
 c0052be:	687b      	ldr	r3, [r7, #4]
 c0052c0:	3208      	adds	r2, #8
 c0052c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c0052c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c0052c8:	697b      	ldr	r3, [r7, #20]
 c0052ca:	f003 0307 	and.w	r3, r3, #7
 c0052ce:	009b      	lsls	r3, r3, #2
 c0052d0:	220f      	movs	r2, #15
 c0052d2:	fa02 f303 	lsl.w	r3, r2, r3
 c0052d6:	43db      	mvns	r3, r3
 c0052d8:	693a      	ldr	r2, [r7, #16]
 c0052da:	4013      	ands	r3, r2
 c0052dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c0052de:	683b      	ldr	r3, [r7, #0]
 c0052e0:	691a      	ldr	r2, [r3, #16]
 c0052e2:	697b      	ldr	r3, [r7, #20]
 c0052e4:	f003 0307 	and.w	r3, r3, #7
 c0052e8:	009b      	lsls	r3, r3, #2
 c0052ea:	fa02 f303 	lsl.w	r3, r2, r3
 c0052ee:	693a      	ldr	r2, [r7, #16]
 c0052f0:	4313      	orrs	r3, r2
 c0052f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c0052f4:	697b      	ldr	r3, [r7, #20]
 c0052f6:	08da      	lsrs	r2, r3, #3
 c0052f8:	687b      	ldr	r3, [r7, #4]
 c0052fa:	3208      	adds	r2, #8
 c0052fc:	6939      	ldr	r1, [r7, #16]
 c0052fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c005302:	687b      	ldr	r3, [r7, #4]
 c005304:	681b      	ldr	r3, [r3, #0]
 c005306:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c005308:	697b      	ldr	r3, [r7, #20]
 c00530a:	005b      	lsls	r3, r3, #1
 c00530c:	2203      	movs	r2, #3
 c00530e:	fa02 f303 	lsl.w	r3, r2, r3
 c005312:	43db      	mvns	r3, r3
 c005314:	693a      	ldr	r2, [r7, #16]
 c005316:	4013      	ands	r3, r2
 c005318:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c00531a:	683b      	ldr	r3, [r7, #0]
 c00531c:	685b      	ldr	r3, [r3, #4]
 c00531e:	f003 0203 	and.w	r2, r3, #3
 c005322:	697b      	ldr	r3, [r7, #20]
 c005324:	005b      	lsls	r3, r3, #1
 c005326:	fa02 f303 	lsl.w	r3, r2, r3
 c00532a:	693a      	ldr	r2, [r7, #16]
 c00532c:	4313      	orrs	r3, r2
 c00532e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c005330:	687b      	ldr	r3, [r7, #4]
 c005332:	693a      	ldr	r2, [r7, #16]
 c005334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c005336:	683b      	ldr	r3, [r7, #0]
 c005338:	685b      	ldr	r3, [r3, #4]
 c00533a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c00533e:	2b00      	cmp	r3, #0
 c005340:	f000 80a4 	beq.w	c00548c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c005344:	4a5a      	ldr	r2, [pc, #360]	; (c0054b0 <HAL_GPIO_Init+0x2e0>)
 c005346:	697b      	ldr	r3, [r7, #20]
 c005348:	089b      	lsrs	r3, r3, #2
 c00534a:	3318      	adds	r3, #24
 c00534c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c005350:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c005352:	697b      	ldr	r3, [r7, #20]
 c005354:	f003 0303 	and.w	r3, r3, #3
 c005358:	00db      	lsls	r3, r3, #3
 c00535a:	220f      	movs	r2, #15
 c00535c:	fa02 f303 	lsl.w	r3, r2, r3
 c005360:	43db      	mvns	r3, r3
 c005362:	693a      	ldr	r2, [r7, #16]
 c005364:	4013      	ands	r3, r2
 c005366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c005368:	687b      	ldr	r3, [r7, #4]
 c00536a:	4a52      	ldr	r2, [pc, #328]	; (c0054b4 <HAL_GPIO_Init+0x2e4>)
 c00536c:	4293      	cmp	r3, r2
 c00536e:	d025      	beq.n	c0053bc <HAL_GPIO_Init+0x1ec>
 c005370:	687b      	ldr	r3, [r7, #4]
 c005372:	4a51      	ldr	r2, [pc, #324]	; (c0054b8 <HAL_GPIO_Init+0x2e8>)
 c005374:	4293      	cmp	r3, r2
 c005376:	d01f      	beq.n	c0053b8 <HAL_GPIO_Init+0x1e8>
 c005378:	687b      	ldr	r3, [r7, #4]
 c00537a:	4a50      	ldr	r2, [pc, #320]	; (c0054bc <HAL_GPIO_Init+0x2ec>)
 c00537c:	4293      	cmp	r3, r2
 c00537e:	d019      	beq.n	c0053b4 <HAL_GPIO_Init+0x1e4>
 c005380:	687b      	ldr	r3, [r7, #4]
 c005382:	4a4f      	ldr	r2, [pc, #316]	; (c0054c0 <HAL_GPIO_Init+0x2f0>)
 c005384:	4293      	cmp	r3, r2
 c005386:	d013      	beq.n	c0053b0 <HAL_GPIO_Init+0x1e0>
 c005388:	687b      	ldr	r3, [r7, #4]
 c00538a:	4a4e      	ldr	r2, [pc, #312]	; (c0054c4 <HAL_GPIO_Init+0x2f4>)
 c00538c:	4293      	cmp	r3, r2
 c00538e:	d00d      	beq.n	c0053ac <HAL_GPIO_Init+0x1dc>
 c005390:	687b      	ldr	r3, [r7, #4]
 c005392:	4a4d      	ldr	r2, [pc, #308]	; (c0054c8 <HAL_GPIO_Init+0x2f8>)
 c005394:	4293      	cmp	r3, r2
 c005396:	d007      	beq.n	c0053a8 <HAL_GPIO_Init+0x1d8>
 c005398:	687b      	ldr	r3, [r7, #4]
 c00539a:	4a4c      	ldr	r2, [pc, #304]	; (c0054cc <HAL_GPIO_Init+0x2fc>)
 c00539c:	4293      	cmp	r3, r2
 c00539e:	d101      	bne.n	c0053a4 <HAL_GPIO_Init+0x1d4>
 c0053a0:	2306      	movs	r3, #6
 c0053a2:	e00c      	b.n	c0053be <HAL_GPIO_Init+0x1ee>
 c0053a4:	2307      	movs	r3, #7
 c0053a6:	e00a      	b.n	c0053be <HAL_GPIO_Init+0x1ee>
 c0053a8:	2305      	movs	r3, #5
 c0053aa:	e008      	b.n	c0053be <HAL_GPIO_Init+0x1ee>
 c0053ac:	2304      	movs	r3, #4
 c0053ae:	e006      	b.n	c0053be <HAL_GPIO_Init+0x1ee>
 c0053b0:	2303      	movs	r3, #3
 c0053b2:	e004      	b.n	c0053be <HAL_GPIO_Init+0x1ee>
 c0053b4:	2302      	movs	r3, #2
 c0053b6:	e002      	b.n	c0053be <HAL_GPIO_Init+0x1ee>
 c0053b8:	2301      	movs	r3, #1
 c0053ba:	e000      	b.n	c0053be <HAL_GPIO_Init+0x1ee>
 c0053bc:	2300      	movs	r3, #0
 c0053be:	697a      	ldr	r2, [r7, #20]
 c0053c0:	f002 0203 	and.w	r2, r2, #3
 c0053c4:	00d2      	lsls	r2, r2, #3
 c0053c6:	4093      	lsls	r3, r2
 c0053c8:	693a      	ldr	r2, [r7, #16]
 c0053ca:	4313      	orrs	r3, r2
 c0053cc:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c0053ce:	4938      	ldr	r1, [pc, #224]	; (c0054b0 <HAL_GPIO_Init+0x2e0>)
 c0053d0:	697b      	ldr	r3, [r7, #20]
 c0053d2:	089b      	lsrs	r3, r3, #2
 c0053d4:	3318      	adds	r3, #24
 c0053d6:	693a      	ldr	r2, [r7, #16]
 c0053d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 c0053dc:	4b34      	ldr	r3, [pc, #208]	; (c0054b0 <HAL_GPIO_Init+0x2e0>)
 c0053de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c0053e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0053e4:	68fb      	ldr	r3, [r7, #12]
 c0053e6:	43db      	mvns	r3, r3
 c0053e8:	693a      	ldr	r2, [r7, #16]
 c0053ea:	4013      	ands	r3, r2
 c0053ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c0053ee:	683b      	ldr	r3, [r7, #0]
 c0053f0:	685b      	ldr	r3, [r3, #4]
 c0053f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c0053f6:	2b00      	cmp	r3, #0
 c0053f8:	d003      	beq.n	c005402 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 c0053fa:	693a      	ldr	r2, [r7, #16]
 c0053fc:	68fb      	ldr	r3, [r7, #12]
 c0053fe:	4313      	orrs	r3, r2
 c005400:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c005402:	4a2b      	ldr	r2, [pc, #172]	; (c0054b0 <HAL_GPIO_Init+0x2e0>)
 c005404:	693b      	ldr	r3, [r7, #16]
 c005406:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 c00540a:	4b29      	ldr	r3, [pc, #164]	; (c0054b0 <HAL_GPIO_Init+0x2e0>)
 c00540c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c005410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c005412:	68fb      	ldr	r3, [r7, #12]
 c005414:	43db      	mvns	r3, r3
 c005416:	693a      	ldr	r2, [r7, #16]
 c005418:	4013      	ands	r3, r2
 c00541a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c00541c:	683b      	ldr	r3, [r7, #0]
 c00541e:	685b      	ldr	r3, [r3, #4]
 c005420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c005424:	2b00      	cmp	r3, #0
 c005426:	d003      	beq.n	c005430 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 c005428:	693a      	ldr	r2, [r7, #16]
 c00542a:	68fb      	ldr	r3, [r7, #12]
 c00542c:	4313      	orrs	r3, r2
 c00542e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c005430:	4a1f      	ldr	r2, [pc, #124]	; (c0054b0 <HAL_GPIO_Init+0x2e0>)
 c005432:	693b      	ldr	r3, [r7, #16]
 c005434:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c005438:	4b1d      	ldr	r3, [pc, #116]	; (c0054b0 <HAL_GPIO_Init+0x2e0>)
 c00543a:	681b      	ldr	r3, [r3, #0]
 c00543c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c00543e:	68fb      	ldr	r3, [r7, #12]
 c005440:	43db      	mvns	r3, r3
 c005442:	693a      	ldr	r2, [r7, #16]
 c005444:	4013      	ands	r3, r2
 c005446:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c005448:	683b      	ldr	r3, [r7, #0]
 c00544a:	685b      	ldr	r3, [r3, #4]
 c00544c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c005450:	2b00      	cmp	r3, #0
 c005452:	d003      	beq.n	c00545c <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 c005454:	693a      	ldr	r2, [r7, #16]
 c005456:	68fb      	ldr	r3, [r7, #12]
 c005458:	4313      	orrs	r3, r2
 c00545a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c00545c:	4a14      	ldr	r2, [pc, #80]	; (c0054b0 <HAL_GPIO_Init+0x2e0>)
 c00545e:	693b      	ldr	r3, [r7, #16]
 c005460:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c005462:	4b13      	ldr	r3, [pc, #76]	; (c0054b0 <HAL_GPIO_Init+0x2e0>)
 c005464:	685b      	ldr	r3, [r3, #4]
 c005466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c005468:	68fb      	ldr	r3, [r7, #12]
 c00546a:	43db      	mvns	r3, r3
 c00546c:	693a      	ldr	r2, [r7, #16]
 c00546e:	4013      	ands	r3, r2
 c005470:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c005472:	683b      	ldr	r3, [r7, #0]
 c005474:	685b      	ldr	r3, [r3, #4]
 c005476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c00547a:	2b00      	cmp	r3, #0
 c00547c:	d003      	beq.n	c005486 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 c00547e:	693a      	ldr	r2, [r7, #16]
 c005480:	68fb      	ldr	r3, [r7, #12]
 c005482:	4313      	orrs	r3, r2
 c005484:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c005486:	4a0a      	ldr	r2, [pc, #40]	; (c0054b0 <HAL_GPIO_Init+0x2e0>)
 c005488:	693b      	ldr	r3, [r7, #16]
 c00548a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 c00548c:	697b      	ldr	r3, [r7, #20]
 c00548e:	3301      	adds	r3, #1
 c005490:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c005492:	683b      	ldr	r3, [r7, #0]
 c005494:	681a      	ldr	r2, [r3, #0]
 c005496:	697b      	ldr	r3, [r7, #20]
 c005498:	fa22 f303 	lsr.w	r3, r2, r3
 c00549c:	2b00      	cmp	r3, #0
 c00549e:	f47f ae9f 	bne.w	c0051e0 <HAL_GPIO_Init+0x10>
  }
}
 c0054a2:	bf00      	nop
 c0054a4:	bf00      	nop
 c0054a6:	371c      	adds	r7, #28
 c0054a8:	46bd      	mov	sp, r7
 c0054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0054ae:	4770      	bx	lr
 c0054b0:	5002f400 	.word	0x5002f400
 c0054b4:	52020000 	.word	0x52020000
 c0054b8:	52020400 	.word	0x52020400
 c0054bc:	52020800 	.word	0x52020800
 c0054c0:	52020c00 	.word	0x52020c00
 c0054c4:	52021000 	.word	0x52021000
 c0054c8:	52021400 	.word	0x52021400
 c0054cc:	52021800 	.word	0x52021800

0c0054d0 <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c0054d0:	b480      	push	{r7}
 c0054d2:	b085      	sub	sp, #20
 c0054d4:	af00      	add	r7, sp, #0
 c0054d6:	6078      	str	r0, [r7, #4]
 c0054d8:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c0054da:	683b      	ldr	r3, [r7, #0]
 c0054dc:	f5b3 7f41 	cmp.w	r3, #772	; 0x304
 c0054e0:	d216      	bcs.n	c005510 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c0054e2:	687b      	ldr	r3, [r7, #4]
 c0054e4:	0f1b      	lsrs	r3, r3, #28
 c0054e6:	015a      	lsls	r2, r3, #5
 c0054e8:	687b      	ldr	r3, [r7, #4]
 c0054ea:	f003 031f 	and.w	r3, r3, #31
 c0054ee:	4413      	add	r3, r2
 c0054f0:	2b32      	cmp	r3, #50	; 0x32
 c0054f2:	d80d      	bhi.n	c005510 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c0054f4:	687b      	ldr	r3, [r7, #4]
 c0054f6:	f003 0320 	and.w	r3, r3, #32
 c0054fa:	2b00      	cmp	r3, #0
 c0054fc:	d00a      	beq.n	c005514 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
 c0054fe:	687b      	ldr	r3, [r7, #4]
 c005500:	0f1b      	lsrs	r3, r3, #28
 c005502:	015a      	lsls	r2, r3, #5
 c005504:	687b      	ldr	r3, [r7, #4]
 c005506:	f003 031f 	and.w	r3, r3, #31
 c00550a:	4413      	add	r3, r2
 c00550c:	2b00      	cmp	r3, #0
 c00550e:	d001      	beq.n	c005514 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
  {
    return HAL_ERROR;
 c005510:	2301      	movs	r3, #1
 c005512:	e0a4      	b.n	c00565e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18e>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c005514:	687b      	ldr	r3, [r7, #4]
 c005516:	f003 0320 	and.w	r3, r3, #32
 c00551a:	2b00      	cmp	r3, #0
 c00551c:	d04a      	beq.n	c0055b4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xe4>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c00551e:	683a      	ldr	r2, [r7, #0]
 c005520:	f240 1301 	movw	r3, #257	; 0x101
 c005524:	4013      	ands	r3, r2
 c005526:	f240 1201 	movw	r2, #257	; 0x101
 c00552a:	4293      	cmp	r3, r2
 c00552c:	d10c      	bne.n	c005548 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x78>
    {
      SET_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c00552e:	4b4f      	ldr	r3, [pc, #316]	; (c00566c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005530:	691b      	ldr	r3, [r3, #16]
 c005532:	4b4e      	ldr	r3, [pc, #312]	; (c00566c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c005538:	611a      	str	r2, [r3, #16]
      SET_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c00553a:	4b4c      	ldr	r3, [pc, #304]	; (c00566c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00553c:	695a      	ldr	r2, [r3, #20]
 c00553e:	494b      	ldr	r1, [pc, #300]	; (c00566c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005540:	4b4b      	ldr	r3, [pc, #300]	; (c005670 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a0>)
 c005542:	4313      	orrs	r3, r2
 c005544:	614b      	str	r3, [r1, #20]
 c005546:	e00f      	b.n	c005568 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x98>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c005548:	683b      	ldr	r3, [r7, #0]
 c00554a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00554e:	2b00      	cmp	r3, #0
 c005550:	d00a      	beq.n	c005568 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x98>
    {
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c005552:	4b46      	ldr	r3, [pc, #280]	; (c00566c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005554:	691b      	ldr	r3, [r3, #16]
 c005556:	4b45      	ldr	r3, [pc, #276]	; (c00566c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005558:	2200      	movs	r2, #0
 c00555a:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c00555c:	4b43      	ldr	r3, [pc, #268]	; (c00566c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00555e:	695a      	ldr	r2, [r3, #20]
 c005560:	4942      	ldr	r1, [pc, #264]	; (c00566c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005562:	4b44      	ldr	r3, [pc, #272]	; (c005674 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c005564:	4013      	ands	r3, r2
 c005566:	614b      	str	r3, [r1, #20]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c005568:	683a      	ldr	r2, [r7, #0]
 c00556a:	f240 2302 	movw	r3, #514	; 0x202
 c00556e:	4013      	ands	r3, r2
 c005570:	f240 2202 	movw	r2, #514	; 0x202
 c005574:	4293      	cmp	r3, r2
 c005576:	d10c      	bne.n	c005592 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xc2>
    {
      SET_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c005578:	4b3c      	ldr	r3, [pc, #240]	; (c00566c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00557a:	6a1b      	ldr	r3, [r3, #32]
 c00557c:	4b3b      	ldr	r3, [pc, #236]	; (c00566c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00557e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c005582:	621a      	str	r2, [r3, #32]
      SET_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c005584:	4b39      	ldr	r3, [pc, #228]	; (c00566c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c005588:	4938      	ldr	r1, [pc, #224]	; (c00566c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00558a:	4b39      	ldr	r3, [pc, #228]	; (c005670 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a0>)
 c00558c:	4313      	orrs	r3, r2
 c00558e:	624b      	str	r3, [r1, #36]	; 0x24
 c005590:	e064      	b.n	c00565c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c005592:	683b      	ldr	r3, [r7, #0]
 c005594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c005598:	2b00      	cmp	r3, #0
 c00559a:	d05f      	beq.n	c00565c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    {
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c00559c:	4b33      	ldr	r3, [pc, #204]	; (c00566c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00559e:	6a1b      	ldr	r3, [r3, #32]
 c0055a0:	4b32      	ldr	r3, [pc, #200]	; (c00566c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0055a2:	2200      	movs	r2, #0
 c0055a4:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c0055a6:	4b31      	ldr	r3, [pc, #196]	; (c00566c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0055a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c0055aa:	4930      	ldr	r1, [pc, #192]	; (c00566c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0055ac:	4b31      	ldr	r3, [pc, #196]	; (c005674 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0055ae:	4013      	ands	r3, r2
 c0055b0:	624b      	str	r3, [r1, #36]	; 0x24
 c0055b2:	e053      	b.n	c00565c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
  {
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(GTZC_TZSC->SECCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c0055b4:	687b      	ldr	r3, [r7, #4]
 c0055b6:	0f1a      	lsrs	r2, r3, #28
 c0055b8:	4b2f      	ldr	r3, [pc, #188]	; (c005678 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a8>)
 c0055ba:	4413      	add	r3, r2
 c0055bc:	009b      	lsls	r3, r3, #2
 c0055be:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c0055c0:	683a      	ldr	r2, [r7, #0]
 c0055c2:	f240 1301 	movw	r3, #257	; 0x101
 c0055c6:	4013      	ands	r3, r2
 c0055c8:	f240 1201 	movw	r2, #257	; 0x101
 c0055cc:	4293      	cmp	r3, r2
 c0055ce:	d10a      	bne.n	c0055e6 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x116>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0055d0:	68fb      	ldr	r3, [r7, #12]
 c0055d2:	6819      	ldr	r1, [r3, #0]
 c0055d4:	687b      	ldr	r3, [r7, #4]
 c0055d6:	f003 031f 	and.w	r3, r3, #31
 c0055da:	2201      	movs	r2, #1
 c0055dc:	409a      	lsls	r2, r3
 c0055de:	68fb      	ldr	r3, [r7, #12]
 c0055e0:	430a      	orrs	r2, r1
 c0055e2:	601a      	str	r2, [r3, #0]
 c0055e4:	e010      	b.n	c005608 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x138>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c0055e6:	683b      	ldr	r3, [r7, #0]
 c0055e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0055ec:	2b00      	cmp	r3, #0
 c0055ee:	d00b      	beq.n	c005608 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x138>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0055f0:	68fb      	ldr	r3, [r7, #12]
 c0055f2:	6819      	ldr	r1, [r3, #0]
 c0055f4:	687b      	ldr	r3, [r7, #4]
 c0055f6:	f003 031f 	and.w	r3, r3, #31
 c0055fa:	2201      	movs	r2, #1
 c0055fc:	fa02 f303 	lsl.w	r3, r2, r3
 c005600:	43da      	mvns	r2, r3
 c005602:	68fb      	ldr	r3, [r7, #12]
 c005604:	400a      	ands	r2, r1
 c005606:	601a      	str	r2, [r3, #0]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(GTZC_TZSC->PRIVCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c005608:	687b      	ldr	r3, [r7, #4]
 c00560a:	0f1a      	lsrs	r2, r3, #28
 c00560c:	4b1b      	ldr	r3, [pc, #108]	; (c00567c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1ac>)
 c00560e:	4413      	add	r3, r2
 c005610:	009b      	lsls	r3, r3, #2
 c005612:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c005614:	683a      	ldr	r2, [r7, #0]
 c005616:	f240 2302 	movw	r3, #514	; 0x202
 c00561a:	4013      	ands	r3, r2
 c00561c:	f240 2202 	movw	r2, #514	; 0x202
 c005620:	4293      	cmp	r3, r2
 c005622:	d10a      	bne.n	c00563a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x16a>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c005624:	68fb      	ldr	r3, [r7, #12]
 c005626:	6819      	ldr	r1, [r3, #0]
 c005628:	687b      	ldr	r3, [r7, #4]
 c00562a:	f003 031f 	and.w	r3, r3, #31
 c00562e:	2201      	movs	r2, #1
 c005630:	409a      	lsls	r2, r3
 c005632:	68fb      	ldr	r3, [r7, #12]
 c005634:	430a      	orrs	r2, r1
 c005636:	601a      	str	r2, [r3, #0]
 c005638:	e010      	b.n	c00565c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c00563a:	683b      	ldr	r3, [r7, #0]
 c00563c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c005640:	2b00      	cmp	r3, #0
 c005642:	d00b      	beq.n	c00565c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c005644:	68fb      	ldr	r3, [r7, #12]
 c005646:	6819      	ldr	r1, [r3, #0]
 c005648:	687b      	ldr	r3, [r7, #4]
 c00564a:	f003 031f 	and.w	r3, r3, #31
 c00564e:	2201      	movs	r2, #1
 c005650:	fa02 f303 	lsl.w	r3, r2, r3
 c005654:	43da      	mvns	r2, r3
 c005656:	68fb      	ldr	r3, [r7, #12]
 c005658:	400a      	ands	r2, r1
 c00565a:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c00565c:	2300      	movs	r3, #0
}
 c00565e:	4618      	mov	r0, r3
 c005660:	3714      	adds	r7, #20
 c005662:	46bd      	mov	sp, r7
 c005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005668:	4770      	bx	lr
 c00566a:	bf00      	nop
 c00566c:	50032400 	.word	0x50032400
 c005670:	00076fff 	.word	0x00076fff
 c005674:	fff89000 	.word	0xfff89000
 c005678:	1400c904 	.word	0x1400c904
 c00567c:	1400c908 	.word	0x1400c908

0c005680 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c005680:	b480      	push	{r7}
 c005682:	b089      	sub	sp, #36	; 0x24
 c005684:	af00      	add	r7, sp, #0
 c005686:	6078      	str	r0, [r7, #4]
 c005688:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c00568a:	687b      	ldr	r3, [r7, #4]
 c00568c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c005690:	d00b      	beq.n	c0056aa <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c005692:	687b      	ldr	r3, [r7, #4]
 c005694:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c005698:	d007      	beq.n	c0056aa <HAL_GTZC_MPCBB_ConfigMem+0x2a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c00569a:	687b      	ldr	r3, [r7, #4]
 c00569c:	4a36      	ldr	r2, [pc, #216]	; (c005778 <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c00569e:	4293      	cmp	r3, r2
 c0056a0:	d003      	beq.n	c0056aa <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c0056a2:	687b      	ldr	r3, [r7, #4]
 c0056a4:	4a35      	ldr	r2, [pc, #212]	; (c00577c <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c0056a6:	4293      	cmp	r3, r2
 c0056a8:	d111      	bne.n	c0056ce <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c0056aa:	683b      	ldr	r3, [r7, #0]
 c0056ac:	681b      	ldr	r3, [r3, #0]
 c0056ae:	2b00      	cmp	r3, #0
 c0056b0:	d004      	beq.n	c0056bc <HAL_GTZC_MPCBB_ConfigMem+0x3c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c0056b2:	683b      	ldr	r3, [r7, #0]
 c0056b4:	681b      	ldr	r3, [r3, #0]
 c0056b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c0056ba:	d108      	bne.n	c0056ce <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c0056bc:	683b      	ldr	r3, [r7, #0]
 c0056be:	685b      	ldr	r3, [r3, #4]
 c0056c0:	2b00      	cmp	r3, #0
 c0056c2:	d006      	beq.n	c0056d2 <HAL_GTZC_MPCBB_ConfigMem+0x52>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c0056c4:	683b      	ldr	r3, [r7, #0]
 c0056c6:	685b      	ldr	r3, [r3, #4]
 c0056c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c0056cc:	d001      	beq.n	c0056d2 <HAL_GTZC_MPCBB_ConfigMem+0x52>
  {
    return HAL_ERROR;
 c0056ce:	2301      	movs	r3, #1
 c0056d0:	e04b      	b.n	c00576a <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c0056d2:	683b      	ldr	r3, [r7, #0]
 c0056d4:	685b      	ldr	r3, [r3, #4]
 c0056d6:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c0056d8:	683b      	ldr	r3, [r7, #0]
 c0056da:	681b      	ldr	r3, [r3, #0]
 c0056dc:	693a      	ldr	r2, [r7, #16]
 c0056de:	4313      	orrs	r3, r2
 c0056e0:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0056e2:	687b      	ldr	r3, [r7, #4]
 c0056e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c0056e8:	d003      	beq.n	c0056f2 <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c0056ea:	687b      	ldr	r3, [r7, #4]
 c0056ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c0056f0:	d105      	bne.n	c0056fe <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c0056f2:	4b23      	ldr	r3, [pc, #140]	; (c005780 <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c0056f4:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c0056f6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c0056fa:	61bb      	str	r3, [r7, #24]
 c0056fc:	e004      	b.n	c005708 <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c0056fe:	4b21      	ldr	r3, [pc, #132]	; (c005784 <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c005700:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c005702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c005706:	61bb      	str	r3, [r7, #24]
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c005708:	69fb      	ldr	r3, [r7, #28]
 c00570a:	681b      	ldr	r3, [r3, #0]
 c00570c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c005710:	693b      	ldr	r3, [r7, #16]
 c005712:	431a      	orrs	r2, r3
 c005714:	69fb      	ldr	r3, [r7, #28]
 c005716:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);
  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c005718:	69bb      	ldr	r3, [r7, #24]
 c00571a:	0b5b      	lsrs	r3, r3, #13
 c00571c:	2201      	movs	r2, #1
 c00571e:	fa02 f303 	lsl.w	r3, r2, r3
 c005722:	3b01      	subs	r3, #1
 c005724:	60fb      	str	r3, [r7, #12]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c005726:	69fb      	ldr	r3, [r7, #28]
 c005728:	691a      	ldr	r2, [r3, #16]
 c00572a:	68fb      	ldr	r3, [r7, #12]
 c00572c:	43db      	mvns	r3, r3
 c00572e:	401a      	ands	r2, r3
 c005730:	683b      	ldr	r3, [r7, #0]
 c005732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c005734:	431a      	orrs	r2, r3
 c005736:	69fb      	ldr	r3, [r7, #28]
 c005738:	611a      	str	r2, [r3, #16]

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c00573a:	69bb      	ldr	r3, [r7, #24]
 c00573c:	0b5b      	lsrs	r3, r3, #13
 c00573e:	60bb      	str	r3, [r7, #8]
  for (i = 0U; i < size_in_superblocks; i++)
 c005740:	2300      	movs	r3, #0
 c005742:	617b      	str	r3, [r7, #20]
 c005744:	e00c      	b.n	c005760 <HAL_GTZC_MPCBB_ConfigMem+0xe0>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c005746:	683b      	ldr	r3, [r7, #0]
 c005748:	697a      	ldr	r2, [r7, #20]
 c00574a:	3202      	adds	r2, #2
 c00574c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c005750:	69fb      	ldr	r3, [r7, #28]
 c005752:	697a      	ldr	r2, [r7, #20]
 c005754:	3240      	adds	r2, #64	; 0x40
 c005756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c00575a:	697b      	ldr	r3, [r7, #20]
 c00575c:	3301      	adds	r3, #1
 c00575e:	617b      	str	r3, [r7, #20]
 c005760:	697a      	ldr	r2, [r7, #20]
 c005762:	68bb      	ldr	r3, [r7, #8]
 c005764:	429a      	cmp	r2, r3
 c005766:	d3ee      	bcc.n	c005746 <HAL_GTZC_MPCBB_ConfigMem+0xc6>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  return HAL_OK;
 c005768:	2300      	movs	r3, #0
}
 c00576a:	4618      	mov	r0, r3
 c00576c:	3724      	adds	r7, #36	; 0x24
 c00576e:	46bd      	mov	sp, r7
 c005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005774:	4770      	bx	lr
 c005776:	bf00      	nop
 c005778:	20030000 	.word	0x20030000
 c00577c:	30030000 	.word	0x30030000
 c005780:	50032c00 	.word	0x50032c00
 c005784:	50033000 	.word	0x50033000

0c005788 <HAL_GTZC_TZIC_EnableIT>:
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId.
  *         Use GTZC_PERIPH_ALL to select all peripherals.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZIC_EnableIT(uint32_t PeriphId)
{
 c005788:	b480      	push	{r7}
 c00578a:	b085      	sub	sp, #20
 c00578c:	af00      	add	r7, sp, #0
 c00578e:	6078      	str	r0, [r7, #4]
  uint32_t register_address;

  /* check entry parameters */
  if ((HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZIC_PERIPH_NUMBER)
 c005790:	687b      	ldr	r3, [r7, #4]
 c005792:	0f1b      	lsrs	r3, r3, #28
 c005794:	015a      	lsls	r2, r3, #5
 c005796:	687b      	ldr	r3, [r7, #4]
 c005798:	f003 031f 	and.w	r3, r3, #31
 c00579c:	4413      	add	r3, r2
 c00579e:	2b47      	cmp	r3, #71	; 0x47
 c0057a0:	d80d      	bhi.n	c0057be <HAL_GTZC_TZIC_EnableIT+0x36>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c0057a2:	687b      	ldr	r3, [r7, #4]
 c0057a4:	f003 0320 	and.w	r3, r3, #32
 c0057a8:	2b00      	cmp	r3, #0
 c0057aa:	d00a      	beq.n	c0057c2 <HAL_GTZC_TZIC_EnableIT+0x3a>
 c0057ac:	687b      	ldr	r3, [r7, #4]
 c0057ae:	0f1b      	lsrs	r3, r3, #28
 c0057b0:	015a      	lsls	r2, r3, #5
 c0057b2:	687b      	ldr	r3, [r7, #4]
 c0057b4:	f003 031f 	and.w	r3, r3, #31
 c0057b8:	4413      	add	r3, r2
 c0057ba:	2b00      	cmp	r3, #0
 c0057bc:	d001      	beq.n	c0057c2 <HAL_GTZC_TZIC_EnableIT+0x3a>
  {
    return HAL_ERROR;
 c0057be:	2301      	movs	r3, #1
 c0057c0:	e022      	b.n	c005808 <HAL_GTZC_TZIC_EnableIT+0x80>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c0057c2:	687b      	ldr	r3, [r7, #4]
 c0057c4:	f003 0320 	and.w	r3, r3, #32
 c0057c8:	2b00      	cmp	r3, #0
 c0057ca:	d00a      	beq.n	c0057e2 <HAL_GTZC_TZIC_EnableIT+0x5a>
  {
    /* same configuration is applied to all peripherals */
    WRITE_REG(GTZC_TZIC->IER1, TZIC_IER1_ALL);
 c0057cc:	4b11      	ldr	r3, [pc, #68]	; (c005814 <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c0057ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0057d2:	601a      	str	r2, [r3, #0]
    WRITE_REG(GTZC_TZIC->IER2, TZIC_IER2_ALL);
 c0057d4:	4b0f      	ldr	r3, [pc, #60]	; (c005814 <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c0057d6:	4a10      	ldr	r2, [pc, #64]	; (c005818 <HAL_GTZC_TZIC_EnableIT+0x90>)
 c0057d8:	605a      	str	r2, [r3, #4]
    WRITE_REG(GTZC_TZIC->IER3, TZIC_IER3_ALL);
 c0057da:	4b0e      	ldr	r3, [pc, #56]	; (c005814 <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c0057dc:	22ff      	movs	r2, #255	; 0xff
 c0057de:	609a      	str	r2, [r3, #8]
 c0057e0:	e011      	b.n	c005806 <HAL_GTZC_TZIC_EnableIT+0x7e>
  }
  else
  {
    /* common case where only one peripheral is configured */
    register_address = (uint32_t) &(GTZC_TZIC->IER1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c0057e2:	687b      	ldr	r3, [r7, #4]
 c0057e4:	0f1b      	lsrs	r3, r3, #28
 c0057e6:	f103 53a0 	add.w	r3, r3, #335544320	; 0x14000000
 c0057ea:	f503 434a 	add.w	r3, r3, #51712	; 0xca00
 c0057ee:	009b      	lsls	r3, r3, #2
 c0057f0:	60fb      	str	r3, [r7, #12]
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0057f2:	68fb      	ldr	r3, [r7, #12]
 c0057f4:	6819      	ldr	r1, [r3, #0]
 c0057f6:	687b      	ldr	r3, [r7, #4]
 c0057f8:	f003 031f 	and.w	r3, r3, #31
 c0057fc:	2201      	movs	r2, #1
 c0057fe:	409a      	lsls	r2, r3
 c005800:	68fb      	ldr	r3, [r7, #12]
 c005802:	430a      	orrs	r2, r1
 c005804:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 c005806:	2300      	movs	r3, #0
}
 c005808:	4618      	mov	r0, r3
 c00580a:	3714      	adds	r7, #20
 c00580c:	46bd      	mov	sp, r7
 c00580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005812:	4770      	bx	lr
 c005814:	50032800 	.word	0x50032800
 c005818:	3fff6fff 	.word	0x3fff6fff

0c00581c <HAL_GTZC_IRQHandler>:
/**
  * @brief  This function handles GTZC interrupt request.
  * @retval None.
  */
void HAL_GTZC_IRQHandler(void)
{
 c00581c:	b580      	push	{r7, lr}
 c00581e:	b084      	sub	sp, #16
 c005820:	af00      	add	r7, sp, #0
  uint32_t flag;
  uint32_t ier_itsources;
  uint32_t sr_flags;

  /* Get current IT Flags and IT sources value on 1st register */
  ier_itsources = READ_REG(GTZC_TZIC->IER1);
 c005822:	4b3f      	ldr	r3, [pc, #252]	; (c005920 <HAL_GTZC_IRQHandler+0x104>)
 c005824:	681b      	ldr	r3, [r3, #0]
 c005826:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR1);
 c005828:	4b3d      	ldr	r3, [pc, #244]	; (c005920 <HAL_GTZC_IRQHandler+0x104>)
 c00582a:	691b      	ldr	r3, [r3, #16]
 c00582c:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c00582e:	68ba      	ldr	r2, [r7, #8]
 c005830:	687b      	ldr	r3, [r7, #4]
 c005832:	4013      	ands	r3, r2
 c005834:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c005836:	683b      	ldr	r3, [r7, #0]
 c005838:	2b00      	cmp	r3, #0
 c00583a:	d019      	beq.n	c005870 <HAL_GTZC_IRQHandler+0x54>
  {
    WRITE_REG(GTZC_TZIC->FCR1, flag);
 c00583c:	4a38      	ldr	r2, [pc, #224]	; (c005920 <HAL_GTZC_IRQHandler+0x104>)
 c00583e:	683b      	ldr	r3, [r7, #0]
 c005840:	6213      	str	r3, [r2, #32]

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c005842:	2300      	movs	r3, #0
 c005844:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c005846:	e00d      	b.n	c005864 <HAL_GTZC_IRQHandler+0x48>
    {
      if ((flag & (1UL << position)) != 0U)
 c005848:	683a      	ldr	r2, [r7, #0]
 c00584a:	68fb      	ldr	r3, [r7, #12]
 c00584c:	fa22 f303 	lsr.w	r3, r2, r3
 c005850:	f003 0301 	and.w	r3, r3, #1
 c005854:	2b00      	cmp	r3, #0
 c005856:	d002      	beq.n	c00585e <HAL_GTZC_IRQHandler+0x42>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG1 | position);
 c005858:	68f8      	ldr	r0, [r7, #12]
 c00585a:	f000 f863 	bl	c005924 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c00585e:	68fb      	ldr	r3, [r7, #12]
 c005860:	3301      	adds	r3, #1
 c005862:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c005864:	683a      	ldr	r2, [r7, #0]
 c005866:	68fb      	ldr	r3, [r7, #12]
 c005868:	fa22 f303 	lsr.w	r3, r2, r3
 c00586c:	2b00      	cmp	r3, #0
 c00586e:	d1eb      	bne.n	c005848 <HAL_GTZC_IRQHandler+0x2c>
    }
  }

  /* Get current IT Flags and IT sources value on 2nd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER2);
 c005870:	4b2b      	ldr	r3, [pc, #172]	; (c005920 <HAL_GTZC_IRQHandler+0x104>)
 c005872:	685b      	ldr	r3, [r3, #4]
 c005874:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR2);
 c005876:	4b2a      	ldr	r3, [pc, #168]	; (c005920 <HAL_GTZC_IRQHandler+0x104>)
 c005878:	695b      	ldr	r3, [r3, #20]
 c00587a:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c00587c:	68ba      	ldr	r2, [r7, #8]
 c00587e:	687b      	ldr	r3, [r7, #4]
 c005880:	4013      	ands	r3, r2
 c005882:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c005884:	683b      	ldr	r3, [r7, #0]
 c005886:	2b00      	cmp	r3, #0
 c005888:	d01c      	beq.n	c0058c4 <HAL_GTZC_IRQHandler+0xa8>
  {
    WRITE_REG(GTZC_TZIC->FCR2, flag);
 c00588a:	4a25      	ldr	r2, [pc, #148]	; (c005920 <HAL_GTZC_IRQHandler+0x104>)
 c00588c:	683b      	ldr	r3, [r7, #0]
 c00588e:	6253      	str	r3, [r2, #36]	; 0x24

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c005890:	2300      	movs	r3, #0
 c005892:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c005894:	e010      	b.n	c0058b8 <HAL_GTZC_IRQHandler+0x9c>
    {
      if ((flag & (1UL << position)) != 0U)
 c005896:	683a      	ldr	r2, [r7, #0]
 c005898:	68fb      	ldr	r3, [r7, #12]
 c00589a:	fa22 f303 	lsr.w	r3, r2, r3
 c00589e:	f003 0301 	and.w	r3, r3, #1
 c0058a2:	2b00      	cmp	r3, #0
 c0058a4:	d005      	beq.n	c0058b2 <HAL_GTZC_IRQHandler+0x96>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG2 | position);
 c0058a6:	68fb      	ldr	r3, [r7, #12]
 c0058a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0058ac:	4618      	mov	r0, r3
 c0058ae:	f000 f839 	bl	c005924 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c0058b2:	68fb      	ldr	r3, [r7, #12]
 c0058b4:	3301      	adds	r3, #1
 c0058b6:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0058b8:	683a      	ldr	r2, [r7, #0]
 c0058ba:	68fb      	ldr	r3, [r7, #12]
 c0058bc:	fa22 f303 	lsr.w	r3, r2, r3
 c0058c0:	2b00      	cmp	r3, #0
 c0058c2:	d1e8      	bne.n	c005896 <HAL_GTZC_IRQHandler+0x7a>
    }
  }

  /* Get current IT Flags and IT sources value on 3rd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER3);
 c0058c4:	4b16      	ldr	r3, [pc, #88]	; (c005920 <HAL_GTZC_IRQHandler+0x104>)
 c0058c6:	689b      	ldr	r3, [r3, #8]
 c0058c8:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR3);
 c0058ca:	4b15      	ldr	r3, [pc, #84]	; (c005920 <HAL_GTZC_IRQHandler+0x104>)
 c0058cc:	699b      	ldr	r3, [r3, #24]
 c0058ce:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c0058d0:	68ba      	ldr	r2, [r7, #8]
 c0058d2:	687b      	ldr	r3, [r7, #4]
 c0058d4:	4013      	ands	r3, r2
 c0058d6:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c0058d8:	683b      	ldr	r3, [r7, #0]
 c0058da:	2b00      	cmp	r3, #0
 c0058dc:	d01c      	beq.n	c005918 <HAL_GTZC_IRQHandler+0xfc>
  {
    WRITE_REG(GTZC_TZIC->FCR3, flag);
 c0058de:	4a10      	ldr	r2, [pc, #64]	; (c005920 <HAL_GTZC_IRQHandler+0x104>)
 c0058e0:	683b      	ldr	r3, [r7, #0]
 c0058e2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c0058e4:	2300      	movs	r3, #0
 c0058e6:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0058e8:	e010      	b.n	c00590c <HAL_GTZC_IRQHandler+0xf0>
    {
      if ((flag & (1UL << position)) != 0U)
 c0058ea:	683a      	ldr	r2, [r7, #0]
 c0058ec:	68fb      	ldr	r3, [r7, #12]
 c0058ee:	fa22 f303 	lsr.w	r3, r2, r3
 c0058f2:	f003 0301 	and.w	r3, r3, #1
 c0058f6:	2b00      	cmp	r3, #0
 c0058f8:	d005      	beq.n	c005906 <HAL_GTZC_IRQHandler+0xea>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG3 | position);
 c0058fa:	68fb      	ldr	r3, [r7, #12]
 c0058fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 c005900:	4618      	mov	r0, r3
 c005902:	f000 f80f 	bl	c005924 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c005906:	68fb      	ldr	r3, [r7, #12]
 c005908:	3301      	adds	r3, #1
 c00590a:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c00590c:	683a      	ldr	r2, [r7, #0]
 c00590e:	68fb      	ldr	r3, [r7, #12]
 c005910:	fa22 f303 	lsr.w	r3, r2, r3
 c005914:	2b00      	cmp	r3, #0
 c005916:	d1e8      	bne.n	c0058ea <HAL_GTZC_IRQHandler+0xce>
    }
  }
}
 c005918:	bf00      	nop
 c00591a:	3710      	adds	r7, #16
 c00591c:	46bd      	mov	sp, r7
 c00591e:	bd80      	pop	{r7, pc}
 c005920:	50032800 	.word	0x50032800

0c005924 <HAL_GTZC_TZIC_Callback>:
  * @param  PeriphId Peripheral identifier triggering the illegal access.
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId
  * @retval None.
  */
__weak void HAL_GTZC_TZIC_Callback(uint32_t PeriphId)
{
 c005924:	b480      	push	{r7}
 c005926:	b083      	sub	sp, #12
 c005928:	af00      	add	r7, sp, #0
 c00592a:	6078      	str	r0, [r7, #4]
  UNUSED(PeriphId);

  /* NOTE: This function should not be modified. When the callback is needed,
   * the HAL_GTZC_TZIC_Callback is to be implemented in the user file
   */
}
 c00592c:	bf00      	nop
 c00592e:	370c      	adds	r7, #12
 c005930:	46bd      	mov	sp, r7
 c005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005936:	4770      	bx	lr

0c005938 <HAL_PWR_ConfigAttributes>:
  *            @arg @ref PWR_SEC          Secure-only access
  *            @arg @ref PWR_NSEC         Secure/Non-secure access
  * @retval None
  */
void HAL_PWR_ConfigAttributes(uint32_t Item, uint32_t Attributes)
{
 c005938:	b480      	push	{r7}
 c00593a:	b083      	sub	sp, #12
 c00593c:	af00      	add	r7, sp, #0
 c00593e:	6078      	str	r0, [r7, #4]
 c005940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_PWR_ITEMS_ATTRIBUTES(Item));
  assert_param(IS_PWR_ATTRIBUTES(Attributes));

  /* Privilege/non-privilege attribute */
  if ((Attributes & PWR_PRIV) == PWR_PRIV)
 c005942:	683a      	ldr	r2, [r7, #0]
 c005944:	f240 2302 	movw	r3, #514	; 0x202
 c005948:	4013      	ands	r3, r2
 c00594a:	f240 2202 	movw	r2, #514	; 0x202
 c00594e:	4293      	cmp	r3, r2
 c005950:	d108      	bne.n	c005964 <HAL_PWR_ConfigAttributes+0x2c>
  {
    SET_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_PRIV);
 c005952:	4b1b      	ldr	r3, [pc, #108]	; (c0059c0 <HAL_PWR_ConfigAttributes+0x88>)
 c005954:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c005958:	4a19      	ldr	r2, [pc, #100]	; (c0059c0 <HAL_PWR_ConfigAttributes+0x88>)
 c00595a:	f043 0301 	orr.w	r3, r3, #1
 c00595e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 c005962:	e00c      	b.n	c00597e <HAL_PWR_ConfigAttributes+0x46>
  }
  else if ((Attributes & PWR_NPRIV) == PWR_NPRIV)
 c005964:	683b      	ldr	r3, [r7, #0]
 c005966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c00596a:	2b00      	cmp	r3, #0
 c00596c:	d007      	beq.n	c00597e <HAL_PWR_ConfigAttributes+0x46>
  {
    CLEAR_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_PRIV);
 c00596e:	4b14      	ldr	r3, [pc, #80]	; (c0059c0 <HAL_PWR_ConfigAttributes+0x88>)
 c005970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c005974:	4a12      	ldr	r2, [pc, #72]	; (c0059c0 <HAL_PWR_ConfigAttributes+0x88>)
 c005976:	f023 0301 	bic.w	r3, r3, #1
 c00597a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80


#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)

  /* Secure/non-secure attribute */
  if ((Attributes & PWR_SEC) == PWR_SEC)
 c00597e:	683a      	ldr	r2, [r7, #0]
 c005980:	f240 1301 	movw	r3, #257	; 0x101
 c005984:	4013      	ands	r3, r2
 c005986:	f240 1201 	movw	r2, #257	; 0x101
 c00598a:	4293      	cmp	r3, r2
 c00598c:	d106      	bne.n	c00599c <HAL_PWR_ConfigAttributes+0x64>
  {
    SET_BIT(PWR_S->SECCFGR, Item);
 c00598e:	4b0c      	ldr	r3, [pc, #48]	; (c0059c0 <HAL_PWR_ConfigAttributes+0x88>)
 c005990:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 c005992:	490b      	ldr	r1, [pc, #44]	; (c0059c0 <HAL_PWR_ConfigAttributes+0x88>)
 c005994:	687b      	ldr	r3, [r7, #4]
 c005996:	4313      	orrs	r3, r2
 c005998:	678b      	str	r3, [r1, #120]	; 0x78
  {
    /* do nothing */
  }

#endif /* __ARM_FEATURE_CMSE */
}
 c00599a:	e00b      	b.n	c0059b4 <HAL_PWR_ConfigAttributes+0x7c>
  else if ((Attributes & PWR_NSEC) == PWR_NSEC)
 c00599c:	683b      	ldr	r3, [r7, #0]
 c00599e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0059a2:	2b00      	cmp	r3, #0
 c0059a4:	d006      	beq.n	c0059b4 <HAL_PWR_ConfigAttributes+0x7c>
    CLEAR_BIT(PWR_S->SECCFGR, Item);
 c0059a6:	4b06      	ldr	r3, [pc, #24]	; (c0059c0 <HAL_PWR_ConfigAttributes+0x88>)
 c0059a8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 c0059aa:	687b      	ldr	r3, [r7, #4]
 c0059ac:	43db      	mvns	r3, r3
 c0059ae:	4904      	ldr	r1, [pc, #16]	; (c0059c0 <HAL_PWR_ConfigAttributes+0x88>)
 c0059b0:	4013      	ands	r3, r2
 c0059b2:	678b      	str	r3, [r1, #120]	; 0x78
}
 c0059b4:	bf00      	nop
 c0059b6:	370c      	adds	r7, #12
 c0059b8:	46bd      	mov	sp, r7
 c0059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0059be:	4770      	bx	lr
 c0059c0:	50007000 	.word	0x50007000

0c0059c4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c0059c4:	b480      	push	{r7}
 c0059c6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 c0059c8:	4b04      	ldr	r3, [pc, #16]	; (c0059dc <HAL_PWREx_GetVoltageRange+0x18>)
 c0059ca:	681b      	ldr	r3, [r3, #0]
 c0059cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 c0059d0:	4618      	mov	r0, r3
 c0059d2:	46bd      	mov	sp, r7
 c0059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0059d8:	4770      	bx	lr
 c0059da:	bf00      	nop
 c0059dc:	50007000 	.word	0x50007000

0c0059e0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c0059e0:	b580      	push	{r7, lr}
 c0059e2:	b084      	sub	sp, #16
 c0059e4:	af00      	add	r7, sp, #0
 c0059e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c0059e8:	4b27      	ldr	r3, [pc, #156]	; (c005a88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0059ea:	681b      	ldr	r3, [r3, #0]
 c0059ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 c0059f0:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 c0059f2:	f000 f871 	bl	c005ad8 <HAL_PWREx_SMPS_GetEffectiveMode>
 c0059f6:	4603      	mov	r3, r0
 c0059f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c0059fc:	d101      	bne.n	c005a02 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 c0059fe:	2301      	movs	r3, #1
 c005a00:	e03e      	b.n	c005a80 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 c005a02:	4b21      	ldr	r3, [pc, #132]	; (c005a88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c005a04:	68db      	ldr	r3, [r3, #12]
 c005a06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c005a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c005a0e:	d101      	bne.n	c005a14 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 c005a10:	2301      	movs	r3, #1
 c005a12:	e035      	b.n	c005a80 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c005a14:	68ba      	ldr	r2, [r7, #8]
 c005a16:	687b      	ldr	r3, [r7, #4]
 c005a18:	429a      	cmp	r2, r3
 c005a1a:	d101      	bne.n	c005a20 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 c005a1c:	2300      	movs	r3, #0
 c005a1e:	e02f      	b.n	c005a80 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c005a20:	4b19      	ldr	r3, [pc, #100]	; (c005a88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c005a22:	681b      	ldr	r3, [r3, #0]
 c005a24:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 c005a28:	4917      	ldr	r1, [pc, #92]	; (c005a88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c005a2a:	687b      	ldr	r3, [r7, #4]
 c005a2c:	4313      	orrs	r3, r2
 c005a2e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c005a30:	4b16      	ldr	r3, [pc, #88]	; (c005a8c <HAL_PWREx_ControlVoltageScaling+0xac>)
 c005a32:	681b      	ldr	r3, [r3, #0]
 c005a34:	095b      	lsrs	r3, r3, #5
 c005a36:	4a16      	ldr	r2, [pc, #88]	; (c005a90 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 c005a38:	fba2 2303 	umull	r2, r3, r2, r3
 c005a3c:	09db      	lsrs	r3, r3, #7
 c005a3e:	2232      	movs	r2, #50	; 0x32
 c005a40:	fb02 f303 	mul.w	r3, r2, r3
 c005a44:	4a13      	ldr	r2, [pc, #76]	; (c005a94 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 c005a46:	fba2 2303 	umull	r2, r3, r2, r3
 c005a4a:	08db      	lsrs	r3, r3, #3
 c005a4c:	3301      	adds	r3, #1
 c005a4e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c005a50:	e002      	b.n	c005a58 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 c005a52:	68fb      	ldr	r3, [r7, #12]
 c005a54:	3b01      	subs	r3, #1
 c005a56:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c005a58:	4b0b      	ldr	r3, [pc, #44]	; (c005a88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c005a5a:	695b      	ldr	r3, [r3, #20]
 c005a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c005a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005a64:	d102      	bne.n	c005a6c <HAL_PWREx_ControlVoltageScaling+0x8c>
 c005a66:	68fb      	ldr	r3, [r7, #12]
 c005a68:	2b00      	cmp	r3, #0
 c005a6a:	d1f2      	bne.n	c005a52 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 c005a6c:	4b06      	ldr	r3, [pc, #24]	; (c005a88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c005a6e:	695b      	ldr	r3, [r3, #20]
 c005a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c005a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005a78:	d101      	bne.n	c005a7e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 c005a7a:	2303      	movs	r3, #3
 c005a7c:	e000      	b.n	c005a80 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 c005a7e:	2300      	movs	r3, #0
}
 c005a80:	4618      	mov	r0, r3
 c005a82:	3710      	adds	r7, #16
 c005a84:	46bd      	mov	sp, r7
 c005a86:	bd80      	pop	{r7, pc}
 c005a88:	50007000 	.word	0x50007000
 c005a8c:	30000064 	.word	0x30000064
 c005a90:	0a7c5ac5 	.word	0x0a7c5ac5
 c005a94:	cccccccd 	.word	0xcccccccd

0c005a98 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 c005a98:	b480      	push	{r7}
 c005a9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 c005a9c:	4b05      	ldr	r3, [pc, #20]	; (c005ab4 <HAL_PWREx_EnableVddIO2+0x1c>)
 c005a9e:	685b      	ldr	r3, [r3, #4]
 c005aa0:	4a04      	ldr	r2, [pc, #16]	; (c005ab4 <HAL_PWREx_EnableVddIO2+0x1c>)
 c005aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 c005aa6:	6053      	str	r3, [r2, #4]
}
 c005aa8:	bf00      	nop
 c005aaa:	46bd      	mov	sp, r7
 c005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005ab0:	4770      	bx	lr
 c005ab2:	bf00      	nop
 c005ab4:	50007000 	.word	0x50007000

0c005ab8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 c005ab8:	b480      	push	{r7}
 c005aba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 c005abc:	4b05      	ldr	r3, [pc, #20]	; (c005ad4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c005abe:	689b      	ldr	r3, [r3, #8]
 c005ac0:	4a04      	ldr	r2, [pc, #16]	; (c005ad4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c005ac2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c005ac6:	6093      	str	r3, [r2, #8]
}
 c005ac8:	bf00      	nop
 c005aca:	46bd      	mov	sp, r7
 c005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005ad0:	4770      	bx	lr
 c005ad2:	bf00      	nop
 c005ad4:	50007000 	.word	0x50007000

0c005ad8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 c005ad8:	b480      	push	{r7}
 c005ada:	b083      	sub	sp, #12
 c005adc:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 c005ade:	4b0f      	ldr	r3, [pc, #60]	; (c005b1c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 c005ae0:	691b      	ldr	r3, [r3, #16]
 c005ae2:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 c005ae4:	683b      	ldr	r3, [r7, #0]
 c005ae6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c005aea:	2b00      	cmp	r3, #0
 c005aec:	d003      	beq.n	c005af6 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 c005aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c005af2:	607b      	str	r3, [r7, #4]
 c005af4:	e00a      	b.n	c005b0c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 c005af6:	683b      	ldr	r3, [r7, #0]
 c005af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c005afc:	2b00      	cmp	r3, #0
 c005afe:	d103      	bne.n	c005b08 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 c005b00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c005b04:	607b      	str	r3, [r7, #4]
 c005b06:	e001      	b.n	c005b0c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 c005b08:	2300      	movs	r3, #0
 c005b0a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 c005b0c:	687b      	ldr	r3, [r7, #4]
}
 c005b0e:	4618      	mov	r0, r3
 c005b10:	370c      	adds	r7, #12
 c005b12:	46bd      	mov	sp, r7
 c005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005b18:	4770      	bx	lr
 c005b1a:	bf00      	nop
 c005b1c:	50007000 	.word	0x50007000

0c005b20 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 c005b20:	b580      	push	{r7, lr}
 c005b22:	b088      	sub	sp, #32
 c005b24:	af00      	add	r7, sp, #0
 c005b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 c005b28:	687b      	ldr	r3, [r7, #4]
 c005b2a:	2b00      	cmp	r3, #0
 c005b2c:	d102      	bne.n	c005b34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 c005b2e:	2301      	movs	r3, #1
 c005b30:	f000 bcd0 	b.w	c0064d4 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c005b34:	4b99      	ldr	r3, [pc, #612]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005b36:	689b      	ldr	r3, [r3, #8]
 c005b38:	f003 030c 	and.w	r3, r3, #12
 c005b3c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c005b3e:	4b97      	ldr	r3, [pc, #604]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005b40:	68db      	ldr	r3, [r3, #12]
 c005b42:	f003 0303 	and.w	r3, r3, #3
 c005b46:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c005b48:	687b      	ldr	r3, [r7, #4]
 c005b4a:	681b      	ldr	r3, [r3, #0]
 c005b4c:	f003 0310 	and.w	r3, r3, #16
 c005b50:	2b00      	cmp	r3, #0
 c005b52:	f000 80e9 	beq.w	c005d28 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c005b56:	69bb      	ldr	r3, [r7, #24]
 c005b58:	2b00      	cmp	r3, #0
 c005b5a:	d006      	beq.n	c005b6a <HAL_RCC_OscConfig+0x4a>
 c005b5c:	69bb      	ldr	r3, [r7, #24]
 c005b5e:	2b0c      	cmp	r3, #12
 c005b60:	f040 8083 	bne.w	c005c6a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c005b64:	697b      	ldr	r3, [r7, #20]
 c005b66:	2b01      	cmp	r3, #1
 c005b68:	d17f      	bne.n	c005c6a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c005b6a:	4b8c      	ldr	r3, [pc, #560]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005b6c:	681b      	ldr	r3, [r3, #0]
 c005b6e:	f003 0302 	and.w	r3, r3, #2
 c005b72:	2b00      	cmp	r3, #0
 c005b74:	d006      	beq.n	c005b84 <HAL_RCC_OscConfig+0x64>
 c005b76:	687b      	ldr	r3, [r7, #4]
 c005b78:	69db      	ldr	r3, [r3, #28]
 c005b7a:	2b00      	cmp	r3, #0
 c005b7c:	d102      	bne.n	c005b84 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 c005b7e:	2301      	movs	r3, #1
 c005b80:	f000 bca8 	b.w	c0064d4 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c005b84:	687b      	ldr	r3, [r7, #4]
 c005b86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c005b88:	4b84      	ldr	r3, [pc, #528]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005b8a:	681b      	ldr	r3, [r3, #0]
 c005b8c:	f003 0308 	and.w	r3, r3, #8
 c005b90:	2b00      	cmp	r3, #0
 c005b92:	d004      	beq.n	c005b9e <HAL_RCC_OscConfig+0x7e>
 c005b94:	4b81      	ldr	r3, [pc, #516]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005b96:	681b      	ldr	r3, [r3, #0]
 c005b98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c005b9c:	e005      	b.n	c005baa <HAL_RCC_OscConfig+0x8a>
 c005b9e:	4b7f      	ldr	r3, [pc, #508]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c005ba4:	091b      	lsrs	r3, r3, #4
 c005ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c005baa:	4293      	cmp	r3, r2
 c005bac:	d224      	bcs.n	c005bf8 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c005bae:	687b      	ldr	r3, [r7, #4]
 c005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005bb2:	4618      	mov	r0, r3
 c005bb4:	f000 fe96 	bl	c0068e4 <RCC_SetFlashLatencyFromMSIRange>
 c005bb8:	4603      	mov	r3, r0
 c005bba:	2b00      	cmp	r3, #0
 c005bbc:	d002      	beq.n	c005bc4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 c005bbe:	2301      	movs	r3, #1
 c005bc0:	f000 bc88 	b.w	c0064d4 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c005bc4:	4b75      	ldr	r3, [pc, #468]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005bc6:	681b      	ldr	r3, [r3, #0]
 c005bc8:	4a74      	ldr	r2, [pc, #464]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005bca:	f043 0308 	orr.w	r3, r3, #8
 c005bce:	6013      	str	r3, [r2, #0]
 c005bd0:	4b72      	ldr	r3, [pc, #456]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005bd2:	681b      	ldr	r3, [r3, #0]
 c005bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c005bd8:	687b      	ldr	r3, [r7, #4]
 c005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005bdc:	496f      	ldr	r1, [pc, #444]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005bde:	4313      	orrs	r3, r2
 c005be0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c005be2:	4b6e      	ldr	r3, [pc, #440]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005be4:	685b      	ldr	r3, [r3, #4]
 c005be6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c005bea:	687b      	ldr	r3, [r7, #4]
 c005bec:	6a1b      	ldr	r3, [r3, #32]
 c005bee:	021b      	lsls	r3, r3, #8
 c005bf0:	496a      	ldr	r1, [pc, #424]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005bf2:	4313      	orrs	r3, r2
 c005bf4:	604b      	str	r3, [r1, #4]
 c005bf6:	e026      	b.n	c005c46 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c005bf8:	4b68      	ldr	r3, [pc, #416]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005bfa:	681b      	ldr	r3, [r3, #0]
 c005bfc:	4a67      	ldr	r2, [pc, #412]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005bfe:	f043 0308 	orr.w	r3, r3, #8
 c005c02:	6013      	str	r3, [r2, #0]
 c005c04:	4b65      	ldr	r3, [pc, #404]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005c06:	681b      	ldr	r3, [r3, #0]
 c005c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c005c0c:	687b      	ldr	r3, [r7, #4]
 c005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005c10:	4962      	ldr	r1, [pc, #392]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005c12:	4313      	orrs	r3, r2
 c005c14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c005c16:	4b61      	ldr	r3, [pc, #388]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005c18:	685b      	ldr	r3, [r3, #4]
 c005c1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c005c1e:	687b      	ldr	r3, [r7, #4]
 c005c20:	6a1b      	ldr	r3, [r3, #32]
 c005c22:	021b      	lsls	r3, r3, #8
 c005c24:	495d      	ldr	r1, [pc, #372]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005c26:	4313      	orrs	r3, r2
 c005c28:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c005c2a:	69bb      	ldr	r3, [r7, #24]
 c005c2c:	2b00      	cmp	r3, #0
 c005c2e:	d10a      	bne.n	c005c46 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c005c30:	687b      	ldr	r3, [r7, #4]
 c005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005c34:	4618      	mov	r0, r3
 c005c36:	f000 fe55 	bl	c0068e4 <RCC_SetFlashLatencyFromMSIRange>
 c005c3a:	4603      	mov	r3, r0
 c005c3c:	2b00      	cmp	r3, #0
 c005c3e:	d002      	beq.n	c005c46 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 c005c40:	2301      	movs	r3, #1
 c005c42:	f000 bc47 	b.w	c0064d4 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c005c46:	f000 fe11 	bl	c00686c <HAL_RCC_GetHCLKFreq>
 c005c4a:	4603      	mov	r3, r0
 c005c4c:	4a54      	ldr	r2, [pc, #336]	; (c005da0 <HAL_RCC_OscConfig+0x280>)
 c005c4e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 c005c50:	4b54      	ldr	r3, [pc, #336]	; (c005da4 <HAL_RCC_OscConfig+0x284>)
 c005c52:	681b      	ldr	r3, [r3, #0]
 c005c54:	4618      	mov	r0, r3
 c005c56:	f7ff f94f 	bl	c004ef8 <HAL_InitTick>
 c005c5a:	4603      	mov	r3, r0
 c005c5c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 c005c5e:	7bfb      	ldrb	r3, [r7, #15]
 c005c60:	2b00      	cmp	r3, #0
 c005c62:	d060      	beq.n	c005d26 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 c005c64:	7bfb      	ldrb	r3, [r7, #15]
 c005c66:	f000 bc35 	b.w	c0064d4 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c005c6a:	687b      	ldr	r3, [r7, #4]
 c005c6c:	69db      	ldr	r3, [r3, #28]
 c005c6e:	2b00      	cmp	r3, #0
 c005c70:	d039      	beq.n	c005ce6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 c005c72:	4b4a      	ldr	r3, [pc, #296]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005c74:	681b      	ldr	r3, [r3, #0]
 c005c76:	4a49      	ldr	r2, [pc, #292]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005c78:	f043 0301 	orr.w	r3, r3, #1
 c005c7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c005c7e:	f7ff f98b 	bl	c004f98 <HAL_GetTick>
 c005c82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c005c84:	e00f      	b.n	c005ca6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c005c86:	f7ff f987 	bl	c004f98 <HAL_GetTick>
 c005c8a:	4602      	mov	r2, r0
 c005c8c:	693b      	ldr	r3, [r7, #16]
 c005c8e:	1ad3      	subs	r3, r2, r3
 c005c90:	2b02      	cmp	r3, #2
 c005c92:	d908      	bls.n	c005ca6 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c005c94:	4b41      	ldr	r3, [pc, #260]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005c96:	681b      	ldr	r3, [r3, #0]
 c005c98:	f003 0302 	and.w	r3, r3, #2
 c005c9c:	2b00      	cmp	r3, #0
 c005c9e:	d102      	bne.n	c005ca6 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 c005ca0:	2303      	movs	r3, #3
 c005ca2:	f000 bc17 	b.w	c0064d4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c005ca6:	4b3d      	ldr	r3, [pc, #244]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005ca8:	681b      	ldr	r3, [r3, #0]
 c005caa:	f003 0302 	and.w	r3, r3, #2
 c005cae:	2b00      	cmp	r3, #0
 c005cb0:	d0e9      	beq.n	c005c86 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c005cb2:	4b3a      	ldr	r3, [pc, #232]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005cb4:	681b      	ldr	r3, [r3, #0]
 c005cb6:	4a39      	ldr	r2, [pc, #228]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005cb8:	f043 0308 	orr.w	r3, r3, #8
 c005cbc:	6013      	str	r3, [r2, #0]
 c005cbe:	4b37      	ldr	r3, [pc, #220]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005cc0:	681b      	ldr	r3, [r3, #0]
 c005cc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c005cc6:	687b      	ldr	r3, [r7, #4]
 c005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005cca:	4934      	ldr	r1, [pc, #208]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005ccc:	4313      	orrs	r3, r2
 c005cce:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c005cd0:	4b32      	ldr	r3, [pc, #200]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005cd2:	685b      	ldr	r3, [r3, #4]
 c005cd4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c005cd8:	687b      	ldr	r3, [r7, #4]
 c005cda:	6a1b      	ldr	r3, [r3, #32]
 c005cdc:	021b      	lsls	r3, r3, #8
 c005cde:	492f      	ldr	r1, [pc, #188]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005ce0:	4313      	orrs	r3, r2
 c005ce2:	604b      	str	r3, [r1, #4]
 c005ce4:	e020      	b.n	c005d28 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 c005ce6:	4b2d      	ldr	r3, [pc, #180]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005ce8:	681b      	ldr	r3, [r3, #0]
 c005cea:	4a2c      	ldr	r2, [pc, #176]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005cec:	f023 0301 	bic.w	r3, r3, #1
 c005cf0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c005cf2:	f7ff f951 	bl	c004f98 <HAL_GetTick>
 c005cf6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c005cf8:	e00e      	b.n	c005d18 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c005cfa:	f7ff f94d 	bl	c004f98 <HAL_GetTick>
 c005cfe:	4602      	mov	r2, r0
 c005d00:	693b      	ldr	r3, [r7, #16]
 c005d02:	1ad3      	subs	r3, r2, r3
 c005d04:	2b02      	cmp	r3, #2
 c005d06:	d907      	bls.n	c005d18 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c005d08:	4b24      	ldr	r3, [pc, #144]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005d0a:	681b      	ldr	r3, [r3, #0]
 c005d0c:	f003 0302 	and.w	r3, r3, #2
 c005d10:	2b00      	cmp	r3, #0
 c005d12:	d001      	beq.n	c005d18 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 c005d14:	2303      	movs	r3, #3
 c005d16:	e3dd      	b.n	c0064d4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c005d18:	4b20      	ldr	r3, [pc, #128]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005d1a:	681b      	ldr	r3, [r3, #0]
 c005d1c:	f003 0302 	and.w	r3, r3, #2
 c005d20:	2b00      	cmp	r3, #0
 c005d22:	d1ea      	bne.n	c005cfa <HAL_RCC_OscConfig+0x1da>
 c005d24:	e000      	b.n	c005d28 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c005d26:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c005d28:	687b      	ldr	r3, [r7, #4]
 c005d2a:	681b      	ldr	r3, [r3, #0]
 c005d2c:	f003 0301 	and.w	r3, r3, #1
 c005d30:	2b00      	cmp	r3, #0
 c005d32:	d07e      	beq.n	c005e32 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c005d34:	69bb      	ldr	r3, [r7, #24]
 c005d36:	2b08      	cmp	r3, #8
 c005d38:	d005      	beq.n	c005d46 <HAL_RCC_OscConfig+0x226>
 c005d3a:	69bb      	ldr	r3, [r7, #24]
 c005d3c:	2b0c      	cmp	r3, #12
 c005d3e:	d10e      	bne.n	c005d5e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c005d40:	697b      	ldr	r3, [r7, #20]
 c005d42:	2b03      	cmp	r3, #3
 c005d44:	d10b      	bne.n	c005d5e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c005d46:	4b15      	ldr	r3, [pc, #84]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005d48:	681b      	ldr	r3, [r3, #0]
 c005d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c005d4e:	2b00      	cmp	r3, #0
 c005d50:	d06e      	beq.n	c005e30 <HAL_RCC_OscConfig+0x310>
 c005d52:	687b      	ldr	r3, [r7, #4]
 c005d54:	685b      	ldr	r3, [r3, #4]
 c005d56:	2b00      	cmp	r3, #0
 c005d58:	d16a      	bne.n	c005e30 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 c005d5a:	2301      	movs	r3, #1
 c005d5c:	e3ba      	b.n	c0064d4 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c005d5e:	687b      	ldr	r3, [r7, #4]
 c005d60:	685b      	ldr	r3, [r3, #4]
 c005d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c005d66:	d106      	bne.n	c005d76 <HAL_RCC_OscConfig+0x256>
 c005d68:	4b0c      	ldr	r3, [pc, #48]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005d6a:	681b      	ldr	r3, [r3, #0]
 c005d6c:	4a0b      	ldr	r2, [pc, #44]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c005d72:	6013      	str	r3, [r2, #0]
 c005d74:	e024      	b.n	c005dc0 <HAL_RCC_OscConfig+0x2a0>
 c005d76:	687b      	ldr	r3, [r7, #4]
 c005d78:	685b      	ldr	r3, [r3, #4]
 c005d7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c005d7e:	d113      	bne.n	c005da8 <HAL_RCC_OscConfig+0x288>
 c005d80:	4b06      	ldr	r3, [pc, #24]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005d82:	681b      	ldr	r3, [r3, #0]
 c005d84:	4a05      	ldr	r2, [pc, #20]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005d86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c005d8a:	6013      	str	r3, [r2, #0]
 c005d8c:	4b03      	ldr	r3, [pc, #12]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005d8e:	681b      	ldr	r3, [r3, #0]
 c005d90:	4a02      	ldr	r2, [pc, #8]	; (c005d9c <HAL_RCC_OscConfig+0x27c>)
 c005d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c005d96:	6013      	str	r3, [r2, #0]
 c005d98:	e012      	b.n	c005dc0 <HAL_RCC_OscConfig+0x2a0>
 c005d9a:	bf00      	nop
 c005d9c:	50021000 	.word	0x50021000
 c005da0:	30000064 	.word	0x30000064
 c005da4:	3000006c 	.word	0x3000006c
 c005da8:	4b8b      	ldr	r3, [pc, #556]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005daa:	681b      	ldr	r3, [r3, #0]
 c005dac:	4a8a      	ldr	r2, [pc, #552]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c005db2:	6013      	str	r3, [r2, #0]
 c005db4:	4b88      	ldr	r3, [pc, #544]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005db6:	681b      	ldr	r3, [r3, #0]
 c005db8:	4a87      	ldr	r2, [pc, #540]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c005dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c005dc0:	687b      	ldr	r3, [r7, #4]
 c005dc2:	685b      	ldr	r3, [r3, #4]
 c005dc4:	2b00      	cmp	r3, #0
 c005dc6:	d019      	beq.n	c005dfc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c005dc8:	f7ff f8e6 	bl	c004f98 <HAL_GetTick>
 c005dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c005dce:	e00e      	b.n	c005dee <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c005dd0:	f7ff f8e2 	bl	c004f98 <HAL_GetTick>
 c005dd4:	4602      	mov	r2, r0
 c005dd6:	693b      	ldr	r3, [r7, #16]
 c005dd8:	1ad3      	subs	r3, r2, r3
 c005dda:	2b64      	cmp	r3, #100	; 0x64
 c005ddc:	d907      	bls.n	c005dee <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c005dde:	4b7e      	ldr	r3, [pc, #504]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005de0:	681b      	ldr	r3, [r3, #0]
 c005de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c005de6:	2b00      	cmp	r3, #0
 c005de8:	d101      	bne.n	c005dee <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 c005dea:	2303      	movs	r3, #3
 c005dec:	e372      	b.n	c0064d4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c005dee:	4b7a      	ldr	r3, [pc, #488]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005df0:	681b      	ldr	r3, [r3, #0]
 c005df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c005df6:	2b00      	cmp	r3, #0
 c005df8:	d0ea      	beq.n	c005dd0 <HAL_RCC_OscConfig+0x2b0>
 c005dfa:	e01a      	b.n	c005e32 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c005dfc:	f7ff f8cc 	bl	c004f98 <HAL_GetTick>
 c005e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c005e02:	e00e      	b.n	c005e22 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c005e04:	f7ff f8c8 	bl	c004f98 <HAL_GetTick>
 c005e08:	4602      	mov	r2, r0
 c005e0a:	693b      	ldr	r3, [r7, #16]
 c005e0c:	1ad3      	subs	r3, r2, r3
 c005e0e:	2b64      	cmp	r3, #100	; 0x64
 c005e10:	d907      	bls.n	c005e22 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c005e12:	4b71      	ldr	r3, [pc, #452]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005e14:	681b      	ldr	r3, [r3, #0]
 c005e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c005e1a:	2b00      	cmp	r3, #0
 c005e1c:	d001      	beq.n	c005e22 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 c005e1e:	2303      	movs	r3, #3
 c005e20:	e358      	b.n	c0064d4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c005e22:	4b6d      	ldr	r3, [pc, #436]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005e24:	681b      	ldr	r3, [r3, #0]
 c005e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c005e2a:	2b00      	cmp	r3, #0
 c005e2c:	d1ea      	bne.n	c005e04 <HAL_RCC_OscConfig+0x2e4>
 c005e2e:	e000      	b.n	c005e32 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c005e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c005e32:	687b      	ldr	r3, [r7, #4]
 c005e34:	681b      	ldr	r3, [r3, #0]
 c005e36:	f003 0302 	and.w	r3, r3, #2
 c005e3a:	2b00      	cmp	r3, #0
 c005e3c:	d06c      	beq.n	c005f18 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c005e3e:	69bb      	ldr	r3, [r7, #24]
 c005e40:	2b04      	cmp	r3, #4
 c005e42:	d005      	beq.n	c005e50 <HAL_RCC_OscConfig+0x330>
 c005e44:	69bb      	ldr	r3, [r7, #24]
 c005e46:	2b0c      	cmp	r3, #12
 c005e48:	d119      	bne.n	c005e7e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c005e4a:	697b      	ldr	r3, [r7, #20]
 c005e4c:	2b02      	cmp	r3, #2
 c005e4e:	d116      	bne.n	c005e7e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c005e50:	4b61      	ldr	r3, [pc, #388]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005e52:	681b      	ldr	r3, [r3, #0]
 c005e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c005e58:	2b00      	cmp	r3, #0
 c005e5a:	d005      	beq.n	c005e68 <HAL_RCC_OscConfig+0x348>
 c005e5c:	687b      	ldr	r3, [r7, #4]
 c005e5e:	68db      	ldr	r3, [r3, #12]
 c005e60:	2b00      	cmp	r3, #0
 c005e62:	d101      	bne.n	c005e68 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 c005e64:	2301      	movs	r3, #1
 c005e66:	e335      	b.n	c0064d4 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c005e68:	4b5b      	ldr	r3, [pc, #364]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005e6a:	685b      	ldr	r3, [r3, #4]
 c005e6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c005e70:	687b      	ldr	r3, [r7, #4]
 c005e72:	691b      	ldr	r3, [r3, #16]
 c005e74:	061b      	lsls	r3, r3, #24
 c005e76:	4958      	ldr	r1, [pc, #352]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005e78:	4313      	orrs	r3, r2
 c005e7a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c005e7c:	e04c      	b.n	c005f18 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c005e7e:	687b      	ldr	r3, [r7, #4]
 c005e80:	68db      	ldr	r3, [r3, #12]
 c005e82:	2b00      	cmp	r3, #0
 c005e84:	d029      	beq.n	c005eda <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 c005e86:	4b54      	ldr	r3, [pc, #336]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005e88:	681b      	ldr	r3, [r3, #0]
 c005e8a:	4a53      	ldr	r2, [pc, #332]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c005e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c005e92:	f7ff f881 	bl	c004f98 <HAL_GetTick>
 c005e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c005e98:	e00e      	b.n	c005eb8 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c005e9a:	f7ff f87d 	bl	c004f98 <HAL_GetTick>
 c005e9e:	4602      	mov	r2, r0
 c005ea0:	693b      	ldr	r3, [r7, #16]
 c005ea2:	1ad3      	subs	r3, r2, r3
 c005ea4:	2b02      	cmp	r3, #2
 c005ea6:	d907      	bls.n	c005eb8 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c005ea8:	4b4b      	ldr	r3, [pc, #300]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005eaa:	681b      	ldr	r3, [r3, #0]
 c005eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c005eb0:	2b00      	cmp	r3, #0
 c005eb2:	d101      	bne.n	c005eb8 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 c005eb4:	2303      	movs	r3, #3
 c005eb6:	e30d      	b.n	c0064d4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c005eb8:	4b47      	ldr	r3, [pc, #284]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005eba:	681b      	ldr	r3, [r3, #0]
 c005ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c005ec0:	2b00      	cmp	r3, #0
 c005ec2:	d0ea      	beq.n	c005e9a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c005ec4:	4b44      	ldr	r3, [pc, #272]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005ec6:	685b      	ldr	r3, [r3, #4]
 c005ec8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c005ecc:	687b      	ldr	r3, [r7, #4]
 c005ece:	691b      	ldr	r3, [r3, #16]
 c005ed0:	061b      	lsls	r3, r3, #24
 c005ed2:	4941      	ldr	r1, [pc, #260]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005ed4:	4313      	orrs	r3, r2
 c005ed6:	604b      	str	r3, [r1, #4]
 c005ed8:	e01e      	b.n	c005f18 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 c005eda:	4b3f      	ldr	r3, [pc, #252]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005edc:	681b      	ldr	r3, [r3, #0]
 c005ede:	4a3e      	ldr	r2, [pc, #248]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c005ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c005ee6:	f7ff f857 	bl	c004f98 <HAL_GetTick>
 c005eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c005eec:	e00e      	b.n	c005f0c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c005eee:	f7ff f853 	bl	c004f98 <HAL_GetTick>
 c005ef2:	4602      	mov	r2, r0
 c005ef4:	693b      	ldr	r3, [r7, #16]
 c005ef6:	1ad3      	subs	r3, r2, r3
 c005ef8:	2b02      	cmp	r3, #2
 c005efa:	d907      	bls.n	c005f0c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c005efc:	4b36      	ldr	r3, [pc, #216]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005efe:	681b      	ldr	r3, [r3, #0]
 c005f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c005f04:	2b00      	cmp	r3, #0
 c005f06:	d001      	beq.n	c005f0c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 c005f08:	2303      	movs	r3, #3
 c005f0a:	e2e3      	b.n	c0064d4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c005f0c:	4b32      	ldr	r3, [pc, #200]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005f0e:	681b      	ldr	r3, [r3, #0]
 c005f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c005f14:	2b00      	cmp	r3, #0
 c005f16:	d1ea      	bne.n	c005eee <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c005f18:	687b      	ldr	r3, [r7, #4]
 c005f1a:	681b      	ldr	r3, [r3, #0]
 c005f1c:	f003 0308 	and.w	r3, r3, #8
 c005f20:	2b00      	cmp	r3, #0
 c005f22:	d062      	beq.n	c005fea <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c005f24:	687b      	ldr	r3, [r7, #4]
 c005f26:	695b      	ldr	r3, [r3, #20]
 c005f28:	2b00      	cmp	r3, #0
 c005f2a:	d038      	beq.n	c005f9e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c005f2c:	687b      	ldr	r3, [r7, #4]
 c005f2e:	699b      	ldr	r3, [r3, #24]
 c005f30:	2b00      	cmp	r3, #0
 c005f32:	d108      	bne.n	c005f46 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c005f34:	4b28      	ldr	r3, [pc, #160]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c005f3a:	4a27      	ldr	r2, [pc, #156]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005f3c:	f023 0310 	bic.w	r3, r3, #16
 c005f40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 c005f44:	e007      	b.n	c005f56 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c005f46:	4b24      	ldr	r3, [pc, #144]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c005f4c:	4a22      	ldr	r2, [pc, #136]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005f4e:	f043 0310 	orr.w	r3, r3, #16
 c005f52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 c005f56:	4b20      	ldr	r3, [pc, #128]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c005f5c:	4a1e      	ldr	r2, [pc, #120]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005f5e:	f043 0301 	orr.w	r3, r3, #1
 c005f62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c005f66:	f7ff f817 	bl	c004f98 <HAL_GetTick>
 c005f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c005f6c:	e00f      	b.n	c005f8e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c005f6e:	f7ff f813 	bl	c004f98 <HAL_GetTick>
 c005f72:	4602      	mov	r2, r0
 c005f74:	693b      	ldr	r3, [r7, #16]
 c005f76:	1ad3      	subs	r3, r2, r3
 c005f78:	2b07      	cmp	r3, #7
 c005f7a:	d908      	bls.n	c005f8e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c005f7c:	4b16      	ldr	r3, [pc, #88]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c005f82:	f003 0302 	and.w	r3, r3, #2
 c005f86:	2b00      	cmp	r3, #0
 c005f88:	d101      	bne.n	c005f8e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 c005f8a:	2303      	movs	r3, #3
 c005f8c:	e2a2      	b.n	c0064d4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c005f8e:	4b12      	ldr	r3, [pc, #72]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c005f94:	f003 0302 	and.w	r3, r3, #2
 c005f98:	2b00      	cmp	r3, #0
 c005f9a:	d0e8      	beq.n	c005f6e <HAL_RCC_OscConfig+0x44e>
 c005f9c:	e025      	b.n	c005fea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 c005f9e:	4b0e      	ldr	r3, [pc, #56]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c005fa4:	4a0c      	ldr	r2, [pc, #48]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005fa6:	f023 0301 	bic.w	r3, r3, #1
 c005faa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c005fae:	f7fe fff3 	bl	c004f98 <HAL_GetTick>
 c005fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c005fb4:	e012      	b.n	c005fdc <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c005fb6:	f7fe ffef 	bl	c004f98 <HAL_GetTick>
 c005fba:	4602      	mov	r2, r0
 c005fbc:	693b      	ldr	r3, [r7, #16]
 c005fbe:	1ad3      	subs	r3, r2, r3
 c005fc0:	2b07      	cmp	r3, #7
 c005fc2:	d90b      	bls.n	c005fdc <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c005fc4:	4b04      	ldr	r3, [pc, #16]	; (c005fd8 <HAL_RCC_OscConfig+0x4b8>)
 c005fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c005fca:	f003 0302 	and.w	r3, r3, #2
 c005fce:	2b00      	cmp	r3, #0
 c005fd0:	d004      	beq.n	c005fdc <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 c005fd2:	2303      	movs	r3, #3
 c005fd4:	e27e      	b.n	c0064d4 <HAL_RCC_OscConfig+0x9b4>
 c005fd6:	bf00      	nop
 c005fd8:	50021000 	.word	0x50021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c005fdc:	4ba8      	ldr	r3, [pc, #672]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c005fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c005fe2:	f003 0302 	and.w	r3, r3, #2
 c005fe6:	2b00      	cmp	r3, #0
 c005fe8:	d1e5      	bne.n	c005fb6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c005fea:	687b      	ldr	r3, [r7, #4]
 c005fec:	681b      	ldr	r3, [r3, #0]
 c005fee:	f003 0304 	and.w	r3, r3, #4
 c005ff2:	2b00      	cmp	r3, #0
 c005ff4:	f000 812d 	beq.w	c006252 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 c005ff8:	2300      	movs	r3, #0
 c005ffa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 c005ffc:	4ba0      	ldr	r3, [pc, #640]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c005ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c006000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c006004:	2b00      	cmp	r3, #0
 c006006:	d10d      	bne.n	c006024 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c006008:	4b9d      	ldr	r3, [pc, #628]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c00600a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00600c:	4a9c      	ldr	r2, [pc, #624]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c00600e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c006012:	6593      	str	r3, [r2, #88]	; 0x58
 c006014:	4b9a      	ldr	r3, [pc, #616]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c006016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c006018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c00601c:	60bb      	str	r3, [r7, #8]
 c00601e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 c006020:	2301      	movs	r3, #1
 c006022:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c006024:	4b97      	ldr	r3, [pc, #604]	; (c006284 <HAL_RCC_OscConfig+0x764>)
 c006026:	681b      	ldr	r3, [r3, #0]
 c006028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00602c:	2b00      	cmp	r3, #0
 c00602e:	d11e      	bne.n	c00606e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c006030:	4b94      	ldr	r3, [pc, #592]	; (c006284 <HAL_RCC_OscConfig+0x764>)
 c006032:	681b      	ldr	r3, [r3, #0]
 c006034:	4a93      	ldr	r2, [pc, #588]	; (c006284 <HAL_RCC_OscConfig+0x764>)
 c006036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c00603a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c00603c:	f7fe ffac 	bl	c004f98 <HAL_GetTick>
 c006040:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c006042:	e00e      	b.n	c006062 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c006044:	f7fe ffa8 	bl	c004f98 <HAL_GetTick>
 c006048:	4602      	mov	r2, r0
 c00604a:	693b      	ldr	r3, [r7, #16]
 c00604c:	1ad3      	subs	r3, r2, r3
 c00604e:	2b02      	cmp	r3, #2
 c006050:	d907      	bls.n	c006062 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c006052:	4b8c      	ldr	r3, [pc, #560]	; (c006284 <HAL_RCC_OscConfig+0x764>)
 c006054:	681b      	ldr	r3, [r3, #0]
 c006056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00605a:	2b00      	cmp	r3, #0
 c00605c:	d101      	bne.n	c006062 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 c00605e:	2303      	movs	r3, #3
 c006060:	e238      	b.n	c0064d4 <HAL_RCC_OscConfig+0x9b4>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c006062:	4b88      	ldr	r3, [pc, #544]	; (c006284 <HAL_RCC_OscConfig+0x764>)
 c006064:	681b      	ldr	r3, [r3, #0]
 c006066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00606a:	2b00      	cmp	r3, #0
 c00606c:	d0ea      	beq.n	c006044 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c00606e:	687b      	ldr	r3, [r7, #4]
 c006070:	689b      	ldr	r3, [r3, #8]
 c006072:	f003 0301 	and.w	r3, r3, #1
 c006076:	2b00      	cmp	r3, #0
 c006078:	d01f      	beq.n	c0060ba <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c00607a:	687b      	ldr	r3, [r7, #4]
 c00607c:	689b      	ldr	r3, [r3, #8]
 c00607e:	f003 0304 	and.w	r3, r3, #4
 c006082:	2b00      	cmp	r3, #0
 c006084:	d010      	beq.n	c0060a8 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c006086:	4b7e      	ldr	r3, [pc, #504]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c006088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00608c:	4a7c      	ldr	r2, [pc, #496]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c00608e:	f043 0304 	orr.w	r3, r3, #4
 c006092:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c006096:	4b7a      	ldr	r3, [pc, #488]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c006098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00609c:	4a78      	ldr	r2, [pc, #480]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c00609e:	f043 0301 	orr.w	r3, r3, #1
 c0060a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c0060a6:	e018      	b.n	c0060da <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c0060a8:	4b75      	ldr	r3, [pc, #468]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c0060aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0060ae:	4a74      	ldr	r2, [pc, #464]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c0060b0:	f043 0301 	orr.w	r3, r3, #1
 c0060b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c0060b8:	e00f      	b.n	c0060da <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c0060ba:	4b71      	ldr	r3, [pc, #452]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c0060bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0060c0:	4a6f      	ldr	r2, [pc, #444]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c0060c2:	f023 0301 	bic.w	r3, r3, #1
 c0060c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c0060ca:	4b6d      	ldr	r3, [pc, #436]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c0060cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0060d0:	4a6b      	ldr	r2, [pc, #428]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c0060d2:	f023 0304 	bic.w	r3, r3, #4
 c0060d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c0060da:	687b      	ldr	r3, [r7, #4]
 c0060dc:	689b      	ldr	r3, [r3, #8]
 c0060de:	2b00      	cmp	r3, #0
 c0060e0:	d068      	beq.n	c0061b4 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0060e2:	f7fe ff59 	bl	c004f98 <HAL_GetTick>
 c0060e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0060e8:	e011      	b.n	c00610e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0060ea:	f7fe ff55 	bl	c004f98 <HAL_GetTick>
 c0060ee:	4602      	mov	r2, r0
 c0060f0:	693b      	ldr	r3, [r7, #16]
 c0060f2:	1ad3      	subs	r3, r2, r3
 c0060f4:	f241 3288 	movw	r2, #5000	; 0x1388
 c0060f8:	4293      	cmp	r3, r2
 c0060fa:	d908      	bls.n	c00610e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0060fc:	4b60      	ldr	r3, [pc, #384]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c0060fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006102:	f003 0302 	and.w	r3, r3, #2
 c006106:	2b00      	cmp	r3, #0
 c006108:	d101      	bne.n	c00610e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 c00610a:	2303      	movs	r3, #3
 c00610c:	e1e2      	b.n	c0064d4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c00610e:	4b5c      	ldr	r3, [pc, #368]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c006110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006114:	f003 0302 	and.w	r3, r3, #2
 c006118:	2b00      	cmp	r3, #0
 c00611a:	d0e6      	beq.n	c0060ea <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c00611c:	687b      	ldr	r3, [r7, #4]
 c00611e:	689b      	ldr	r3, [r3, #8]
 c006120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c006124:	2b00      	cmp	r3, #0
 c006126:	d022      	beq.n	c00616e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c006128:	4b55      	ldr	r3, [pc, #340]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c00612a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00612e:	4a54      	ldr	r2, [pc, #336]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c006130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c006134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c006138:	e011      	b.n	c00615e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00613a:	f7fe ff2d 	bl	c004f98 <HAL_GetTick>
 c00613e:	4602      	mov	r2, r0
 c006140:	693b      	ldr	r3, [r7, #16]
 c006142:	1ad3      	subs	r3, r2, r3
 c006144:	f241 3288 	movw	r2, #5000	; 0x1388
 c006148:	4293      	cmp	r3, r2
 c00614a:	d908      	bls.n	c00615e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c00614c:	4b4c      	ldr	r3, [pc, #304]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c00614e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c006156:	2b00      	cmp	r3, #0
 c006158:	d101      	bne.n	c00615e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 c00615a:	2303      	movs	r3, #3
 c00615c:	e1ba      	b.n	c0064d4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c00615e:	4b48      	ldr	r3, [pc, #288]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c006160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c006168:	2b00      	cmp	r3, #0
 c00616a:	d0e6      	beq.n	c00613a <HAL_RCC_OscConfig+0x61a>
 c00616c:	e068      	b.n	c006240 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c00616e:	4b44      	ldr	r3, [pc, #272]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c006170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006174:	4a42      	ldr	r2, [pc, #264]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c006176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c00617a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c00617e:	e011      	b.n	c0061a4 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c006180:	f7fe ff0a 	bl	c004f98 <HAL_GetTick>
 c006184:	4602      	mov	r2, r0
 c006186:	693b      	ldr	r3, [r7, #16]
 c006188:	1ad3      	subs	r3, r2, r3
 c00618a:	f241 3288 	movw	r2, #5000	; 0x1388
 c00618e:	4293      	cmp	r3, r2
 c006190:	d908      	bls.n	c0061a4 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006192:	4b3b      	ldr	r3, [pc, #236]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c006194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00619c:	2b00      	cmp	r3, #0
 c00619e:	d001      	beq.n	c0061a4 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 c0061a0:	2303      	movs	r3, #3
 c0061a2:	e197      	b.n	c0064d4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0061a4:	4b36      	ldr	r3, [pc, #216]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c0061a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0061aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c0061ae:	2b00      	cmp	r3, #0
 c0061b0:	d1e6      	bne.n	c006180 <HAL_RCC_OscConfig+0x660>
 c0061b2:	e045      	b.n	c006240 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0061b4:	f7fe fef0 	bl	c004f98 <HAL_GetTick>
 c0061b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c0061ba:	e011      	b.n	c0061e0 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0061bc:	f7fe feec 	bl	c004f98 <HAL_GetTick>
 c0061c0:	4602      	mov	r2, r0
 c0061c2:	693b      	ldr	r3, [r7, #16]
 c0061c4:	1ad3      	subs	r3, r2, r3
 c0061c6:	f241 3288 	movw	r2, #5000	; 0x1388
 c0061ca:	4293      	cmp	r3, r2
 c0061cc:	d908      	bls.n	c0061e0 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c0061ce:	4b2c      	ldr	r3, [pc, #176]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c0061d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0061d4:	f003 0302 	and.w	r3, r3, #2
 c0061d8:	2b00      	cmp	r3, #0
 c0061da:	d001      	beq.n	c0061e0 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 c0061dc:	2303      	movs	r3, #3
 c0061de:	e179      	b.n	c0064d4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c0061e0:	4b27      	ldr	r3, [pc, #156]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c0061e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0061e6:	f003 0302 	and.w	r3, r3, #2
 c0061ea:	2b00      	cmp	r3, #0
 c0061ec:	d1e6      	bne.n	c0061bc <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c0061ee:	4b24      	ldr	r3, [pc, #144]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c0061f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0061f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0061f8:	2b00      	cmp	r3, #0
 c0061fa:	d021      	beq.n	c006240 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c0061fc:	4b20      	ldr	r3, [pc, #128]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c0061fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006202:	4a1f      	ldr	r2, [pc, #124]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c006204:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c006208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c00620c:	e011      	b.n	c006232 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00620e:	f7fe fec3 	bl	c004f98 <HAL_GetTick>
 c006212:	4602      	mov	r2, r0
 c006214:	693b      	ldr	r3, [r7, #16]
 c006216:	1ad3      	subs	r3, r2, r3
 c006218:	f241 3288 	movw	r2, #5000	; 0x1388
 c00621c:	4293      	cmp	r3, r2
 c00621e:	d908      	bls.n	c006232 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006220:	4b17      	ldr	r3, [pc, #92]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c006222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00622a:	2b00      	cmp	r3, #0
 c00622c:	d001      	beq.n	c006232 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 c00622e:	2303      	movs	r3, #3
 c006230:	e150      	b.n	c0064d4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006232:	4b13      	ldr	r3, [pc, #76]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c006234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00623c:	2b00      	cmp	r3, #0
 c00623e:	d1e6      	bne.n	c00620e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c006240:	7ffb      	ldrb	r3, [r7, #31]
 c006242:	2b01      	cmp	r3, #1
 c006244:	d105      	bne.n	c006252 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c006246:	4b0e      	ldr	r3, [pc, #56]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c006248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00624a:	4a0d      	ldr	r2, [pc, #52]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c00624c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c006250:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c006252:	687b      	ldr	r3, [r7, #4]
 c006254:	681b      	ldr	r3, [r3, #0]
 c006256:	f003 0320 	and.w	r3, r3, #32
 c00625a:	2b00      	cmp	r3, #0
 c00625c:	d04f      	beq.n	c0062fe <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c00625e:	687b      	ldr	r3, [r7, #4]
 c006260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006262:	2b00      	cmp	r3, #0
 c006264:	d028      	beq.n	c0062b8 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 c006266:	4b06      	ldr	r3, [pc, #24]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c006268:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c00626c:	4a04      	ldr	r2, [pc, #16]	; (c006280 <HAL_RCC_OscConfig+0x760>)
 c00626e:	f043 0301 	orr.w	r3, r3, #1
 c006272:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c006276:	f7fe fe8f 	bl	c004f98 <HAL_GetTick>
 c00627a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c00627c:	e014      	b.n	c0062a8 <HAL_RCC_OscConfig+0x788>
 c00627e:	bf00      	nop
 c006280:	50021000 	.word	0x50021000
 c006284:	50007000 	.word	0x50007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c006288:	f7fe fe86 	bl	c004f98 <HAL_GetTick>
 c00628c:	4602      	mov	r2, r0
 c00628e:	693b      	ldr	r3, [r7, #16]
 c006290:	1ad3      	subs	r3, r2, r3
 c006292:	2b02      	cmp	r3, #2
 c006294:	d908      	bls.n	c0062a8 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c006296:	4b91      	ldr	r3, [pc, #580]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c006298:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c00629c:	f003 0302 	and.w	r3, r3, #2
 c0062a0:	2b00      	cmp	r3, #0
 c0062a2:	d101      	bne.n	c0062a8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 c0062a4:	2303      	movs	r3, #3
 c0062a6:	e115      	b.n	c0064d4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c0062a8:	4b8c      	ldr	r3, [pc, #560]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c0062aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0062ae:	f003 0302 	and.w	r3, r3, #2
 c0062b2:	2b00      	cmp	r3, #0
 c0062b4:	d0e8      	beq.n	c006288 <HAL_RCC_OscConfig+0x768>
 c0062b6:	e022      	b.n	c0062fe <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 c0062b8:	4b88      	ldr	r3, [pc, #544]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c0062ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0062be:	4a87      	ldr	r2, [pc, #540]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c0062c0:	f023 0301 	bic.w	r3, r3, #1
 c0062c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0062c8:	f7fe fe66 	bl	c004f98 <HAL_GetTick>
 c0062cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c0062ce:	e00f      	b.n	c0062f0 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c0062d0:	f7fe fe62 	bl	c004f98 <HAL_GetTick>
 c0062d4:	4602      	mov	r2, r0
 c0062d6:	693b      	ldr	r3, [r7, #16]
 c0062d8:	1ad3      	subs	r3, r2, r3
 c0062da:	2b02      	cmp	r3, #2
 c0062dc:	d908      	bls.n	c0062f0 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c0062de:	4b7f      	ldr	r3, [pc, #508]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c0062e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0062e4:	f003 0302 	and.w	r3, r3, #2
 c0062e8:	2b00      	cmp	r3, #0
 c0062ea:	d001      	beq.n	c0062f0 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 c0062ec:	2303      	movs	r3, #3
 c0062ee:	e0f1      	b.n	c0064d4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c0062f0:	4b7a      	ldr	r3, [pc, #488]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c0062f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0062f6:	f003 0302 	and.w	r3, r3, #2
 c0062fa:	2b00      	cmp	r3, #0
 c0062fc:	d1e8      	bne.n	c0062d0 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 c0062fe:	687b      	ldr	r3, [r7, #4]
 c006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c006302:	2b00      	cmp	r3, #0
 c006304:	f000 80e5 	beq.w	c0064d2 <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c006308:	4b74      	ldr	r3, [pc, #464]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c00630a:	689b      	ldr	r3, [r3, #8]
 c00630c:	f003 030c 	and.w	r3, r3, #12
 c006310:	2b0c      	cmp	r3, #12
 c006312:	f000 809f 	beq.w	c006454 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c006316:	687b      	ldr	r3, [r7, #4]
 c006318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c00631a:	2b02      	cmp	r3, #2
 c00631c:	d166      	bne.n	c0063ec <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c00631e:	4b6f      	ldr	r3, [pc, #444]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c006320:	681b      	ldr	r3, [r3, #0]
 c006322:	4a6e      	ldr	r2, [pc, #440]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c006324:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c006328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00632a:	f7fe fe35 	bl	c004f98 <HAL_GetTick>
 c00632e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006330:	e00e      	b.n	c006350 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c006332:	f7fe fe31 	bl	c004f98 <HAL_GetTick>
 c006336:	4602      	mov	r2, r0
 c006338:	693b      	ldr	r3, [r7, #16]
 c00633a:	1ad3      	subs	r3, r2, r3
 c00633c:	2b02      	cmp	r3, #2
 c00633e:	d907      	bls.n	c006350 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006340:	4b66      	ldr	r3, [pc, #408]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c006342:	681b      	ldr	r3, [r3, #0]
 c006344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c006348:	2b00      	cmp	r3, #0
 c00634a:	d001      	beq.n	c006350 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 c00634c:	2303      	movs	r3, #3
 c00634e:	e0c1      	b.n	c0064d4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006350:	4b62      	ldr	r3, [pc, #392]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c006352:	681b      	ldr	r3, [r3, #0]
 c006354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c006358:	2b00      	cmp	r3, #0
 c00635a:	d1ea      	bne.n	c006332 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 c00635c:	4b5f      	ldr	r3, [pc, #380]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c00635e:	68da      	ldr	r2, [r3, #12]
 c006360:	4b5f      	ldr	r3, [pc, #380]	; (c0064e0 <HAL_RCC_OscConfig+0x9c0>)
 c006362:	4013      	ands	r3, r2
 c006364:	687a      	ldr	r2, [r7, #4]
 c006366:	6b11      	ldr	r1, [r2, #48]	; 0x30
 c006368:	687a      	ldr	r2, [r7, #4]
 c00636a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 c00636c:	3a01      	subs	r2, #1
 c00636e:	0112      	lsls	r2, r2, #4
 c006370:	4311      	orrs	r1, r2
 c006372:	687a      	ldr	r2, [r7, #4]
 c006374:	6b92      	ldr	r2, [r2, #56]	; 0x38
 c006376:	0212      	lsls	r2, r2, #8
 c006378:	4311      	orrs	r1, r2
 c00637a:	687a      	ldr	r2, [r7, #4]
 c00637c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 c00637e:	0852      	lsrs	r2, r2, #1
 c006380:	3a01      	subs	r2, #1
 c006382:	0552      	lsls	r2, r2, #21
 c006384:	4311      	orrs	r1, r2
 c006386:	687a      	ldr	r2, [r7, #4]
 c006388:	6c52      	ldr	r2, [r2, #68]	; 0x44
 c00638a:	0852      	lsrs	r2, r2, #1
 c00638c:	3a01      	subs	r2, #1
 c00638e:	0652      	lsls	r2, r2, #25
 c006390:	4311      	orrs	r1, r2
 c006392:	687a      	ldr	r2, [r7, #4]
 c006394:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 c006396:	06d2      	lsls	r2, r2, #27
 c006398:	430a      	orrs	r2, r1
 c00639a:	4950      	ldr	r1, [pc, #320]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c00639c:	4313      	orrs	r3, r2
 c00639e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 c0063a0:	4b4e      	ldr	r3, [pc, #312]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c0063a2:	681b      	ldr	r3, [r3, #0]
 c0063a4:	4a4d      	ldr	r2, [pc, #308]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c0063a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c0063aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 c0063ac:	4b4b      	ldr	r3, [pc, #300]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c0063ae:	68db      	ldr	r3, [r3, #12]
 c0063b0:	4a4a      	ldr	r2, [pc, #296]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c0063b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c0063b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0063b8:	f7fe fdee 	bl	c004f98 <HAL_GetTick>
 c0063bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c0063be:	e00e      	b.n	c0063de <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c0063c0:	f7fe fdea 	bl	c004f98 <HAL_GetTick>
 c0063c4:	4602      	mov	r2, r0
 c0063c6:	693b      	ldr	r3, [r7, #16]
 c0063c8:	1ad3      	subs	r3, r2, r3
 c0063ca:	2b02      	cmp	r3, #2
 c0063cc:	d907      	bls.n	c0063de <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c0063ce:	4b43      	ldr	r3, [pc, #268]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c0063d0:	681b      	ldr	r3, [r3, #0]
 c0063d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0063d6:	2b00      	cmp	r3, #0
 c0063d8:	d101      	bne.n	c0063de <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 c0063da:	2303      	movs	r3, #3
 c0063dc:	e07a      	b.n	c0064d4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c0063de:	4b3f      	ldr	r3, [pc, #252]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c0063e0:	681b      	ldr	r3, [r3, #0]
 c0063e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0063e6:	2b00      	cmp	r3, #0
 c0063e8:	d0ea      	beq.n	c0063c0 <HAL_RCC_OscConfig+0x8a0>
 c0063ea:	e072      	b.n	c0064d2 <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c0063ec:	4b3b      	ldr	r3, [pc, #236]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c0063ee:	681b      	ldr	r3, [r3, #0]
 c0063f0:	4a3a      	ldr	r2, [pc, #232]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c0063f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c0063f6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 c0063f8:	4b38      	ldr	r3, [pc, #224]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c0063fa:	681b      	ldr	r3, [r3, #0]
 c0063fc:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 c006400:	2b00      	cmp	r3, #0
 c006402:	d105      	bne.n	c006410 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 c006404:	4b35      	ldr	r3, [pc, #212]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c006406:	68db      	ldr	r3, [r3, #12]
 c006408:	4a34      	ldr	r2, [pc, #208]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c00640a:	f023 0303 	bic.w	r3, r3, #3
 c00640e:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c006410:	4b32      	ldr	r3, [pc, #200]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c006412:	68db      	ldr	r3, [r3, #12]
 c006414:	4a31      	ldr	r2, [pc, #196]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c006416:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 c00641a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c00641e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c006420:	f7fe fdba 	bl	c004f98 <HAL_GetTick>
 c006424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006426:	e00e      	b.n	c006446 <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c006428:	f7fe fdb6 	bl	c004f98 <HAL_GetTick>
 c00642c:	4602      	mov	r2, r0
 c00642e:	693b      	ldr	r3, [r7, #16]
 c006430:	1ad3      	subs	r3, r2, r3
 c006432:	2b02      	cmp	r3, #2
 c006434:	d907      	bls.n	c006446 <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006436:	4b29      	ldr	r3, [pc, #164]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c006438:	681b      	ldr	r3, [r3, #0]
 c00643a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00643e:	2b00      	cmp	r3, #0
 c006440:	d001      	beq.n	c006446 <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 c006442:	2303      	movs	r3, #3
 c006444:	e046      	b.n	c0064d4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006446:	4b25      	ldr	r3, [pc, #148]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c006448:	681b      	ldr	r3, [r3, #0]
 c00644a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00644e:	2b00      	cmp	r3, #0
 c006450:	d1ea      	bne.n	c006428 <HAL_RCC_OscConfig+0x908>
 c006452:	e03e      	b.n	c0064d2 <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 c006454:	687b      	ldr	r3, [r7, #4]
 c006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c006458:	2b01      	cmp	r3, #1
 c00645a:	d101      	bne.n	c006460 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 c00645c:	2301      	movs	r3, #1
 c00645e:	e039      	b.n	c0064d4 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 c006460:	4b1e      	ldr	r3, [pc, #120]	; (c0064dc <HAL_RCC_OscConfig+0x9bc>)
 c006462:	68db      	ldr	r3, [r3, #12]
 c006464:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c006466:	697b      	ldr	r3, [r7, #20]
 c006468:	f003 0203 	and.w	r2, r3, #3
 c00646c:	687b      	ldr	r3, [r7, #4]
 c00646e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c006470:	429a      	cmp	r2, r3
 c006472:	d12c      	bne.n	c0064ce <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c006474:	697b      	ldr	r3, [r7, #20]
 c006476:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 c00647a:	687b      	ldr	r3, [r7, #4]
 c00647c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00647e:	3b01      	subs	r3, #1
 c006480:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c006482:	429a      	cmp	r2, r3
 c006484:	d123      	bne.n	c0064ce <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c006486:	697b      	ldr	r3, [r7, #20]
 c006488:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 c00648c:	687b      	ldr	r3, [r7, #4]
 c00648e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c006490:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c006492:	429a      	cmp	r2, r3
 c006494:	d11b      	bne.n	c0064ce <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c006496:	697b      	ldr	r3, [r7, #20]
 c006498:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 c00649c:	687b      	ldr	r3, [r7, #4]
 c00649e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c0064a0:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c0064a2:	429a      	cmp	r2, r3
 c0064a4:	d113      	bne.n	c0064ce <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c0064a6:	697b      	ldr	r3, [r7, #20]
 c0064a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 c0064ac:	687b      	ldr	r3, [r7, #4]
 c0064ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c0064b0:	085b      	lsrs	r3, r3, #1
 c0064b2:	3b01      	subs	r3, #1
 c0064b4:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c0064b6:	429a      	cmp	r2, r3
 c0064b8:	d109      	bne.n	c0064ce <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 c0064ba:	697b      	ldr	r3, [r7, #20]
 c0064bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 c0064c0:	687b      	ldr	r3, [r7, #4]
 c0064c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0064c4:	085b      	lsrs	r3, r3, #1
 c0064c6:	3b01      	subs	r3, #1
 c0064c8:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c0064ca:	429a      	cmp	r2, r3
 c0064cc:	d001      	beq.n	c0064d2 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 c0064ce:	2301      	movs	r3, #1
 c0064d0:	e000      	b.n	c0064d4 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 c0064d2:	2300      	movs	r3, #0
}
 c0064d4:	4618      	mov	r0, r3
 c0064d6:	3720      	adds	r7, #32
 c0064d8:	46bd      	mov	sp, r7
 c0064da:	bd80      	pop	{r7, pc}
 c0064dc:	50021000 	.word	0x50021000
 c0064e0:	019f800c 	.word	0x019f800c

0c0064e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 c0064e4:	b580      	push	{r7, lr}
 c0064e6:	b086      	sub	sp, #24
 c0064e8:	af00      	add	r7, sp, #0
 c0064ea:	6078      	str	r0, [r7, #4]
 c0064ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c0064ee:	2300      	movs	r3, #0
 c0064f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 c0064f2:	687b      	ldr	r3, [r7, #4]
 c0064f4:	2b00      	cmp	r3, #0
 c0064f6:	d101      	bne.n	c0064fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 c0064f8:	2301      	movs	r3, #1
 c0064fa:	e10d      	b.n	c006718 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c0064fc:	4b88      	ldr	r3, [pc, #544]	; (c006720 <HAL_RCC_ClockConfig+0x23c>)
 c0064fe:	681b      	ldr	r3, [r3, #0]
 c006500:	f003 030f 	and.w	r3, r3, #15
 c006504:	683a      	ldr	r2, [r7, #0]
 c006506:	429a      	cmp	r2, r3
 c006508:	d910      	bls.n	c00652c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c00650a:	4b85      	ldr	r3, [pc, #532]	; (c006720 <HAL_RCC_ClockConfig+0x23c>)
 c00650c:	681b      	ldr	r3, [r3, #0]
 c00650e:	f023 020f 	bic.w	r2, r3, #15
 c006512:	4983      	ldr	r1, [pc, #524]	; (c006720 <HAL_RCC_ClockConfig+0x23c>)
 c006514:	683b      	ldr	r3, [r7, #0]
 c006516:	4313      	orrs	r3, r2
 c006518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c00651a:	4b81      	ldr	r3, [pc, #516]	; (c006720 <HAL_RCC_ClockConfig+0x23c>)
 c00651c:	681b      	ldr	r3, [r3, #0]
 c00651e:	f003 030f 	and.w	r3, r3, #15
 c006522:	683a      	ldr	r2, [r7, #0]
 c006524:	429a      	cmp	r2, r3
 c006526:	d001      	beq.n	c00652c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 c006528:	2301      	movs	r3, #1
 c00652a:	e0f5      	b.n	c006718 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c00652c:	687b      	ldr	r3, [r7, #4]
 c00652e:	681b      	ldr	r3, [r3, #0]
 c006530:	f003 0301 	and.w	r3, r3, #1
 c006534:	2b00      	cmp	r3, #0
 c006536:	f000 8094 	beq.w	c006662 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c00653a:	687b      	ldr	r3, [r7, #4]
 c00653c:	685b      	ldr	r3, [r3, #4]
 c00653e:	2b03      	cmp	r3, #3
 c006540:	d134      	bne.n	c0065ac <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c006542:	4b78      	ldr	r3, [pc, #480]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c006544:	681b      	ldr	r3, [r3, #0]
 c006546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00654a:	2b00      	cmp	r3, #0
 c00654c:	d101      	bne.n	c006552 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 c00654e:	2301      	movs	r3, #1
 c006550:	e0e2      	b.n	c006718 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 c006552:	f000 fa2b 	bl	c0069ac <RCC_GetSysClockFreqFromPLLSource>
 c006556:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 c006558:	693b      	ldr	r3, [r7, #16]
 c00655a:	4a73      	ldr	r2, [pc, #460]	; (c006728 <HAL_RCC_ClockConfig+0x244>)
 c00655c:	4293      	cmp	r3, r2
 c00655e:	d956      	bls.n	c00660e <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c006560:	4b70      	ldr	r3, [pc, #448]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c006562:	689b      	ldr	r3, [r3, #8]
 c006564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c006568:	2b00      	cmp	r3, #0
 c00656a:	d10a      	bne.n	c006582 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c00656c:	4b6d      	ldr	r3, [pc, #436]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c00656e:	689b      	ldr	r3, [r3, #8]
 c006570:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c006574:	4a6b      	ldr	r2, [pc, #428]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c006576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c00657a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c00657c:	2380      	movs	r3, #128	; 0x80
 c00657e:	617b      	str	r3, [r7, #20]
 c006580:	e045      	b.n	c00660e <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c006582:	687b      	ldr	r3, [r7, #4]
 c006584:	681b      	ldr	r3, [r3, #0]
 c006586:	f003 0302 	and.w	r3, r3, #2
 c00658a:	2b00      	cmp	r3, #0
 c00658c:	d03f      	beq.n	c00660e <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 c00658e:	687b      	ldr	r3, [r7, #4]
 c006590:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c006592:	2b00      	cmp	r3, #0
 c006594:	d13b      	bne.n	c00660e <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c006596:	4b63      	ldr	r3, [pc, #396]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c006598:	689b      	ldr	r3, [r3, #8]
 c00659a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c00659e:	4a61      	ldr	r2, [pc, #388]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c0065a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c0065a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c0065a6:	2380      	movs	r3, #128	; 0x80
 c0065a8:	617b      	str	r3, [r7, #20]
 c0065aa:	e030      	b.n	c00660e <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c0065ac:	687b      	ldr	r3, [r7, #4]
 c0065ae:	685b      	ldr	r3, [r3, #4]
 c0065b0:	2b02      	cmp	r3, #2
 c0065b2:	d107      	bne.n	c0065c4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0065b4:	4b5b      	ldr	r3, [pc, #364]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c0065b6:	681b      	ldr	r3, [r3, #0]
 c0065b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0065bc:	2b00      	cmp	r3, #0
 c0065be:	d115      	bne.n	c0065ec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c0065c0:	2301      	movs	r3, #1
 c0065c2:	e0a9      	b.n	c006718 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c0065c4:	687b      	ldr	r3, [r7, #4]
 c0065c6:	685b      	ldr	r3, [r3, #4]
 c0065c8:	2b00      	cmp	r3, #0
 c0065ca:	d107      	bne.n	c0065dc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c0065cc:	4b55      	ldr	r3, [pc, #340]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c0065ce:	681b      	ldr	r3, [r3, #0]
 c0065d0:	f003 0302 	and.w	r3, r3, #2
 c0065d4:	2b00      	cmp	r3, #0
 c0065d6:	d109      	bne.n	c0065ec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c0065d8:	2301      	movs	r3, #1
 c0065da:	e09d      	b.n	c006718 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0065dc:	4b51      	ldr	r3, [pc, #324]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c0065de:	681b      	ldr	r3, [r3, #0]
 c0065e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0065e4:	2b00      	cmp	r3, #0
 c0065e6:	d101      	bne.n	c0065ec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c0065e8:	2301      	movs	r3, #1
 c0065ea:	e095      	b.n	c006718 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 c0065ec:	f000 f8a2 	bl	c006734 <HAL_RCC_GetSysClockFreq>
 c0065f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 c0065f2:	693b      	ldr	r3, [r7, #16]
 c0065f4:	4a4c      	ldr	r2, [pc, #304]	; (c006728 <HAL_RCC_ClockConfig+0x244>)
 c0065f6:	4293      	cmp	r3, r2
 c0065f8:	d909      	bls.n	c00660e <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c0065fa:	4b4a      	ldr	r3, [pc, #296]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c0065fc:	689b      	ldr	r3, [r3, #8]
 c0065fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c006602:	4a48      	ldr	r2, [pc, #288]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c006604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c006608:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 c00660a:	2380      	movs	r3, #128	; 0x80
 c00660c:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c00660e:	4b45      	ldr	r3, [pc, #276]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c006610:	689b      	ldr	r3, [r3, #8]
 c006612:	f023 0203 	bic.w	r2, r3, #3
 c006616:	687b      	ldr	r3, [r7, #4]
 c006618:	685b      	ldr	r3, [r3, #4]
 c00661a:	4942      	ldr	r1, [pc, #264]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c00661c:	4313      	orrs	r3, r2
 c00661e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c006620:	f7fe fcba 	bl	c004f98 <HAL_GetTick>
 c006624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c006626:	e013      	b.n	c006650 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c006628:	f7fe fcb6 	bl	c004f98 <HAL_GetTick>
 c00662c:	4602      	mov	r2, r0
 c00662e:	68fb      	ldr	r3, [r7, #12]
 c006630:	1ad3      	subs	r3, r2, r3
 c006632:	f241 3288 	movw	r2, #5000	; 0x1388
 c006636:	4293      	cmp	r3, r2
 c006638:	d90a      	bls.n	c006650 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c00663a:	4b3a      	ldr	r3, [pc, #232]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c00663c:	689b      	ldr	r3, [r3, #8]
 c00663e:	f003 020c 	and.w	r2, r3, #12
 c006642:	687b      	ldr	r3, [r7, #4]
 c006644:	685b      	ldr	r3, [r3, #4]
 c006646:	009b      	lsls	r3, r3, #2
 c006648:	429a      	cmp	r2, r3
 c00664a:	d001      	beq.n	c006650 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 c00664c:	2303      	movs	r3, #3
 c00664e:	e063      	b.n	c006718 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c006650:	4b34      	ldr	r3, [pc, #208]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c006652:	689b      	ldr	r3, [r3, #8]
 c006654:	f003 020c 	and.w	r2, r3, #12
 c006658:	687b      	ldr	r3, [r7, #4]
 c00665a:	685b      	ldr	r3, [r3, #4]
 c00665c:	009b      	lsls	r3, r3, #2
 c00665e:	429a      	cmp	r2, r3
 c006660:	d1e2      	bne.n	c006628 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c006662:	687b      	ldr	r3, [r7, #4]
 c006664:	681b      	ldr	r3, [r3, #0]
 c006666:	f003 0302 	and.w	r3, r3, #2
 c00666a:	2b00      	cmp	r3, #0
 c00666c:	d009      	beq.n	c006682 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c00666e:	4b2d      	ldr	r3, [pc, #180]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c006670:	689b      	ldr	r3, [r3, #8]
 c006672:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c006676:	687b      	ldr	r3, [r7, #4]
 c006678:	689b      	ldr	r3, [r3, #8]
 c00667a:	492a      	ldr	r1, [pc, #168]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c00667c:	4313      	orrs	r3, r2
 c00667e:	608b      	str	r3, [r1, #8]
 c006680:	e008      	b.n	c006694 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 c006682:	697b      	ldr	r3, [r7, #20]
 c006684:	2b80      	cmp	r3, #128	; 0x80
 c006686:	d105      	bne.n	c006694 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c006688:	4b26      	ldr	r3, [pc, #152]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c00668a:	689b      	ldr	r3, [r3, #8]
 c00668c:	4a25      	ldr	r2, [pc, #148]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c00668e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c006692:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c006694:	4b22      	ldr	r3, [pc, #136]	; (c006720 <HAL_RCC_ClockConfig+0x23c>)
 c006696:	681b      	ldr	r3, [r3, #0]
 c006698:	f003 030f 	and.w	r3, r3, #15
 c00669c:	683a      	ldr	r2, [r7, #0]
 c00669e:	429a      	cmp	r2, r3
 c0066a0:	d210      	bcs.n	c0066c4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c0066a2:	4b1f      	ldr	r3, [pc, #124]	; (c006720 <HAL_RCC_ClockConfig+0x23c>)
 c0066a4:	681b      	ldr	r3, [r3, #0]
 c0066a6:	f023 020f 	bic.w	r2, r3, #15
 c0066aa:	491d      	ldr	r1, [pc, #116]	; (c006720 <HAL_RCC_ClockConfig+0x23c>)
 c0066ac:	683b      	ldr	r3, [r7, #0]
 c0066ae:	4313      	orrs	r3, r2
 c0066b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c0066b2:	4b1b      	ldr	r3, [pc, #108]	; (c006720 <HAL_RCC_ClockConfig+0x23c>)
 c0066b4:	681b      	ldr	r3, [r3, #0]
 c0066b6:	f003 030f 	and.w	r3, r3, #15
 c0066ba:	683a      	ldr	r2, [r7, #0]
 c0066bc:	429a      	cmp	r2, r3
 c0066be:	d001      	beq.n	c0066c4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 c0066c0:	2301      	movs	r3, #1
 c0066c2:	e029      	b.n	c006718 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c0066c4:	687b      	ldr	r3, [r7, #4]
 c0066c6:	681b      	ldr	r3, [r3, #0]
 c0066c8:	f003 0304 	and.w	r3, r3, #4
 c0066cc:	2b00      	cmp	r3, #0
 c0066ce:	d008      	beq.n	c0066e2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 c0066d0:	4b14      	ldr	r3, [pc, #80]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c0066d2:	689b      	ldr	r3, [r3, #8]
 c0066d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c0066d8:	687b      	ldr	r3, [r7, #4]
 c0066da:	68db      	ldr	r3, [r3, #12]
 c0066dc:	4911      	ldr	r1, [pc, #68]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c0066de:	4313      	orrs	r3, r2
 c0066e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c0066e2:	687b      	ldr	r3, [r7, #4]
 c0066e4:	681b      	ldr	r3, [r3, #0]
 c0066e6:	f003 0308 	and.w	r3, r3, #8
 c0066ea:	2b00      	cmp	r3, #0
 c0066ec:	d009      	beq.n	c006702 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 c0066ee:	4b0d      	ldr	r3, [pc, #52]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c0066f0:	689b      	ldr	r3, [r3, #8]
 c0066f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 c0066f6:	687b      	ldr	r3, [r7, #4]
 c0066f8:	691b      	ldr	r3, [r3, #16]
 c0066fa:	00db      	lsls	r3, r3, #3
 c0066fc:	4909      	ldr	r1, [pc, #36]	; (c006724 <HAL_RCC_ClockConfig+0x240>)
 c0066fe:	4313      	orrs	r3, r2
 c006700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c006702:	f000 f8b3 	bl	c00686c <HAL_RCC_GetHCLKFreq>
 c006706:	4603      	mov	r3, r0
 c006708:	4a08      	ldr	r2, [pc, #32]	; (c00672c <HAL_RCC_ClockConfig+0x248>)
 c00670a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 c00670c:	4b08      	ldr	r3, [pc, #32]	; (c006730 <HAL_RCC_ClockConfig+0x24c>)
 c00670e:	681b      	ldr	r3, [r3, #0]
 c006710:	4618      	mov	r0, r3
 c006712:	f7fe fbf1 	bl	c004ef8 <HAL_InitTick>
 c006716:	4603      	mov	r3, r0
}
 c006718:	4618      	mov	r0, r3
 c00671a:	3718      	adds	r7, #24
 c00671c:	46bd      	mov	sp, r7
 c00671e:	bd80      	pop	{r7, pc}
 c006720:	50022000 	.word	0x50022000
 c006724:	50021000 	.word	0x50021000
 c006728:	04c4b400 	.word	0x04c4b400
 c00672c:	30000064 	.word	0x30000064
 c006730:	3000006c 	.word	0x3000006c

0c006734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c006734:	b480      	push	{r7}
 c006736:	b089      	sub	sp, #36	; 0x24
 c006738:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c00673a:	2300      	movs	r3, #0
 c00673c:	61fb      	str	r3, [r7, #28]
 c00673e:	2300      	movs	r3, #0
 c006740:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c006742:	4b47      	ldr	r3, [pc, #284]	; (c006860 <HAL_RCC_GetSysClockFreq+0x12c>)
 c006744:	689b      	ldr	r3, [r3, #8]
 c006746:	f003 030c 	and.w	r3, r3, #12
 c00674a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c00674c:	4b44      	ldr	r3, [pc, #272]	; (c006860 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00674e:	68db      	ldr	r3, [r3, #12]
 c006750:	f003 0303 	and.w	r3, r3, #3
 c006754:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c006756:	693b      	ldr	r3, [r7, #16]
 c006758:	2b00      	cmp	r3, #0
 c00675a:	d005      	beq.n	c006768 <HAL_RCC_GetSysClockFreq+0x34>
 c00675c:	693b      	ldr	r3, [r7, #16]
 c00675e:	2b0c      	cmp	r3, #12
 c006760:	d121      	bne.n	c0067a6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c006762:	68fb      	ldr	r3, [r7, #12]
 c006764:	2b01      	cmp	r3, #1
 c006766:	d11e      	bne.n	c0067a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c006768:	4b3d      	ldr	r3, [pc, #244]	; (c006860 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00676a:	681b      	ldr	r3, [r3, #0]
 c00676c:	f003 0308 	and.w	r3, r3, #8
 c006770:	2b00      	cmp	r3, #0
 c006772:	d107      	bne.n	c006784 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c006774:	4b3a      	ldr	r3, [pc, #232]	; (c006860 <HAL_RCC_GetSysClockFreq+0x12c>)
 c006776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00677a:	0a1b      	lsrs	r3, r3, #8
 c00677c:	f003 030f 	and.w	r3, r3, #15
 c006780:	61fb      	str	r3, [r7, #28]
 c006782:	e005      	b.n	c006790 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c006784:	4b36      	ldr	r3, [pc, #216]	; (c006860 <HAL_RCC_GetSysClockFreq+0x12c>)
 c006786:	681b      	ldr	r3, [r3, #0]
 c006788:	091b      	lsrs	r3, r3, #4
 c00678a:	f003 030f 	and.w	r3, r3, #15
 c00678e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c006790:	4a34      	ldr	r2, [pc, #208]	; (c006864 <HAL_RCC_GetSysClockFreq+0x130>)
 c006792:	69fb      	ldr	r3, [r7, #28]
 c006794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c006798:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c00679a:	693b      	ldr	r3, [r7, #16]
 c00679c:	2b00      	cmp	r3, #0
 c00679e:	d10d      	bne.n	c0067bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c0067a0:	69fb      	ldr	r3, [r7, #28]
 c0067a2:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c0067a4:	e00a      	b.n	c0067bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c0067a6:	693b      	ldr	r3, [r7, #16]
 c0067a8:	2b04      	cmp	r3, #4
 c0067aa:	d102      	bne.n	c0067b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c0067ac:	4b2e      	ldr	r3, [pc, #184]	; (c006868 <HAL_RCC_GetSysClockFreq+0x134>)
 c0067ae:	61bb      	str	r3, [r7, #24]
 c0067b0:	e004      	b.n	c0067bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c0067b2:	693b      	ldr	r3, [r7, #16]
 c0067b4:	2b08      	cmp	r3, #8
 c0067b6:	d101      	bne.n	c0067bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c0067b8:	4b2b      	ldr	r3, [pc, #172]	; (c006868 <HAL_RCC_GetSysClockFreq+0x134>)
 c0067ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c0067bc:	693b      	ldr	r3, [r7, #16]
 c0067be:	2b0c      	cmp	r3, #12
 c0067c0:	d146      	bne.n	c006850 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c0067c2:	4b27      	ldr	r3, [pc, #156]	; (c006860 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0067c4:	68db      	ldr	r3, [r3, #12]
 c0067c6:	f003 0303 	and.w	r3, r3, #3
 c0067ca:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c0067cc:	4b24      	ldr	r3, [pc, #144]	; (c006860 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0067ce:	68db      	ldr	r3, [r3, #12]
 c0067d0:	091b      	lsrs	r3, r3, #4
 c0067d2:	f003 030f 	and.w	r3, r3, #15
 c0067d6:	3301      	adds	r3, #1
 c0067d8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 c0067da:	68bb      	ldr	r3, [r7, #8]
 c0067dc:	2b02      	cmp	r3, #2
 c0067de:	d003      	beq.n	c0067e8 <HAL_RCC_GetSysClockFreq+0xb4>
 c0067e0:	68bb      	ldr	r3, [r7, #8]
 c0067e2:	2b03      	cmp	r3, #3
 c0067e4:	d00d      	beq.n	c006802 <HAL_RCC_GetSysClockFreq+0xce>
 c0067e6:	e019      	b.n	c00681c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0067e8:	4a1f      	ldr	r2, [pc, #124]	; (c006868 <HAL_RCC_GetSysClockFreq+0x134>)
 c0067ea:	687b      	ldr	r3, [r7, #4]
 c0067ec:	fbb2 f3f3 	udiv	r3, r2, r3
 c0067f0:	4a1b      	ldr	r2, [pc, #108]	; (c006860 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0067f2:	68d2      	ldr	r2, [r2, #12]
 c0067f4:	0a12      	lsrs	r2, r2, #8
 c0067f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c0067fa:	fb02 f303 	mul.w	r3, r2, r3
 c0067fe:	617b      	str	r3, [r7, #20]
        break;
 c006800:	e019      	b.n	c006836 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c006802:	4a19      	ldr	r2, [pc, #100]	; (c006868 <HAL_RCC_GetSysClockFreq+0x134>)
 c006804:	687b      	ldr	r3, [r7, #4]
 c006806:	fbb2 f3f3 	udiv	r3, r2, r3
 c00680a:	4a15      	ldr	r2, [pc, #84]	; (c006860 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00680c:	68d2      	ldr	r2, [r2, #12]
 c00680e:	0a12      	lsrs	r2, r2, #8
 c006810:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c006814:	fb02 f303 	mul.w	r3, r2, r3
 c006818:	617b      	str	r3, [r7, #20]
        break;
 c00681a:	e00c      	b.n	c006836 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00681c:	69fa      	ldr	r2, [r7, #28]
 c00681e:	687b      	ldr	r3, [r7, #4]
 c006820:	fbb2 f3f3 	udiv	r3, r2, r3
 c006824:	4a0e      	ldr	r2, [pc, #56]	; (c006860 <HAL_RCC_GetSysClockFreq+0x12c>)
 c006826:	68d2      	ldr	r2, [r2, #12]
 c006828:	0a12      	lsrs	r2, r2, #8
 c00682a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c00682e:	fb02 f303 	mul.w	r3, r2, r3
 c006832:	617b      	str	r3, [r7, #20]
        break;
 c006834:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c006836:	4b0a      	ldr	r3, [pc, #40]	; (c006860 <HAL_RCC_GetSysClockFreq+0x12c>)
 c006838:	68db      	ldr	r3, [r3, #12]
 c00683a:	0e5b      	lsrs	r3, r3, #25
 c00683c:	f003 0303 	and.w	r3, r3, #3
 c006840:	3301      	adds	r3, #1
 c006842:	005b      	lsls	r3, r3, #1
 c006844:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 c006846:	697a      	ldr	r2, [r7, #20]
 c006848:	683b      	ldr	r3, [r7, #0]
 c00684a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00684e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 c006850:	69bb      	ldr	r3, [r7, #24]
}
 c006852:	4618      	mov	r0, r3
 c006854:	3724      	adds	r7, #36	; 0x24
 c006856:	46bd      	mov	sp, r7
 c006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00685c:	4770      	bx	lr
 c00685e:	bf00      	nop
 c006860:	50021000 	.word	0x50021000
 c006864:	0c009484 	.word	0x0c009484
 c006868:	00f42400 	.word	0x00f42400

0c00686c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c00686c:	b580      	push	{r7, lr}
 c00686e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c006870:	f7ff ff60 	bl	c006734 <HAL_RCC_GetSysClockFreq>
 c006874:	4602      	mov	r2, r0
 c006876:	4b05      	ldr	r3, [pc, #20]	; (c00688c <HAL_RCC_GetHCLKFreq+0x20>)
 c006878:	689b      	ldr	r3, [r3, #8]
 c00687a:	091b      	lsrs	r3, r3, #4
 c00687c:	f003 030f 	and.w	r3, r3, #15
 c006880:	4903      	ldr	r1, [pc, #12]	; (c006890 <HAL_RCC_GetHCLKFreq+0x24>)
 c006882:	5ccb      	ldrb	r3, [r1, r3]
 c006884:	fa22 f303 	lsr.w	r3, r2, r3
}
 c006888:	4618      	mov	r0, r3
 c00688a:	bd80      	pop	{r7, pc}
 c00688c:	50021000 	.word	0x50021000
 c006890:	0c00946c 	.word	0x0c00946c

0c006894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 c006894:	b580      	push	{r7, lr}
 c006896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c006898:	f7ff ffe8 	bl	c00686c <HAL_RCC_GetHCLKFreq>
 c00689c:	4602      	mov	r2, r0
 c00689e:	4b05      	ldr	r3, [pc, #20]	; (c0068b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 c0068a0:	689b      	ldr	r3, [r3, #8]
 c0068a2:	0a1b      	lsrs	r3, r3, #8
 c0068a4:	f003 0307 	and.w	r3, r3, #7
 c0068a8:	4903      	ldr	r1, [pc, #12]	; (c0068b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 c0068aa:	5ccb      	ldrb	r3, [r1, r3]
 c0068ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 c0068b0:	4618      	mov	r0, r3
 c0068b2:	bd80      	pop	{r7, pc}
 c0068b4:	50021000 	.word	0x50021000
 c0068b8:	0c00947c 	.word	0x0c00947c

0c0068bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 c0068bc:	b580      	push	{r7, lr}
 c0068be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c0068c0:	f7ff ffd4 	bl	c00686c <HAL_RCC_GetHCLKFreq>
 c0068c4:	4602      	mov	r2, r0
 c0068c6:	4b05      	ldr	r3, [pc, #20]	; (c0068dc <HAL_RCC_GetPCLK2Freq+0x20>)
 c0068c8:	689b      	ldr	r3, [r3, #8]
 c0068ca:	0adb      	lsrs	r3, r3, #11
 c0068cc:	f003 0307 	and.w	r3, r3, #7
 c0068d0:	4903      	ldr	r1, [pc, #12]	; (c0068e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 c0068d2:	5ccb      	ldrb	r3, [r1, r3]
 c0068d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 c0068d8:	4618      	mov	r0, r3
 c0068da:	bd80      	pop	{r7, pc}
 c0068dc:	50021000 	.word	0x50021000
 c0068e0:	0c00947c 	.word	0x0c00947c

0c0068e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c0068e4:	b580      	push	{r7, lr}
 c0068e6:	b086      	sub	sp, #24
 c0068e8:	af00      	add	r7, sp, #0
 c0068ea:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 c0068ec:	2300      	movs	r3, #0
 c0068ee:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c0068f0:	4b2c      	ldr	r3, [pc, #176]	; (c0069a4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0068f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0068f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0068f8:	2b00      	cmp	r3, #0
 c0068fa:	d003      	beq.n	c006904 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c0068fc:	f7ff f862 	bl	c0059c4 <HAL_PWREx_GetVoltageRange>
 c006900:	6138      	str	r0, [r7, #16]
 c006902:	e014      	b.n	c00692e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c006904:	4b27      	ldr	r3, [pc, #156]	; (c0069a4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c006906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c006908:	4a26      	ldr	r2, [pc, #152]	; (c0069a4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c00690a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c00690e:	6593      	str	r3, [r2, #88]	; 0x58
 c006910:	4b24      	ldr	r3, [pc, #144]	; (c0069a4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c006912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c006914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c006918:	60fb      	str	r3, [r7, #12]
 c00691a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c00691c:	f7ff f852 	bl	c0059c4 <HAL_PWREx_GetVoltageRange>
 c006920:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 c006922:	4b20      	ldr	r3, [pc, #128]	; (c0069a4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c006924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c006926:	4a1f      	ldr	r2, [pc, #124]	; (c0069a4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c006928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c00692c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 c00692e:	693b      	ldr	r3, [r7, #16]
 c006930:	2b00      	cmp	r3, #0
 c006932:	d003      	beq.n	c00693c <RCC_SetFlashLatencyFromMSIRange+0x58>
 c006934:	693b      	ldr	r3, [r7, #16]
 c006936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c00693a:	d10b      	bne.n	c006954 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 c00693c:	687b      	ldr	r3, [r7, #4]
 c00693e:	2b80      	cmp	r3, #128	; 0x80
 c006940:	d919      	bls.n	c006976 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 c006942:	687b      	ldr	r3, [r7, #4]
 c006944:	2ba0      	cmp	r3, #160	; 0xa0
 c006946:	d902      	bls.n	c00694e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c006948:	2302      	movs	r3, #2
 c00694a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c00694c:	e013      	b.n	c006976 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c00694e:	2301      	movs	r3, #1
 c006950:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c006952:	e010      	b.n	c006976 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 c006954:	687b      	ldr	r3, [r7, #4]
 c006956:	2b80      	cmp	r3, #128	; 0x80
 c006958:	d902      	bls.n	c006960 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 c00695a:	2303      	movs	r3, #3
 c00695c:	617b      	str	r3, [r7, #20]
 c00695e:	e00a      	b.n	c006976 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 c006960:	687b      	ldr	r3, [r7, #4]
 c006962:	2b80      	cmp	r3, #128	; 0x80
 c006964:	d102      	bne.n	c00696c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c006966:	2302      	movs	r3, #2
 c006968:	617b      	str	r3, [r7, #20]
 c00696a:	e004      	b.n	c006976 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 c00696c:	687b      	ldr	r3, [r7, #4]
 c00696e:	2b70      	cmp	r3, #112	; 0x70
 c006970:	d101      	bne.n	c006976 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c006972:	2301      	movs	r3, #1
 c006974:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c006976:	4b0c      	ldr	r3, [pc, #48]	; (c0069a8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c006978:	681b      	ldr	r3, [r3, #0]
 c00697a:	f023 020f 	bic.w	r2, r3, #15
 c00697e:	490a      	ldr	r1, [pc, #40]	; (c0069a8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c006980:	697b      	ldr	r3, [r7, #20]
 c006982:	4313      	orrs	r3, r2
 c006984:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c006986:	4b08      	ldr	r3, [pc, #32]	; (c0069a8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c006988:	681b      	ldr	r3, [r3, #0]
 c00698a:	f003 030f 	and.w	r3, r3, #15
 c00698e:	697a      	ldr	r2, [r7, #20]
 c006990:	429a      	cmp	r2, r3
 c006992:	d001      	beq.n	c006998 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 c006994:	2301      	movs	r3, #1
 c006996:	e000      	b.n	c00699a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 c006998:	2300      	movs	r3, #0
}
 c00699a:	4618      	mov	r0, r3
 c00699c:	3718      	adds	r7, #24
 c00699e:	46bd      	mov	sp, r7
 c0069a0:	bd80      	pop	{r7, pc}
 c0069a2:	bf00      	nop
 c0069a4:	50021000 	.word	0x50021000
 c0069a8:	50022000 	.word	0x50022000

0c0069ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 c0069ac:	b480      	push	{r7}
 c0069ae:	b087      	sub	sp, #28
 c0069b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 c0069b2:	2300      	movs	r3, #0
 c0069b4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 c0069b6:	4b36      	ldr	r3, [pc, #216]	; (c006a90 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0069b8:	68db      	ldr	r3, [r3, #12]
 c0069ba:	f003 0303 	and.w	r3, r3, #3
 c0069be:	2b01      	cmp	r3, #1
 c0069c0:	d118      	bne.n	c0069f4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c0069c2:	4b33      	ldr	r3, [pc, #204]	; (c006a90 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0069c4:	681b      	ldr	r3, [r3, #0]
 c0069c6:	f003 0308 	and.w	r3, r3, #8
 c0069ca:	2b00      	cmp	r3, #0
 c0069cc:	d107      	bne.n	c0069de <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c0069ce:	4b30      	ldr	r3, [pc, #192]	; (c006a90 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0069d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0069d4:	0a1b      	lsrs	r3, r3, #8
 c0069d6:	f003 030f 	and.w	r3, r3, #15
 c0069da:	617b      	str	r3, [r7, #20]
 c0069dc:	e005      	b.n	c0069ea <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c0069de:	4b2c      	ldr	r3, [pc, #176]	; (c006a90 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0069e0:	681b      	ldr	r3, [r3, #0]
 c0069e2:	091b      	lsrs	r3, r3, #4
 c0069e4:	f003 030f 	and.w	r3, r3, #15
 c0069e8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c0069ea:	4a2a      	ldr	r2, [pc, #168]	; (c006a94 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 c0069ec:	697b      	ldr	r3, [r7, #20]
 c0069ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0069f2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c0069f4:	4b26      	ldr	r3, [pc, #152]	; (c006a90 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0069f6:	68db      	ldr	r3, [r3, #12]
 c0069f8:	f003 0303 	and.w	r3, r3, #3
 c0069fc:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c0069fe:	4b24      	ldr	r3, [pc, #144]	; (c006a90 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c006a00:	68db      	ldr	r3, [r3, #12]
 c006a02:	091b      	lsrs	r3, r3, #4
 c006a04:	f003 030f 	and.w	r3, r3, #15
 c006a08:	3301      	adds	r3, #1
 c006a0a:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 c006a0c:	68fb      	ldr	r3, [r7, #12]
 c006a0e:	2b02      	cmp	r3, #2
 c006a10:	d003      	beq.n	c006a1a <RCC_GetSysClockFreqFromPLLSource+0x6e>
 c006a12:	68fb      	ldr	r3, [r7, #12]
 c006a14:	2b03      	cmp	r3, #3
 c006a16:	d00d      	beq.n	c006a34 <RCC_GetSysClockFreqFromPLLSource+0x88>
 c006a18:	e019      	b.n	c006a4e <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c006a1a:	4a1f      	ldr	r2, [pc, #124]	; (c006a98 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 c006a1c:	68bb      	ldr	r3, [r7, #8]
 c006a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 c006a22:	4a1b      	ldr	r2, [pc, #108]	; (c006a90 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c006a24:	68d2      	ldr	r2, [r2, #12]
 c006a26:	0a12      	lsrs	r2, r2, #8
 c006a28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c006a2c:	fb02 f303 	mul.w	r3, r2, r3
 c006a30:	613b      	str	r3, [r7, #16]
      break;
 c006a32:	e019      	b.n	c006a68 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c006a34:	4a18      	ldr	r2, [pc, #96]	; (c006a98 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 c006a36:	68bb      	ldr	r3, [r7, #8]
 c006a38:	fbb2 f3f3 	udiv	r3, r2, r3
 c006a3c:	4a14      	ldr	r2, [pc, #80]	; (c006a90 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c006a3e:	68d2      	ldr	r2, [r2, #12]
 c006a40:	0a12      	lsrs	r2, r2, #8
 c006a42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c006a46:	fb02 f303 	mul.w	r3, r2, r3
 c006a4a:	613b      	str	r3, [r7, #16]
      break;
 c006a4c:	e00c      	b.n	c006a68 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c006a4e:	697a      	ldr	r2, [r7, #20]
 c006a50:	68bb      	ldr	r3, [r7, #8]
 c006a52:	fbb2 f3f3 	udiv	r3, r2, r3
 c006a56:	4a0e      	ldr	r2, [pc, #56]	; (c006a90 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c006a58:	68d2      	ldr	r2, [r2, #12]
 c006a5a:	0a12      	lsrs	r2, r2, #8
 c006a5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c006a60:	fb02 f303 	mul.w	r3, r2, r3
 c006a64:	613b      	str	r3, [r7, #16]
      break;
 c006a66:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c006a68:	4b09      	ldr	r3, [pc, #36]	; (c006a90 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c006a6a:	68db      	ldr	r3, [r3, #12]
 c006a6c:	0e5b      	lsrs	r3, r3, #25
 c006a6e:	f003 0303 	and.w	r3, r3, #3
 c006a72:	3301      	adds	r3, #1
 c006a74:	005b      	lsls	r3, r3, #1
 c006a76:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 c006a78:	693a      	ldr	r2, [r7, #16]
 c006a7a:	687b      	ldr	r3, [r7, #4]
 c006a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 c006a80:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 c006a82:	683b      	ldr	r3, [r7, #0]
}
 c006a84:	4618      	mov	r0, r3
 c006a86:	371c      	adds	r7, #28
 c006a88:	46bd      	mov	sp, r7
 c006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006a8e:	4770      	bx	lr
 c006a90:	50021000 	.word	0x50021000
 c006a94:	0c009484 	.word	0x0c009484
 c006a98:	00f42400 	.word	0x00f42400

0c006a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 c006a9c:	b580      	push	{r7, lr}
 c006a9e:	b088      	sub	sp, #32
 c006aa0:	af00      	add	r7, sp, #0
 c006aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c006aa4:	2300      	movs	r3, #0
 c006aa6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 c006aa8:	2300      	movs	r3, #0
 c006aaa:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c006aac:	687b      	ldr	r3, [r7, #4]
 c006aae:	681b      	ldr	r3, [r3, #0]
 c006ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c006ab4:	2b00      	cmp	r3, #0
 c006ab6:	d040      	beq.n	c006b3a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 c006ab8:	687b      	ldr	r3, [r7, #4]
 c006aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c006abc:	2b80      	cmp	r3, #128	; 0x80
 c006abe:	d02a      	beq.n	c006b16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c006ac0:	2b80      	cmp	r3, #128	; 0x80
 c006ac2:	d825      	bhi.n	c006b10 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c006ac4:	2b60      	cmp	r3, #96	; 0x60
 c006ac6:	d026      	beq.n	c006b16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c006ac8:	2b60      	cmp	r3, #96	; 0x60
 c006aca:	d821      	bhi.n	c006b10 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c006acc:	2b40      	cmp	r3, #64	; 0x40
 c006ace:	d006      	beq.n	c006ade <HAL_RCCEx_PeriphCLKConfig+0x42>
 c006ad0:	2b40      	cmp	r3, #64	; 0x40
 c006ad2:	d81d      	bhi.n	c006b10 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c006ad4:	2b00      	cmp	r3, #0
 c006ad6:	d009      	beq.n	c006aec <HAL_RCCEx_PeriphCLKConfig+0x50>
 c006ad8:	2b20      	cmp	r3, #32
 c006ada:	d010      	beq.n	c006afe <HAL_RCCEx_PeriphCLKConfig+0x62>
 c006adc:	e018      	b.n	c006b10 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c006ade:	4b8f      	ldr	r3, [pc, #572]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006ae0:	68db      	ldr	r3, [r3, #12]
 c006ae2:	4a8e      	ldr	r2, [pc, #568]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c006ae8:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c006aea:	e015      	b.n	c006b18 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c006aec:	687b      	ldr	r3, [r7, #4]
 c006aee:	3304      	adds	r3, #4
 c006af0:	2100      	movs	r1, #0
 c006af2:	4618      	mov	r0, r3
 c006af4:	f000 fb56 	bl	c0071a4 <RCCEx_PLLSAI1_Config>
 c006af8:	4603      	mov	r3, r0
 c006afa:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c006afc:	e00c      	b.n	c006b18 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c006afe:	687b      	ldr	r3, [r7, #4]
 c006b00:	3320      	adds	r3, #32
 c006b02:	2100      	movs	r1, #0
 c006b04:	4618      	mov	r0, r3
 c006b06:	f000 fc33 	bl	c007370 <RCCEx_PLLSAI2_Config>
 c006b0a:	4603      	mov	r3, r0
 c006b0c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c006b0e:	e003      	b.n	c006b18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c006b10:	2301      	movs	r3, #1
 c006b12:	77fb      	strb	r3, [r7, #31]
        break;
 c006b14:	e000      	b.n	c006b18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 c006b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 c006b18:	7ffb      	ldrb	r3, [r7, #31]
 c006b1a:	2b00      	cmp	r3, #0
 c006b1c:	d10b      	bne.n	c006b36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 c006b1e:	4b7f      	ldr	r3, [pc, #508]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006b20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c006b24:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 c006b28:	687b      	ldr	r3, [r7, #4]
 c006b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c006b2c:	497b      	ldr	r1, [pc, #492]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006b2e:	4313      	orrs	r3, r2
 c006b30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c006b34:	e001      	b.n	c006b3a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c006b36:	7ffb      	ldrb	r3, [r7, #31]
 c006b38:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c006b3a:	687b      	ldr	r3, [r7, #4]
 c006b3c:	681b      	ldr	r3, [r3, #0]
 c006b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c006b42:	2b00      	cmp	r3, #0
 c006b44:	d047      	beq.n	c006bd6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 c006b46:	687b      	ldr	r3, [r7, #4]
 c006b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c006b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c006b4e:	d030      	beq.n	c006bb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 c006b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c006b54:	d82a      	bhi.n	c006bac <HAL_RCCEx_PeriphCLKConfig+0x110>
 c006b56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c006b5a:	d02a      	beq.n	c006bb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 c006b5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c006b60:	d824      	bhi.n	c006bac <HAL_RCCEx_PeriphCLKConfig+0x110>
 c006b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c006b66:	d008      	beq.n	c006b7a <HAL_RCCEx_PeriphCLKConfig+0xde>
 c006b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c006b6c:	d81e      	bhi.n	c006bac <HAL_RCCEx_PeriphCLKConfig+0x110>
 c006b6e:	2b00      	cmp	r3, #0
 c006b70:	d00a      	beq.n	c006b88 <HAL_RCCEx_PeriphCLKConfig+0xec>
 c006b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c006b76:	d010      	beq.n	c006b9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 c006b78:	e018      	b.n	c006bac <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c006b7a:	4b68      	ldr	r3, [pc, #416]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006b7c:	68db      	ldr	r3, [r3, #12]
 c006b7e:	4a67      	ldr	r2, [pc, #412]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c006b84:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c006b86:	e015      	b.n	c006bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c006b88:	687b      	ldr	r3, [r7, #4]
 c006b8a:	3304      	adds	r3, #4
 c006b8c:	2100      	movs	r1, #0
 c006b8e:	4618      	mov	r0, r3
 c006b90:	f000 fb08 	bl	c0071a4 <RCCEx_PLLSAI1_Config>
 c006b94:	4603      	mov	r3, r0
 c006b96:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c006b98:	e00c      	b.n	c006bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c006b9a:	687b      	ldr	r3, [r7, #4]
 c006b9c:	3320      	adds	r3, #32
 c006b9e:	2100      	movs	r1, #0
 c006ba0:	4618      	mov	r0, r3
 c006ba2:	f000 fbe5 	bl	c007370 <RCCEx_PLLSAI2_Config>
 c006ba6:	4603      	mov	r3, r0
 c006ba8:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c006baa:	e003      	b.n	c006bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c006bac:	2301      	movs	r3, #1
 c006bae:	77fb      	strb	r3, [r7, #31]
        break;
 c006bb0:	e000      	b.n	c006bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 c006bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 c006bb4:	7ffb      	ldrb	r3, [r7, #31]
 c006bb6:	2b00      	cmp	r3, #0
 c006bb8:	d10b      	bne.n	c006bd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 c006bba:	4b58      	ldr	r3, [pc, #352]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006bbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c006bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c006bc4:	687b      	ldr	r3, [r7, #4]
 c006bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c006bc8:	4954      	ldr	r1, [pc, #336]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006bca:	4313      	orrs	r3, r2
 c006bcc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c006bd0:	e001      	b.n	c006bd6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c006bd2:	7ffb      	ldrb	r3, [r7, #31]
 c006bd4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c006bd6:	687b      	ldr	r3, [r7, #4]
 c006bd8:	681b      	ldr	r3, [r3, #0]
 c006bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c006bde:	2b00      	cmp	r3, #0
 c006be0:	f000 80ab 	beq.w	c006d3a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 c006be4:	2300      	movs	r3, #0
 c006be6:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c006be8:	4b4c      	ldr	r3, [pc, #304]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c006bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c006bf0:	2b00      	cmp	r3, #0
 c006bf2:	d10d      	bne.n	c006c10 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c006bf4:	4b49      	ldr	r3, [pc, #292]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c006bf8:	4a48      	ldr	r2, [pc, #288]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c006bfe:	6593      	str	r3, [r2, #88]	; 0x58
 c006c00:	4b46      	ldr	r3, [pc, #280]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c006c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c006c08:	60fb      	str	r3, [r7, #12]
 c006c0a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 c006c0c:	2301      	movs	r3, #1
 c006c0e:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c006c10:	4b43      	ldr	r3, [pc, #268]	; (c006d20 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c006c12:	681b      	ldr	r3, [r3, #0]
 c006c14:	4a42      	ldr	r2, [pc, #264]	; (c006d20 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c006c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c006c1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 c006c1c:	f7fe f9bc 	bl	c004f98 <HAL_GetTick>
 c006c20:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c006c22:	e00f      	b.n	c006c44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c006c24:	f7fe f9b8 	bl	c004f98 <HAL_GetTick>
 c006c28:	4602      	mov	r2, r0
 c006c2a:	693b      	ldr	r3, [r7, #16]
 c006c2c:	1ad3      	subs	r3, r2, r3
 c006c2e:	2b02      	cmp	r3, #2
 c006c30:	d908      	bls.n	c006c44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c006c32:	4b3b      	ldr	r3, [pc, #236]	; (c006d20 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c006c34:	681b      	ldr	r3, [r3, #0]
 c006c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c006c3a:	2b00      	cmp	r3, #0
 c006c3c:	d109      	bne.n	c006c52 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 c006c3e:	2303      	movs	r3, #3
 c006c40:	77fb      	strb	r3, [r7, #31]
        }
        break;
 c006c42:	e006      	b.n	c006c52 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c006c44:	4b36      	ldr	r3, [pc, #216]	; (c006d20 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c006c46:	681b      	ldr	r3, [r3, #0]
 c006c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c006c4c:	2b00      	cmp	r3, #0
 c006c4e:	d0e9      	beq.n	c006c24 <HAL_RCCEx_PeriphCLKConfig+0x188>
 c006c50:	e000      	b.n	c006c54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 c006c52:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 c006c54:	7ffb      	ldrb	r3, [r7, #31]
 c006c56:	2b00      	cmp	r3, #0
 c006c58:	d164      	bne.n	c006d24 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c006c5a:	4b30      	ldr	r3, [pc, #192]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006c60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c006c64:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 c006c66:	69bb      	ldr	r3, [r7, #24]
 c006c68:	2b00      	cmp	r3, #0
 c006c6a:	d01f      	beq.n	c006cac <HAL_RCCEx_PeriphCLKConfig+0x210>
 c006c6c:	687b      	ldr	r3, [r7, #4]
 c006c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006c72:	69ba      	ldr	r2, [r7, #24]
 c006c74:	429a      	cmp	r2, r3
 c006c76:	d019      	beq.n	c006cac <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c006c78:	4b28      	ldr	r3, [pc, #160]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c006c82:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 c006c84:	4b25      	ldr	r3, [pc, #148]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006c8a:	4a24      	ldr	r2, [pc, #144]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c006c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 c006c94:	4b21      	ldr	r3, [pc, #132]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006c9a:	4a20      	ldr	r2, [pc, #128]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c006ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 c006ca4:	4a1d      	ldr	r2, [pc, #116]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006ca6:	69bb      	ldr	r3, [r7, #24]
 c006ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c006cac:	69bb      	ldr	r3, [r7, #24]
 c006cae:	f003 0301 	and.w	r3, r3, #1
 c006cb2:	2b00      	cmp	r3, #0
 c006cb4:	d01f      	beq.n	c006cf6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c006cb6:	f7fe f96f 	bl	c004f98 <HAL_GetTick>
 c006cba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c006cbc:	e012      	b.n	c006ce4 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c006cbe:	f7fe f96b 	bl	c004f98 <HAL_GetTick>
 c006cc2:	4602      	mov	r2, r0
 c006cc4:	693b      	ldr	r3, [r7, #16]
 c006cc6:	1ad3      	subs	r3, r2, r3
 c006cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 c006ccc:	4293      	cmp	r3, r2
 c006cce:	d909      	bls.n	c006ce4 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c006cd0:	4b12      	ldr	r3, [pc, #72]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006cd6:	f003 0302 	and.w	r3, r3, #2
 c006cda:	2b00      	cmp	r3, #0
 c006cdc:	d10a      	bne.n	c006cf4 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 c006cde:	2303      	movs	r3, #3
 c006ce0:	77fb      	strb	r3, [r7, #31]
            }
            break;
 c006ce2:	e007      	b.n	c006cf4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c006ce4:	4b0d      	ldr	r3, [pc, #52]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006cea:	f003 0302 	and.w	r3, r3, #2
 c006cee:	2b00      	cmp	r3, #0
 c006cf0:	d0e5      	beq.n	c006cbe <HAL_RCCEx_PeriphCLKConfig+0x222>
 c006cf2:	e000      	b.n	c006cf6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 c006cf4:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 c006cf6:	7ffb      	ldrb	r3, [r7, #31]
 c006cf8:	2b00      	cmp	r3, #0
 c006cfa:	d10c      	bne.n	c006d16 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 c006cfc:	4b07      	ldr	r3, [pc, #28]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006d02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c006d06:	687b      	ldr	r3, [r7, #4]
 c006d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006d0c:	4903      	ldr	r1, [pc, #12]	; (c006d1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c006d0e:	4313      	orrs	r3, r2
 c006d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 c006d14:	e008      	b.n	c006d28 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 c006d16:	7ffb      	ldrb	r3, [r7, #31]
 c006d18:	77bb      	strb	r3, [r7, #30]
 c006d1a:	e005      	b.n	c006d28 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 c006d1c:	50021000 	.word	0x50021000
 c006d20:	50007000 	.word	0x50007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 c006d24:	7ffb      	ldrb	r3, [r7, #31]
 c006d26:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c006d28:	7dfb      	ldrb	r3, [r7, #23]
 c006d2a:	2b01      	cmp	r3, #1
 c006d2c:	d105      	bne.n	c006d3a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c006d2e:	4b9c      	ldr	r3, [pc, #624]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c006d32:	4a9b      	ldr	r2, [pc, #620]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c006d38:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c006d3a:	687b      	ldr	r3, [r7, #4]
 c006d3c:	681b      	ldr	r3, [r3, #0]
 c006d3e:	f003 0301 	and.w	r3, r3, #1
 c006d42:	2b00      	cmp	r3, #0
 c006d44:	d00a      	beq.n	c006d5c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 c006d46:	4b96      	ldr	r3, [pc, #600]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006d4c:	f023 0203 	bic.w	r2, r3, #3
 c006d50:	687b      	ldr	r3, [r7, #4]
 c006d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c006d54:	4992      	ldr	r1, [pc, #584]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006d56:	4313      	orrs	r3, r2
 c006d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c006d5c:	687b      	ldr	r3, [r7, #4]
 c006d5e:	681b      	ldr	r3, [r3, #0]
 c006d60:	f003 0302 	and.w	r3, r3, #2
 c006d64:	2b00      	cmp	r3, #0
 c006d66:	d00a      	beq.n	c006d7e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 c006d68:	4b8d      	ldr	r3, [pc, #564]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006d6e:	f023 020c 	bic.w	r2, r3, #12
 c006d72:	687b      	ldr	r3, [r7, #4]
 c006d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c006d76:	498a      	ldr	r1, [pc, #552]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006d78:	4313      	orrs	r3, r2
 c006d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c006d7e:	687b      	ldr	r3, [r7, #4]
 c006d80:	681b      	ldr	r3, [r3, #0]
 c006d82:	f003 0304 	and.w	r3, r3, #4
 c006d86:	2b00      	cmp	r3, #0
 c006d88:	d00a      	beq.n	c006da0 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 c006d8a:	4b85      	ldr	r3, [pc, #532]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006d90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 c006d94:	687b      	ldr	r3, [r7, #4]
 c006d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c006d98:	4981      	ldr	r1, [pc, #516]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006d9a:	4313      	orrs	r3, r2
 c006d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c006da0:	687b      	ldr	r3, [r7, #4]
 c006da2:	681b      	ldr	r3, [r3, #0]
 c006da4:	f003 0308 	and.w	r3, r3, #8
 c006da8:	2b00      	cmp	r3, #0
 c006daa:	d00a      	beq.n	c006dc2 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 c006dac:	4b7c      	ldr	r3, [pc, #496]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006db2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 c006db6:	687b      	ldr	r3, [r7, #4]
 c006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c006dba:	4979      	ldr	r1, [pc, #484]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006dbc:	4313      	orrs	r3, r2
 c006dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c006dc2:	687b      	ldr	r3, [r7, #4]
 c006dc4:	681b      	ldr	r3, [r3, #0]
 c006dc6:	f003 0310 	and.w	r3, r3, #16
 c006dca:	2b00      	cmp	r3, #0
 c006dcc:	d00a      	beq.n	c006de4 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 c006dce:	4b74      	ldr	r3, [pc, #464]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006dd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c006dd8:	687b      	ldr	r3, [r7, #4]
 c006dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c006ddc:	4970      	ldr	r1, [pc, #448]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006dde:	4313      	orrs	r3, r2
 c006de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c006de4:	687b      	ldr	r3, [r7, #4]
 c006de6:	681b      	ldr	r3, [r3, #0]
 c006de8:	f003 0320 	and.w	r3, r3, #32
 c006dec:	2b00      	cmp	r3, #0
 c006dee:	d00a      	beq.n	c006e06 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 c006df0:	4b6b      	ldr	r3, [pc, #428]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006df6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 c006dfa:	687b      	ldr	r3, [r7, #4]
 c006dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c006dfe:	4968      	ldr	r1, [pc, #416]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006e00:	4313      	orrs	r3, r2
 c006e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c006e06:	687b      	ldr	r3, [r7, #4]
 c006e08:	681b      	ldr	r3, [r3, #0]
 c006e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c006e0e:	2b00      	cmp	r3, #0
 c006e10:	d00a      	beq.n	c006e28 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 c006e12:	4b63      	ldr	r3, [pc, #396]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006e18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 c006e1c:	687b      	ldr	r3, [r7, #4]
 c006e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c006e20:	495f      	ldr	r1, [pc, #380]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006e22:	4313      	orrs	r3, r2
 c006e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c006e28:	687b      	ldr	r3, [r7, #4]
 c006e2a:	681b      	ldr	r3, [r3, #0]
 c006e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c006e30:	2b00      	cmp	r3, #0
 c006e32:	d00a      	beq.n	c006e4a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 c006e34:	4b5a      	ldr	r3, [pc, #360]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006e3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c006e3e:	687b      	ldr	r3, [r7, #4]
 c006e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c006e42:	4957      	ldr	r1, [pc, #348]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006e44:	4313      	orrs	r3, r2
 c006e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 c006e4a:	687b      	ldr	r3, [r7, #4]
 c006e4c:	681b      	ldr	r3, [r3, #0]
 c006e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c006e52:	2b00      	cmp	r3, #0
 c006e54:	d00a      	beq.n	c006e6c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 c006e56:	4b52      	ldr	r3, [pc, #328]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006e5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 c006e60:	687b      	ldr	r3, [r7, #4]
 c006e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c006e64:	494e      	ldr	r1, [pc, #312]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006e66:	4313      	orrs	r3, r2
 c006e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 c006e6c:	687b      	ldr	r3, [r7, #4]
 c006e6e:	681b      	ldr	r3, [r3, #0]
 c006e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c006e74:	2b00      	cmp	r3, #0
 c006e76:	d031      	beq.n	c006edc <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 c006e78:	687b      	ldr	r3, [r7, #4]
 c006e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c006e7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c006e80:	d00e      	beq.n	c006ea0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 c006e82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c006e86:	d814      	bhi.n	c006eb2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 c006e88:	2b00      	cmp	r3, #0
 c006e8a:	d015      	beq.n	c006eb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c006e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c006e90:	d10f      	bne.n	c006eb2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c006e92:	4b43      	ldr	r3, [pc, #268]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006e94:	68db      	ldr	r3, [r3, #12]
 c006e96:	4a42      	ldr	r2, [pc, #264]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006e98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c006e9c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c006e9e:	e00c      	b.n	c006eba <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c006ea0:	687b      	ldr	r3, [r7, #4]
 c006ea2:	3304      	adds	r3, #4
 c006ea4:	2100      	movs	r1, #0
 c006ea6:	4618      	mov	r0, r3
 c006ea8:	f000 f97c 	bl	c0071a4 <RCCEx_PLLSAI1_Config>
 c006eac:	4603      	mov	r3, r0
 c006eae:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c006eb0:	e003      	b.n	c006eba <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 c006eb2:	2301      	movs	r3, #1
 c006eb4:	77fb      	strb	r3, [r7, #31]
        break;
 c006eb6:	e000      	b.n	c006eba <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 c006eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 c006eba:	7ffb      	ldrb	r3, [r7, #31]
 c006ebc:	2b00      	cmp	r3, #0
 c006ebe:	d10b      	bne.n	c006ed8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 c006ec0:	4b37      	ldr	r3, [pc, #220]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006ec6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 c006eca:	687b      	ldr	r3, [r7, #4]
 c006ecc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c006ece:	4934      	ldr	r1, [pc, #208]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006ed0:	4313      	orrs	r3, r2
 c006ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c006ed6:	e001      	b.n	c006edc <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c006ed8:	7ffb      	ldrb	r3, [r7, #31]
 c006eda:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c006edc:	687b      	ldr	r3, [r7, #4]
 c006ede:	681b      	ldr	r3, [r3, #0]
 c006ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c006ee4:	2b00      	cmp	r3, #0
 c006ee6:	d00a      	beq.n	c006efe <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 c006ee8:	4b2d      	ldr	r3, [pc, #180]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006eee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 c006ef2:	687b      	ldr	r3, [r7, #4]
 c006ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c006ef6:	492a      	ldr	r1, [pc, #168]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006ef8:	4313      	orrs	r3, r2
 c006efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c006efe:	687b      	ldr	r3, [r7, #4]
 c006f00:	681b      	ldr	r3, [r3, #0]
 c006f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c006f06:	2b00      	cmp	r3, #0
 c006f08:	d00a      	beq.n	c006f20 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 c006f0a:	4b25      	ldr	r3, [pc, #148]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006f10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 c006f14:	687b      	ldr	r3, [r7, #4]
 c006f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c006f18:	4921      	ldr	r1, [pc, #132]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006f1a:	4313      	orrs	r3, r2
 c006f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c006f20:	687b      	ldr	r3, [r7, #4]
 c006f22:	681b      	ldr	r3, [r3, #0]
 c006f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c006f28:	2b00      	cmp	r3, #0
 c006f2a:	d00a      	beq.n	c006f42 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 c006f2c:	4b1c      	ldr	r3, [pc, #112]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006f32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 c006f36:	687b      	ldr	r3, [r7, #4]
 c006f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c006f3a:	4919      	ldr	r1, [pc, #100]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006f3c:	4313      	orrs	r3, r2
 c006f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c006f42:	687b      	ldr	r3, [r7, #4]
 c006f44:	681b      	ldr	r3, [r3, #0]
 c006f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c006f4a:	2b00      	cmp	r3, #0
 c006f4c:	d00a      	beq.n	c006f64 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 c006f4e:	4b14      	ldr	r3, [pc, #80]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006f50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c006f54:	f023 0203 	bic.w	r2, r3, #3
 c006f58:	687b      	ldr	r3, [r7, #4]
 c006f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c006f5c:	4910      	ldr	r1, [pc, #64]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006f5e:	4313      	orrs	r3, r2
 c006f60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 c006f64:	687b      	ldr	r3, [r7, #4]
 c006f66:	681b      	ldr	r3, [r3, #0]
 c006f68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c006f6c:	2b00      	cmp	r3, #0
 c006f6e:	d02b      	beq.n	c006fc8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 c006f70:	4b0b      	ldr	r3, [pc, #44]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006f76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c006f7a:	687b      	ldr	r3, [r7, #4]
 c006f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c006f7e:	4908      	ldr	r1, [pc, #32]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006f80:	4313      	orrs	r3, r2
 c006f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 c006f86:	687b      	ldr	r3, [r7, #4]
 c006f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c006f8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c006f8e:	d109      	bne.n	c006fa4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c006f90:	4b03      	ldr	r3, [pc, #12]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006f92:	68db      	ldr	r3, [r3, #12]
 c006f94:	4a02      	ldr	r2, [pc, #8]	; (c006fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006f96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c006f9a:	60d3      	str	r3, [r2, #12]
 c006f9c:	e014      	b.n	c006fc8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 c006f9e:	bf00      	nop
 c006fa0:	50021000 	.word	0x50021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 c006fa4:	687b      	ldr	r3, [r7, #4]
 c006fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c006fa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c006fac:	d10c      	bne.n	c006fc8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c006fae:	687b      	ldr	r3, [r7, #4]
 c006fb0:	3304      	adds	r3, #4
 c006fb2:	2101      	movs	r1, #1
 c006fb4:	4618      	mov	r0, r3
 c006fb6:	f000 f8f5 	bl	c0071a4 <RCCEx_PLLSAI1_Config>
 c006fba:	4603      	mov	r3, r0
 c006fbc:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 c006fbe:	7ffb      	ldrb	r3, [r7, #31]
 c006fc0:	2b00      	cmp	r3, #0
 c006fc2:	d001      	beq.n	c006fc8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 c006fc4:	7ffb      	ldrb	r3, [r7, #31]
 c006fc6:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 c006fc8:	687b      	ldr	r3, [r7, #4]
 c006fca:	681b      	ldr	r3, [r3, #0]
 c006fcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c006fd0:	2b00      	cmp	r3, #0
 c006fd2:	d04a      	beq.n	c00706a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c006fd4:	687b      	ldr	r3, [r7, #4]
 c006fd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c006fd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c006fdc:	d108      	bne.n	c006ff0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 c006fde:	4b70      	ldr	r3, [pc, #448]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c006fe0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c006fe4:	4a6e      	ldr	r2, [pc, #440]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c006fe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c006fea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 c006fee:	e012      	b.n	c007016 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 c006ff0:	4b6b      	ldr	r3, [pc, #428]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c006ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006ff6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c006ffa:	687b      	ldr	r3, [r7, #4]
 c006ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c006ffe:	4968      	ldr	r1, [pc, #416]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007000:	4313      	orrs	r3, r2
 c007002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c007006:	4b66      	ldr	r3, [pc, #408]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007008:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c00700c:	4a64      	ldr	r2, [pc, #400]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00700e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 c007012:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 c007016:	687b      	ldr	r3, [r7, #4]
 c007018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c00701a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c00701e:	d10d      	bne.n	c00703c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c007020:	687b      	ldr	r3, [r7, #4]
 c007022:	3304      	adds	r3, #4
 c007024:	2101      	movs	r1, #1
 c007026:	4618      	mov	r0, r3
 c007028:	f000 f8bc 	bl	c0071a4 <RCCEx_PLLSAI1_Config>
 c00702c:	4603      	mov	r3, r0
 c00702e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c007030:	7ffb      	ldrb	r3, [r7, #31]
 c007032:	2b00      	cmp	r3, #0
 c007034:	d019      	beq.n	c00706a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 c007036:	7ffb      	ldrb	r3, [r7, #31]
 c007038:	77bb      	strb	r3, [r7, #30]
 c00703a:	e016      	b.n	c00706a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 c00703c:	687b      	ldr	r3, [r7, #4]
 c00703e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c007040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c007044:	d106      	bne.n	c007054 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c007046:	4b56      	ldr	r3, [pc, #344]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007048:	68db      	ldr	r3, [r3, #12]
 c00704a:	4a55      	ldr	r2, [pc, #340]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00704c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c007050:	60d3      	str	r3, [r2, #12]
 c007052:	e00a      	b.n	c00706a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 c007054:	687b      	ldr	r3, [r7, #4]
 c007056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c007058:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c00705c:	d105      	bne.n	c00706a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c00705e:	4b50      	ldr	r3, [pc, #320]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007060:	68db      	ldr	r3, [r3, #12]
 c007062:	4a4f      	ldr	r2, [pc, #316]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c007068:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 c00706a:	687b      	ldr	r3, [r7, #4]
 c00706c:	681b      	ldr	r3, [r3, #0]
 c00706e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c007072:	2b00      	cmp	r3, #0
 c007074:	d028      	beq.n	c0070c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 c007076:	4b4a      	ldr	r3, [pc, #296]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00707c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c007080:	687b      	ldr	r3, [r7, #4]
 c007082:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c007084:	4946      	ldr	r1, [pc, #280]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007086:	4313      	orrs	r3, r2
 c007088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 c00708c:	687b      	ldr	r3, [r7, #4]
 c00708e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c007090:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c007094:	d106      	bne.n	c0070a4 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c007096:	4b42      	ldr	r3, [pc, #264]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007098:	68db      	ldr	r3, [r3, #12]
 c00709a:	4a41      	ldr	r2, [pc, #260]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00709c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c0070a0:	60d3      	str	r3, [r2, #12]
 c0070a2:	e011      	b.n	c0070c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 c0070a4:	687b      	ldr	r3, [r7, #4]
 c0070a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c0070a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c0070ac:	d10c      	bne.n	c0070c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c0070ae:	687b      	ldr	r3, [r7, #4]
 c0070b0:	3304      	adds	r3, #4
 c0070b2:	2101      	movs	r1, #1
 c0070b4:	4618      	mov	r0, r3
 c0070b6:	f000 f875 	bl	c0071a4 <RCCEx_PLLSAI1_Config>
 c0070ba:	4603      	mov	r3, r0
 c0070bc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c0070be:	7ffb      	ldrb	r3, [r7, #31]
 c0070c0:	2b00      	cmp	r3, #0
 c0070c2:	d001      	beq.n	c0070c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 c0070c4:	7ffb      	ldrb	r3, [r7, #31]
 c0070c6:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 c0070c8:	687b      	ldr	r3, [r7, #4]
 c0070ca:	681b      	ldr	r3, [r3, #0]
 c0070cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c0070d0:	2b00      	cmp	r3, #0
 c0070d2:	d01e      	beq.n	c007112 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 c0070d4:	4b32      	ldr	r3, [pc, #200]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0070d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0070da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 c0070de:	687b      	ldr	r3, [r7, #4]
 c0070e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c0070e4:	492e      	ldr	r1, [pc, #184]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0070e6:	4313      	orrs	r3, r2
 c0070e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 c0070ec:	687b      	ldr	r3, [r7, #4]
 c0070ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c0070f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c0070f6:	d10c      	bne.n	c007112 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 c0070f8:	687b      	ldr	r3, [r7, #4]
 c0070fa:	3304      	adds	r3, #4
 c0070fc:	2102      	movs	r1, #2
 c0070fe:	4618      	mov	r0, r3
 c007100:	f000 f850 	bl	c0071a4 <RCCEx_PLLSAI1_Config>
 c007104:	4603      	mov	r3, r0
 c007106:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c007108:	7ffb      	ldrb	r3, [r7, #31]
 c00710a:	2b00      	cmp	r3, #0
 c00710c:	d001      	beq.n	c007112 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 c00710e:	7ffb      	ldrb	r3, [r7, #31]
 c007110:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 c007112:	687b      	ldr	r3, [r7, #4]
 c007114:	681b      	ldr	r3, [r3, #0]
 c007116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c00711a:	2b00      	cmp	r3, #0
 c00711c:	d00b      	beq.n	c007136 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 c00711e:	4b20      	ldr	r3, [pc, #128]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007120:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c007124:	f023 0204 	bic.w	r2, r3, #4
 c007128:	687b      	ldr	r3, [r7, #4]
 c00712a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c00712e:	491c      	ldr	r1, [pc, #112]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007130:	4313      	orrs	r3, r2
 c007132:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 c007136:	687b      	ldr	r3, [r7, #4]
 c007138:	681b      	ldr	r3, [r3, #0]
 c00713a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c00713e:	2b00      	cmp	r3, #0
 c007140:	d00b      	beq.n	c00715a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 c007142:	4b17      	ldr	r3, [pc, #92]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007144:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c007148:	f023 0218 	bic.w	r2, r3, #24
 c00714c:	687b      	ldr	r3, [r7, #4]
 c00714e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007152:	4913      	ldr	r1, [pc, #76]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007154:	4313      	orrs	r3, r2
 c007156:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c00715a:	687b      	ldr	r3, [r7, #4]
 c00715c:	681b      	ldr	r3, [r3, #0]
 c00715e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c007162:	2b00      	cmp	r3, #0
 c007164:	d017      	beq.n	c007196 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 c007166:	4b0e      	ldr	r3, [pc, #56]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007168:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c00716c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c007170:	687b      	ldr	r3, [r7, #4]
 c007172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c007176:	490a      	ldr	r1, [pc, #40]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007178:	4313      	orrs	r3, r2
 c00717a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 c00717e:	687b      	ldr	r3, [r7, #4]
 c007180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c007184:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c007188:	d105      	bne.n	c007196 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c00718a:	4b05      	ldr	r3, [pc, #20]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00718c:	68db      	ldr	r3, [r3, #12]
 c00718e:	4a04      	ldr	r2, [pc, #16]	; (c0071a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007190:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c007194:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 c007196:	7fbb      	ldrb	r3, [r7, #30]
}
 c007198:	4618      	mov	r0, r3
 c00719a:	3720      	adds	r7, #32
 c00719c:	46bd      	mov	sp, r7
 c00719e:	bd80      	pop	{r7, pc}
 c0071a0:	50021000 	.word	0x50021000

0c0071a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 c0071a4:	b580      	push	{r7, lr}
 c0071a6:	b084      	sub	sp, #16
 c0071a8:	af00      	add	r7, sp, #0
 c0071aa:	6078      	str	r0, [r7, #4]
 c0071ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c0071ae:	2300      	movs	r3, #0
 c0071b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 c0071b2:	687b      	ldr	r3, [r7, #4]
 c0071b4:	681b      	ldr	r3, [r3, #0]
 c0071b6:	2b03      	cmp	r3, #3
 c0071b8:	d018      	beq.n	c0071ec <RCCEx_PLLSAI1_Config+0x48>
 c0071ba:	2b03      	cmp	r3, #3
 c0071bc:	d81f      	bhi.n	c0071fe <RCCEx_PLLSAI1_Config+0x5a>
 c0071be:	2b01      	cmp	r3, #1
 c0071c0:	d002      	beq.n	c0071c8 <RCCEx_PLLSAI1_Config+0x24>
 c0071c2:	2b02      	cmp	r3, #2
 c0071c4:	d009      	beq.n	c0071da <RCCEx_PLLSAI1_Config+0x36>
 c0071c6:	e01a      	b.n	c0071fe <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c0071c8:	4b65      	ldr	r3, [pc, #404]	; (c007360 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0071ca:	681b      	ldr	r3, [r3, #0]
 c0071cc:	f003 0302 	and.w	r3, r3, #2
 c0071d0:	2b00      	cmp	r3, #0
 c0071d2:	d117      	bne.n	c007204 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 c0071d4:	2301      	movs	r3, #1
 c0071d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0071d8:	e014      	b.n	c007204 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c0071da:	4b61      	ldr	r3, [pc, #388]	; (c007360 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0071dc:	681b      	ldr	r3, [r3, #0]
 c0071de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0071e2:	2b00      	cmp	r3, #0
 c0071e4:	d110      	bne.n	c007208 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 c0071e6:	2301      	movs	r3, #1
 c0071e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0071ea:	e00d      	b.n	c007208 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c0071ec:	4b5c      	ldr	r3, [pc, #368]	; (c007360 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0071ee:	681b      	ldr	r3, [r3, #0]
 c0071f0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c0071f4:	2b00      	cmp	r3, #0
 c0071f6:	d109      	bne.n	c00720c <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 c0071f8:	2301      	movs	r3, #1
 c0071fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0071fc:	e006      	b.n	c00720c <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 c0071fe:	2301      	movs	r3, #1
 c007200:	73fb      	strb	r3, [r7, #15]
      break;
 c007202:	e004      	b.n	c00720e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c007204:	bf00      	nop
 c007206:	e002      	b.n	c00720e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c007208:	bf00      	nop
 c00720a:	e000      	b.n	c00720e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c00720c:	bf00      	nop
  }

  if (status == HAL_OK)
 c00720e:	7bfb      	ldrb	r3, [r7, #15]
 c007210:	2b00      	cmp	r3, #0
 c007212:	f040 809f 	bne.w	c007354 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 c007216:	4b52      	ldr	r3, [pc, #328]	; (c007360 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007218:	681b      	ldr	r3, [r3, #0]
 c00721a:	4a51      	ldr	r2, [pc, #324]	; (c007360 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00721c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c007220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c007222:	f7fd feb9 	bl	c004f98 <HAL_GetTick>
 c007226:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c007228:	e00f      	b.n	c00724a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c00722a:	f7fd feb5 	bl	c004f98 <HAL_GetTick>
 c00722e:	4602      	mov	r2, r0
 c007230:	68bb      	ldr	r3, [r7, #8]
 c007232:	1ad3      	subs	r3, r2, r3
 c007234:	2b02      	cmp	r3, #2
 c007236:	d908      	bls.n	c00724a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c007238:	4b49      	ldr	r3, [pc, #292]	; (c007360 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00723a:	681b      	ldr	r3, [r3, #0]
 c00723c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c007240:	2b00      	cmp	r3, #0
 c007242:	d009      	beq.n	c007258 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 c007244:	2303      	movs	r3, #3
 c007246:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c007248:	e006      	b.n	c007258 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c00724a:	4b45      	ldr	r3, [pc, #276]	; (c007360 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00724c:	681b      	ldr	r3, [r3, #0]
 c00724e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c007252:	2b00      	cmp	r3, #0
 c007254:	d1e9      	bne.n	c00722a <RCCEx_PLLSAI1_Config+0x86>
 c007256:	e000      	b.n	c00725a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 c007258:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c00725a:	7bfb      	ldrb	r3, [r7, #15]
 c00725c:	2b00      	cmp	r3, #0
 c00725e:	d179      	bne.n	c007354 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c007260:	683b      	ldr	r3, [r7, #0]
 c007262:	2b00      	cmp	r3, #0
 c007264:	d116      	bne.n	c007294 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c007266:	4b3e      	ldr	r3, [pc, #248]	; (c007360 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007268:	691a      	ldr	r2, [r3, #16]
 c00726a:	4b3e      	ldr	r3, [pc, #248]	; (c007364 <RCCEx_PLLSAI1_Config+0x1c0>)
 c00726c:	4013      	ands	r3, r2
 c00726e:	687a      	ldr	r2, [r7, #4]
 c007270:	6892      	ldr	r2, [r2, #8]
 c007272:	0211      	lsls	r1, r2, #8
 c007274:	687a      	ldr	r2, [r7, #4]
 c007276:	68d2      	ldr	r2, [r2, #12]
 c007278:	06d2      	lsls	r2, r2, #27
 c00727a:	4311      	orrs	r1, r2
 c00727c:	687a      	ldr	r2, [r7, #4]
 c00727e:	6852      	ldr	r2, [r2, #4]
 c007280:	3a01      	subs	r2, #1
 c007282:	0112      	lsls	r2, r2, #4
 c007284:	4311      	orrs	r1, r2
 c007286:	687a      	ldr	r2, [r7, #4]
 c007288:	6812      	ldr	r2, [r2, #0]
 c00728a:	430a      	orrs	r2, r1
 c00728c:	4934      	ldr	r1, [pc, #208]	; (c007360 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00728e:	4313      	orrs	r3, r2
 c007290:	610b      	str	r3, [r1, #16]
 c007292:	e033      	b.n	c0072fc <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 c007294:	683b      	ldr	r3, [r7, #0]
 c007296:	2b01      	cmp	r3, #1
 c007298:	d118      	bne.n	c0072cc <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c00729a:	4b31      	ldr	r3, [pc, #196]	; (c007360 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00729c:	691a      	ldr	r2, [r3, #16]
 c00729e:	4b32      	ldr	r3, [pc, #200]	; (c007368 <RCCEx_PLLSAI1_Config+0x1c4>)
 c0072a0:	4013      	ands	r3, r2
 c0072a2:	687a      	ldr	r2, [r7, #4]
 c0072a4:	6892      	ldr	r2, [r2, #8]
 c0072a6:	0211      	lsls	r1, r2, #8
 c0072a8:	687a      	ldr	r2, [r7, #4]
 c0072aa:	6912      	ldr	r2, [r2, #16]
 c0072ac:	0852      	lsrs	r2, r2, #1
 c0072ae:	3a01      	subs	r2, #1
 c0072b0:	0552      	lsls	r2, r2, #21
 c0072b2:	4311      	orrs	r1, r2
 c0072b4:	687a      	ldr	r2, [r7, #4]
 c0072b6:	6852      	ldr	r2, [r2, #4]
 c0072b8:	3a01      	subs	r2, #1
 c0072ba:	0112      	lsls	r2, r2, #4
 c0072bc:	4311      	orrs	r1, r2
 c0072be:	687a      	ldr	r2, [r7, #4]
 c0072c0:	6812      	ldr	r2, [r2, #0]
 c0072c2:	430a      	orrs	r2, r1
 c0072c4:	4926      	ldr	r1, [pc, #152]	; (c007360 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0072c6:	4313      	orrs	r3, r2
 c0072c8:	610b      	str	r3, [r1, #16]
 c0072ca:	e017      	b.n	c0072fc <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c0072cc:	4b24      	ldr	r3, [pc, #144]	; (c007360 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0072ce:	691a      	ldr	r2, [r3, #16]
 c0072d0:	4b26      	ldr	r3, [pc, #152]	; (c00736c <RCCEx_PLLSAI1_Config+0x1c8>)
 c0072d2:	4013      	ands	r3, r2
 c0072d4:	687a      	ldr	r2, [r7, #4]
 c0072d6:	6892      	ldr	r2, [r2, #8]
 c0072d8:	0211      	lsls	r1, r2, #8
 c0072da:	687a      	ldr	r2, [r7, #4]
 c0072dc:	6952      	ldr	r2, [r2, #20]
 c0072de:	0852      	lsrs	r2, r2, #1
 c0072e0:	3a01      	subs	r2, #1
 c0072e2:	0652      	lsls	r2, r2, #25
 c0072e4:	4311      	orrs	r1, r2
 c0072e6:	687a      	ldr	r2, [r7, #4]
 c0072e8:	6852      	ldr	r2, [r2, #4]
 c0072ea:	3a01      	subs	r2, #1
 c0072ec:	0112      	lsls	r2, r2, #4
 c0072ee:	4311      	orrs	r1, r2
 c0072f0:	687a      	ldr	r2, [r7, #4]
 c0072f2:	6812      	ldr	r2, [r2, #0]
 c0072f4:	430a      	orrs	r2, r1
 c0072f6:	491a      	ldr	r1, [pc, #104]	; (c007360 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0072f8:	4313      	orrs	r3, r2
 c0072fa:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 c0072fc:	4b18      	ldr	r3, [pc, #96]	; (c007360 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0072fe:	681b      	ldr	r3, [r3, #0]
 c007300:	4a17      	ldr	r2, [pc, #92]	; (c007360 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007302:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 c007306:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c007308:	f7fd fe46 	bl	c004f98 <HAL_GetTick>
 c00730c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c00730e:	e00f      	b.n	c007330 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c007310:	f7fd fe42 	bl	c004f98 <HAL_GetTick>
 c007314:	4602      	mov	r2, r0
 c007316:	68bb      	ldr	r3, [r7, #8]
 c007318:	1ad3      	subs	r3, r2, r3
 c00731a:	2b02      	cmp	r3, #2
 c00731c:	d908      	bls.n	c007330 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c00731e:	4b10      	ldr	r3, [pc, #64]	; (c007360 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007320:	681b      	ldr	r3, [r3, #0]
 c007322:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c007326:	2b00      	cmp	r3, #0
 c007328:	d109      	bne.n	c00733e <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 c00732a:	2303      	movs	r3, #3
 c00732c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c00732e:	e006      	b.n	c00733e <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c007330:	4b0b      	ldr	r3, [pc, #44]	; (c007360 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007332:	681b      	ldr	r3, [r3, #0]
 c007334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c007338:	2b00      	cmp	r3, #0
 c00733a:	d0e9      	beq.n	c007310 <RCCEx_PLLSAI1_Config+0x16c>
 c00733c:	e000      	b.n	c007340 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 c00733e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c007340:	7bfb      	ldrb	r3, [r7, #15]
 c007342:	2b00      	cmp	r3, #0
 c007344:	d106      	bne.n	c007354 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 c007346:	4b06      	ldr	r3, [pc, #24]	; (c007360 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007348:	691a      	ldr	r2, [r3, #16]
 c00734a:	687b      	ldr	r3, [r7, #4]
 c00734c:	699b      	ldr	r3, [r3, #24]
 c00734e:	4904      	ldr	r1, [pc, #16]	; (c007360 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007350:	4313      	orrs	r3, r2
 c007352:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 c007354:	7bfb      	ldrb	r3, [r7, #15]
}
 c007356:	4618      	mov	r0, r3
 c007358:	3710      	adds	r7, #16
 c00735a:	46bd      	mov	sp, r7
 c00735c:	bd80      	pop	{r7, pc}
 c00735e:	bf00      	nop
 c007360:	50021000 	.word	0x50021000
 c007364:	07ff800c 	.word	0x07ff800c
 c007368:	ff9f800c 	.word	0xff9f800c
 c00736c:	f9ff800c 	.word	0xf9ff800c

0c007370 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 c007370:	b580      	push	{r7, lr}
 c007372:	b084      	sub	sp, #16
 c007374:	af00      	add	r7, sp, #0
 c007376:	6078      	str	r0, [r7, #4]
 c007378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c00737a:	2300      	movs	r3, #0
 c00737c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 c00737e:	687b      	ldr	r3, [r7, #4]
 c007380:	681b      	ldr	r3, [r3, #0]
 c007382:	2b03      	cmp	r3, #3
 c007384:	d018      	beq.n	c0073b8 <RCCEx_PLLSAI2_Config+0x48>
 c007386:	2b03      	cmp	r3, #3
 c007388:	d81f      	bhi.n	c0073ca <RCCEx_PLLSAI2_Config+0x5a>
 c00738a:	2b01      	cmp	r3, #1
 c00738c:	d002      	beq.n	c007394 <RCCEx_PLLSAI2_Config+0x24>
 c00738e:	2b02      	cmp	r3, #2
 c007390:	d009      	beq.n	c0073a6 <RCCEx_PLLSAI2_Config+0x36>
 c007392:	e01a      	b.n	c0073ca <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c007394:	4b4a      	ldr	r3, [pc, #296]	; (c0074c0 <RCCEx_PLLSAI2_Config+0x150>)
 c007396:	681b      	ldr	r3, [r3, #0]
 c007398:	f003 0302 	and.w	r3, r3, #2
 c00739c:	2b00      	cmp	r3, #0
 c00739e:	d117      	bne.n	c0073d0 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 c0073a0:	2301      	movs	r3, #1
 c0073a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0073a4:	e014      	b.n	c0073d0 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c0073a6:	4b46      	ldr	r3, [pc, #280]	; (c0074c0 <RCCEx_PLLSAI2_Config+0x150>)
 c0073a8:	681b      	ldr	r3, [r3, #0]
 c0073aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0073ae:	2b00      	cmp	r3, #0
 c0073b0:	d110      	bne.n	c0073d4 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 c0073b2:	2301      	movs	r3, #1
 c0073b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0073b6:	e00d      	b.n	c0073d4 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c0073b8:	4b41      	ldr	r3, [pc, #260]	; (c0074c0 <RCCEx_PLLSAI2_Config+0x150>)
 c0073ba:	681b      	ldr	r3, [r3, #0]
 c0073bc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c0073c0:	2b00      	cmp	r3, #0
 c0073c2:	d109      	bne.n	c0073d8 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 c0073c4:	2301      	movs	r3, #1
 c0073c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0073c8:	e006      	b.n	c0073d8 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 c0073ca:	2301      	movs	r3, #1
 c0073cc:	73fb      	strb	r3, [r7, #15]
      break;
 c0073ce:	e004      	b.n	c0073da <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c0073d0:	bf00      	nop
 c0073d2:	e002      	b.n	c0073da <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c0073d4:	bf00      	nop
 c0073d6:	e000      	b.n	c0073da <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c0073d8:	bf00      	nop
  }

  if (status == HAL_OK)
 c0073da:	7bfb      	ldrb	r3, [r7, #15]
 c0073dc:	2b00      	cmp	r3, #0
 c0073de:	d169      	bne.n	c0074b4 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 c0073e0:	4b37      	ldr	r3, [pc, #220]	; (c0074c0 <RCCEx_PLLSAI2_Config+0x150>)
 c0073e2:	681b      	ldr	r3, [r3, #0]
 c0073e4:	4a36      	ldr	r2, [pc, #216]	; (c0074c0 <RCCEx_PLLSAI2_Config+0x150>)
 c0073e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c0073ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c0073ec:	f7fd fdd4 	bl	c004f98 <HAL_GetTick>
 c0073f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c0073f2:	e00f      	b.n	c007414 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c0073f4:	f7fd fdd0 	bl	c004f98 <HAL_GetTick>
 c0073f8:	4602      	mov	r2, r0
 c0073fa:	68bb      	ldr	r3, [r7, #8]
 c0073fc:	1ad3      	subs	r3, r2, r3
 c0073fe:	2b02      	cmp	r3, #2
 c007400:	d908      	bls.n	c007414 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c007402:	4b2f      	ldr	r3, [pc, #188]	; (c0074c0 <RCCEx_PLLSAI2_Config+0x150>)
 c007404:	681b      	ldr	r3, [r3, #0]
 c007406:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c00740a:	2b00      	cmp	r3, #0
 c00740c:	d009      	beq.n	c007422 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 c00740e:	2303      	movs	r3, #3
 c007410:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c007412:	e006      	b.n	c007422 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c007414:	4b2a      	ldr	r3, [pc, #168]	; (c0074c0 <RCCEx_PLLSAI2_Config+0x150>)
 c007416:	681b      	ldr	r3, [r3, #0]
 c007418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c00741c:	2b00      	cmp	r3, #0
 c00741e:	d1e9      	bne.n	c0073f4 <RCCEx_PLLSAI2_Config+0x84>
 c007420:	e000      	b.n	c007424 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 c007422:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c007424:	7bfb      	ldrb	r3, [r7, #15]
 c007426:	2b00      	cmp	r3, #0
 c007428:	d144      	bne.n	c0074b4 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c00742a:	683b      	ldr	r3, [r7, #0]
 c00742c:	2b00      	cmp	r3, #0
 c00742e:	d115      	bne.n	c00745c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 c007430:	4b23      	ldr	r3, [pc, #140]	; (c0074c0 <RCCEx_PLLSAI2_Config+0x150>)
 c007432:	695a      	ldr	r2, [r3, #20]
 c007434:	4b23      	ldr	r3, [pc, #140]	; (c0074c4 <RCCEx_PLLSAI2_Config+0x154>)
 c007436:	4013      	ands	r3, r2
 c007438:	687a      	ldr	r2, [r7, #4]
 c00743a:	6892      	ldr	r2, [r2, #8]
 c00743c:	0211      	lsls	r1, r2, #8
 c00743e:	687a      	ldr	r2, [r7, #4]
 c007440:	68d2      	ldr	r2, [r2, #12]
 c007442:	06d2      	lsls	r2, r2, #27
 c007444:	4311      	orrs	r1, r2
 c007446:	687a      	ldr	r2, [r7, #4]
 c007448:	6852      	ldr	r2, [r2, #4]
 c00744a:	3a01      	subs	r2, #1
 c00744c:	0112      	lsls	r2, r2, #4
 c00744e:	4311      	orrs	r1, r2
 c007450:	687a      	ldr	r2, [r7, #4]
 c007452:	6812      	ldr	r2, [r2, #0]
 c007454:	430a      	orrs	r2, r1
 c007456:	491a      	ldr	r1, [pc, #104]	; (c0074c0 <RCCEx_PLLSAI2_Config+0x150>)
 c007458:	4313      	orrs	r3, r2
 c00745a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 c00745c:	4b18      	ldr	r3, [pc, #96]	; (c0074c0 <RCCEx_PLLSAI2_Config+0x150>)
 c00745e:	681b      	ldr	r3, [r3, #0]
 c007460:	4a17      	ldr	r2, [pc, #92]	; (c0074c0 <RCCEx_PLLSAI2_Config+0x150>)
 c007462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c007466:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c007468:	f7fd fd96 	bl	c004f98 <HAL_GetTick>
 c00746c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c00746e:	e00f      	b.n	c007490 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c007470:	f7fd fd92 	bl	c004f98 <HAL_GetTick>
 c007474:	4602      	mov	r2, r0
 c007476:	68bb      	ldr	r3, [r7, #8]
 c007478:	1ad3      	subs	r3, r2, r3
 c00747a:	2b02      	cmp	r3, #2
 c00747c:	d908      	bls.n	c007490 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c00747e:	4b10      	ldr	r3, [pc, #64]	; (c0074c0 <RCCEx_PLLSAI2_Config+0x150>)
 c007480:	681b      	ldr	r3, [r3, #0]
 c007482:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c007486:	2b00      	cmp	r3, #0
 c007488:	d109      	bne.n	c00749e <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 c00748a:	2303      	movs	r3, #3
 c00748c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c00748e:	e006      	b.n	c00749e <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c007490:	4b0b      	ldr	r3, [pc, #44]	; (c0074c0 <RCCEx_PLLSAI2_Config+0x150>)
 c007492:	681b      	ldr	r3, [r3, #0]
 c007494:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c007498:	2b00      	cmp	r3, #0
 c00749a:	d0e9      	beq.n	c007470 <RCCEx_PLLSAI2_Config+0x100>
 c00749c:	e000      	b.n	c0074a0 <RCCEx_PLLSAI2_Config+0x130>
          break;
 c00749e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c0074a0:	7bfb      	ldrb	r3, [r7, #15]
 c0074a2:	2b00      	cmp	r3, #0
 c0074a4:	d106      	bne.n	c0074b4 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 c0074a6:	4b06      	ldr	r3, [pc, #24]	; (c0074c0 <RCCEx_PLLSAI2_Config+0x150>)
 c0074a8:	695a      	ldr	r2, [r3, #20]
 c0074aa:	687b      	ldr	r3, [r7, #4]
 c0074ac:	691b      	ldr	r3, [r3, #16]
 c0074ae:	4904      	ldr	r1, [pc, #16]	; (c0074c0 <RCCEx_PLLSAI2_Config+0x150>)
 c0074b0:	4313      	orrs	r3, r2
 c0074b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 c0074b4:	7bfb      	ldrb	r3, [r7, #15]
}
 c0074b6:	4618      	mov	r0, r3
 c0074b8:	3710      	adds	r7, #16
 c0074ba:	46bd      	mov	sp, r7
 c0074bc:	bd80      	pop	{r7, pc}
 c0074be:	bf00      	nop
 c0074c0:	50021000 	.word	0x50021000
 c0074c4:	07ff800c 	.word	0x07ff800c

0c0074c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 c0074c8:	b580      	push	{r7, lr}
 c0074ca:	b082      	sub	sp, #8
 c0074cc:	af00      	add	r7, sp, #0
 c0074ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 c0074d0:	687b      	ldr	r3, [r7, #4]
 c0074d2:	2b00      	cmp	r3, #0
 c0074d4:	d101      	bne.n	c0074da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 c0074d6:	2301      	movs	r3, #1
 c0074d8:	e042      	b.n	c007560 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 c0074da:	687b      	ldr	r3, [r7, #4]
 c0074dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c0074e0:	2b00      	cmp	r3, #0
 c0074e2:	d106      	bne.n	c0074f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 c0074e4:	687b      	ldr	r3, [r7, #4]
 c0074e6:	2200      	movs	r2, #0
 c0074e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 c0074ec:	6878      	ldr	r0, [r7, #4]
 c0074ee:	f7fd fc37 	bl	c004d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 c0074f2:	687b      	ldr	r3, [r7, #4]
 c0074f4:	2224      	movs	r2, #36	; 0x24
 c0074f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 c0074fa:	687b      	ldr	r3, [r7, #4]
 c0074fc:	681b      	ldr	r3, [r3, #0]
 c0074fe:	681a      	ldr	r2, [r3, #0]
 c007500:	687b      	ldr	r3, [r7, #4]
 c007502:	681b      	ldr	r3, [r3, #0]
 c007504:	f022 0201 	bic.w	r2, r2, #1
 c007508:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 c00750a:	6878      	ldr	r0, [r7, #4]
 c00750c:	f000 f996 	bl	c00783c <UART_SetConfig>
 c007510:	4603      	mov	r3, r0
 c007512:	2b01      	cmp	r3, #1
 c007514:	d101      	bne.n	c00751a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 c007516:	2301      	movs	r3, #1
 c007518:	e022      	b.n	c007560 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 c00751a:	687b      	ldr	r3, [r7, #4]
 c00751c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00751e:	2b00      	cmp	r3, #0
 c007520:	d002      	beq.n	c007528 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 c007522:	6878      	ldr	r0, [r7, #4]
 c007524:	f000 fc88 	bl	c007e38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c007528:	687b      	ldr	r3, [r7, #4]
 c00752a:	681b      	ldr	r3, [r3, #0]
 c00752c:	685a      	ldr	r2, [r3, #4]
 c00752e:	687b      	ldr	r3, [r7, #4]
 c007530:	681b      	ldr	r3, [r3, #0]
 c007532:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 c007536:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 c007538:	687b      	ldr	r3, [r7, #4]
 c00753a:	681b      	ldr	r3, [r3, #0]
 c00753c:	689a      	ldr	r2, [r3, #8]
 c00753e:	687b      	ldr	r3, [r7, #4]
 c007540:	681b      	ldr	r3, [r3, #0]
 c007542:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 c007546:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 c007548:	687b      	ldr	r3, [r7, #4]
 c00754a:	681b      	ldr	r3, [r3, #0]
 c00754c:	681a      	ldr	r2, [r3, #0]
 c00754e:	687b      	ldr	r3, [r7, #4]
 c007550:	681b      	ldr	r3, [r3, #0]
 c007552:	f042 0201 	orr.w	r2, r2, #1
 c007556:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 c007558:	6878      	ldr	r0, [r7, #4]
 c00755a:	f000 fd0f 	bl	c007f7c <UART_CheckIdleState>
 c00755e:	4603      	mov	r3, r0
}
 c007560:	4618      	mov	r0, r3
 c007562:	3708      	adds	r7, #8
 c007564:	46bd      	mov	sp, r7
 c007566:	bd80      	pop	{r7, pc}

0c007568 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c007568:	b580      	push	{r7, lr}
 c00756a:	b08a      	sub	sp, #40	; 0x28
 c00756c:	af02      	add	r7, sp, #8
 c00756e:	60f8      	str	r0, [r7, #12]
 c007570:	60b9      	str	r1, [r7, #8]
 c007572:	603b      	str	r3, [r7, #0]
 c007574:	4613      	mov	r3, r2
 c007576:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 c007578:	68fb      	ldr	r3, [r7, #12]
 c00757a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c00757e:	2b20      	cmp	r3, #32
 c007580:	f040 8083 	bne.w	c00768a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 c007584:	68bb      	ldr	r3, [r7, #8]
 c007586:	2b00      	cmp	r3, #0
 c007588:	d002      	beq.n	c007590 <HAL_UART_Transmit+0x28>
 c00758a:	88fb      	ldrh	r3, [r7, #6]
 c00758c:	2b00      	cmp	r3, #0
 c00758e:	d101      	bne.n	c007594 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 c007590:	2301      	movs	r3, #1
 c007592:	e07b      	b.n	c00768c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 c007594:	68fb      	ldr	r3, [r7, #12]
 c007596:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c00759a:	2b01      	cmp	r3, #1
 c00759c:	d101      	bne.n	c0075a2 <HAL_UART_Transmit+0x3a>
 c00759e:	2302      	movs	r3, #2
 c0075a0:	e074      	b.n	c00768c <HAL_UART_Transmit+0x124>
 c0075a2:	68fb      	ldr	r3, [r7, #12]
 c0075a4:	2201      	movs	r2, #1
 c0075a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c0075aa:	68fb      	ldr	r3, [r7, #12]
 c0075ac:	2200      	movs	r2, #0
 c0075ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 c0075b2:	68fb      	ldr	r3, [r7, #12]
 c0075b4:	2221      	movs	r2, #33	; 0x21
 c0075b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 c0075ba:	f7fd fced 	bl	c004f98 <HAL_GetTick>
 c0075be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 c0075c0:	68fb      	ldr	r3, [r7, #12]
 c0075c2:	88fa      	ldrh	r2, [r7, #6]
 c0075c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 c0075c8:	68fb      	ldr	r3, [r7, #12]
 c0075ca:	88fa      	ldrh	r2, [r7, #6]
 c0075cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c0075d0:	68fb      	ldr	r3, [r7, #12]
 c0075d2:	689b      	ldr	r3, [r3, #8]
 c0075d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c0075d8:	d108      	bne.n	c0075ec <HAL_UART_Transmit+0x84>
 c0075da:	68fb      	ldr	r3, [r7, #12]
 c0075dc:	691b      	ldr	r3, [r3, #16]
 c0075de:	2b00      	cmp	r3, #0
 c0075e0:	d104      	bne.n	c0075ec <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 c0075e2:	2300      	movs	r3, #0
 c0075e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 c0075e6:	68bb      	ldr	r3, [r7, #8]
 c0075e8:	61bb      	str	r3, [r7, #24]
 c0075ea:	e003      	b.n	c0075f4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 c0075ec:	68bb      	ldr	r3, [r7, #8]
 c0075ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 c0075f0:	2300      	movs	r3, #0
 c0075f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 c0075f4:	68fb      	ldr	r3, [r7, #12]
 c0075f6:	2200      	movs	r2, #0
 c0075f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 c0075fc:	e02c      	b.n	c007658 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 c0075fe:	683b      	ldr	r3, [r7, #0]
 c007600:	9300      	str	r3, [sp, #0]
 c007602:	697b      	ldr	r3, [r7, #20]
 c007604:	2200      	movs	r2, #0
 c007606:	2180      	movs	r1, #128	; 0x80
 c007608:	68f8      	ldr	r0, [r7, #12]
 c00760a:	f000 fd02 	bl	c008012 <UART_WaitOnFlagUntilTimeout>
 c00760e:	4603      	mov	r3, r0
 c007610:	2b00      	cmp	r3, #0
 c007612:	d001      	beq.n	c007618 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 c007614:	2303      	movs	r3, #3
 c007616:	e039      	b.n	c00768c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 c007618:	69fb      	ldr	r3, [r7, #28]
 c00761a:	2b00      	cmp	r3, #0
 c00761c:	d10b      	bne.n	c007636 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 c00761e:	69bb      	ldr	r3, [r7, #24]
 c007620:	881b      	ldrh	r3, [r3, #0]
 c007622:	461a      	mov	r2, r3
 c007624:	68fb      	ldr	r3, [r7, #12]
 c007626:	681b      	ldr	r3, [r3, #0]
 c007628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 c00762c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 c00762e:	69bb      	ldr	r3, [r7, #24]
 c007630:	3302      	adds	r3, #2
 c007632:	61bb      	str	r3, [r7, #24]
 c007634:	e007      	b.n	c007646 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 c007636:	69fb      	ldr	r3, [r7, #28]
 c007638:	781a      	ldrb	r2, [r3, #0]
 c00763a:	68fb      	ldr	r3, [r7, #12]
 c00763c:	681b      	ldr	r3, [r3, #0]
 c00763e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 c007640:	69fb      	ldr	r3, [r7, #28]
 c007642:	3301      	adds	r3, #1
 c007644:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 c007646:	68fb      	ldr	r3, [r7, #12]
 c007648:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c00764c:	b29b      	uxth	r3, r3
 c00764e:	3b01      	subs	r3, #1
 c007650:	b29a      	uxth	r2, r3
 c007652:	68fb      	ldr	r3, [r7, #12]
 c007654:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 c007658:	68fb      	ldr	r3, [r7, #12]
 c00765a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c00765e:	b29b      	uxth	r3, r3
 c007660:	2b00      	cmp	r3, #0
 c007662:	d1cc      	bne.n	c0075fe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 c007664:	683b      	ldr	r3, [r7, #0]
 c007666:	9300      	str	r3, [sp, #0]
 c007668:	697b      	ldr	r3, [r7, #20]
 c00766a:	2200      	movs	r2, #0
 c00766c:	2140      	movs	r1, #64	; 0x40
 c00766e:	68f8      	ldr	r0, [r7, #12]
 c007670:	f000 fccf 	bl	c008012 <UART_WaitOnFlagUntilTimeout>
 c007674:	4603      	mov	r3, r0
 c007676:	2b00      	cmp	r3, #0
 c007678:	d001      	beq.n	c00767e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 c00767a:	2303      	movs	r3, #3
 c00767c:	e006      	b.n	c00768c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 c00767e:	68fb      	ldr	r3, [r7, #12]
 c007680:	2220      	movs	r2, #32
 c007682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 c007686:	2300      	movs	r3, #0
 c007688:	e000      	b.n	c00768c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 c00768a:	2302      	movs	r3, #2
  }
}
 c00768c:	4618      	mov	r0, r3
 c00768e:	3720      	adds	r7, #32
 c007690:	46bd      	mov	sp, r7
 c007692:	bd80      	pop	{r7, pc}

0c007694 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c007694:	b580      	push	{r7, lr}
 c007696:	b08a      	sub	sp, #40	; 0x28
 c007698:	af02      	add	r7, sp, #8
 c00769a:	60f8      	str	r0, [r7, #12]
 c00769c:	60b9      	str	r1, [r7, #8]
 c00769e:	603b      	str	r3, [r7, #0]
 c0076a0:	4613      	mov	r3, r2
 c0076a2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 c0076a4:	68fb      	ldr	r3, [r7, #12]
 c0076a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0076aa:	2b20      	cmp	r3, #32
 c0076ac:	f040 80c0 	bne.w	c007830 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 c0076b0:	68bb      	ldr	r3, [r7, #8]
 c0076b2:	2b00      	cmp	r3, #0
 c0076b4:	d002      	beq.n	c0076bc <HAL_UART_Receive+0x28>
 c0076b6:	88fb      	ldrh	r3, [r7, #6]
 c0076b8:	2b00      	cmp	r3, #0
 c0076ba:	d101      	bne.n	c0076c0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 c0076bc:	2301      	movs	r3, #1
 c0076be:	e0b8      	b.n	c007832 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 c0076c0:	68fb      	ldr	r3, [r7, #12]
 c0076c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c0076c6:	2b01      	cmp	r3, #1
 c0076c8:	d101      	bne.n	c0076ce <HAL_UART_Receive+0x3a>
 c0076ca:	2302      	movs	r3, #2
 c0076cc:	e0b1      	b.n	c007832 <HAL_UART_Receive+0x19e>
 c0076ce:	68fb      	ldr	r3, [r7, #12]
 c0076d0:	2201      	movs	r2, #1
 c0076d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c0076d6:	68fb      	ldr	r3, [r7, #12]
 c0076d8:	2200      	movs	r2, #0
 c0076da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 c0076de:	68fb      	ldr	r3, [r7, #12]
 c0076e0:	2222      	movs	r2, #34	; 0x22
 c0076e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c0076e6:	68fb      	ldr	r3, [r7, #12]
 c0076e8:	2200      	movs	r2, #0
 c0076ea:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 c0076ec:	f7fd fc54 	bl	c004f98 <HAL_GetTick>
 c0076f0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 c0076f2:	68fb      	ldr	r3, [r7, #12]
 c0076f4:	88fa      	ldrh	r2, [r7, #6]
 c0076f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 c0076fa:	68fb      	ldr	r3, [r7, #12]
 c0076fc:	88fa      	ldrh	r2, [r7, #6]
 c0076fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 c007702:	68fb      	ldr	r3, [r7, #12]
 c007704:	689b      	ldr	r3, [r3, #8]
 c007706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c00770a:	d10e      	bne.n	c00772a <HAL_UART_Receive+0x96>
 c00770c:	68fb      	ldr	r3, [r7, #12]
 c00770e:	691b      	ldr	r3, [r3, #16]
 c007710:	2b00      	cmp	r3, #0
 c007712:	d105      	bne.n	c007720 <HAL_UART_Receive+0x8c>
 c007714:	68fb      	ldr	r3, [r7, #12]
 c007716:	f240 12ff 	movw	r2, #511	; 0x1ff
 c00771a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c00771e:	e02d      	b.n	c00777c <HAL_UART_Receive+0xe8>
 c007720:	68fb      	ldr	r3, [r7, #12]
 c007722:	22ff      	movs	r2, #255	; 0xff
 c007724:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c007728:	e028      	b.n	c00777c <HAL_UART_Receive+0xe8>
 c00772a:	68fb      	ldr	r3, [r7, #12]
 c00772c:	689b      	ldr	r3, [r3, #8]
 c00772e:	2b00      	cmp	r3, #0
 c007730:	d10d      	bne.n	c00774e <HAL_UART_Receive+0xba>
 c007732:	68fb      	ldr	r3, [r7, #12]
 c007734:	691b      	ldr	r3, [r3, #16]
 c007736:	2b00      	cmp	r3, #0
 c007738:	d104      	bne.n	c007744 <HAL_UART_Receive+0xb0>
 c00773a:	68fb      	ldr	r3, [r7, #12]
 c00773c:	22ff      	movs	r2, #255	; 0xff
 c00773e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c007742:	e01b      	b.n	c00777c <HAL_UART_Receive+0xe8>
 c007744:	68fb      	ldr	r3, [r7, #12]
 c007746:	227f      	movs	r2, #127	; 0x7f
 c007748:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c00774c:	e016      	b.n	c00777c <HAL_UART_Receive+0xe8>
 c00774e:	68fb      	ldr	r3, [r7, #12]
 c007750:	689b      	ldr	r3, [r3, #8]
 c007752:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c007756:	d10d      	bne.n	c007774 <HAL_UART_Receive+0xe0>
 c007758:	68fb      	ldr	r3, [r7, #12]
 c00775a:	691b      	ldr	r3, [r3, #16]
 c00775c:	2b00      	cmp	r3, #0
 c00775e:	d104      	bne.n	c00776a <HAL_UART_Receive+0xd6>
 c007760:	68fb      	ldr	r3, [r7, #12]
 c007762:	227f      	movs	r2, #127	; 0x7f
 c007764:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c007768:	e008      	b.n	c00777c <HAL_UART_Receive+0xe8>
 c00776a:	68fb      	ldr	r3, [r7, #12]
 c00776c:	223f      	movs	r2, #63	; 0x3f
 c00776e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c007772:	e003      	b.n	c00777c <HAL_UART_Receive+0xe8>
 c007774:	68fb      	ldr	r3, [r7, #12]
 c007776:	2200      	movs	r2, #0
 c007778:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 c00777c:	68fb      	ldr	r3, [r7, #12]
 c00777e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 c007782:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c007784:	68fb      	ldr	r3, [r7, #12]
 c007786:	689b      	ldr	r3, [r3, #8]
 c007788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c00778c:	d108      	bne.n	c0077a0 <HAL_UART_Receive+0x10c>
 c00778e:	68fb      	ldr	r3, [r7, #12]
 c007790:	691b      	ldr	r3, [r3, #16]
 c007792:	2b00      	cmp	r3, #0
 c007794:	d104      	bne.n	c0077a0 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 c007796:	2300      	movs	r3, #0
 c007798:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 c00779a:	68bb      	ldr	r3, [r7, #8]
 c00779c:	61bb      	str	r3, [r7, #24]
 c00779e:	e003      	b.n	c0077a8 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 c0077a0:	68bb      	ldr	r3, [r7, #8]
 c0077a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 c0077a4:	2300      	movs	r3, #0
 c0077a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 c0077a8:	68fb      	ldr	r3, [r7, #12]
 c0077aa:	2200      	movs	r2, #0
 c0077ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 c0077b0:	e032      	b.n	c007818 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 c0077b2:	683b      	ldr	r3, [r7, #0]
 c0077b4:	9300      	str	r3, [sp, #0]
 c0077b6:	697b      	ldr	r3, [r7, #20]
 c0077b8:	2200      	movs	r2, #0
 c0077ba:	2120      	movs	r1, #32
 c0077bc:	68f8      	ldr	r0, [r7, #12]
 c0077be:	f000 fc28 	bl	c008012 <UART_WaitOnFlagUntilTimeout>
 c0077c2:	4603      	mov	r3, r0
 c0077c4:	2b00      	cmp	r3, #0
 c0077c6:	d001      	beq.n	c0077cc <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 c0077c8:	2303      	movs	r3, #3
 c0077ca:	e032      	b.n	c007832 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 c0077cc:	69fb      	ldr	r3, [r7, #28]
 c0077ce:	2b00      	cmp	r3, #0
 c0077d0:	d10c      	bne.n	c0077ec <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 c0077d2:	68fb      	ldr	r3, [r7, #12]
 c0077d4:	681b      	ldr	r3, [r3, #0]
 c0077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0077d8:	b29a      	uxth	r2, r3
 c0077da:	8a7b      	ldrh	r3, [r7, #18]
 c0077dc:	4013      	ands	r3, r2
 c0077de:	b29a      	uxth	r2, r3
 c0077e0:	69bb      	ldr	r3, [r7, #24]
 c0077e2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 c0077e4:	69bb      	ldr	r3, [r7, #24]
 c0077e6:	3302      	adds	r3, #2
 c0077e8:	61bb      	str	r3, [r7, #24]
 c0077ea:	e00c      	b.n	c007806 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 c0077ec:	68fb      	ldr	r3, [r7, #12]
 c0077ee:	681b      	ldr	r3, [r3, #0]
 c0077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0077f2:	b2da      	uxtb	r2, r3
 c0077f4:	8a7b      	ldrh	r3, [r7, #18]
 c0077f6:	b2db      	uxtb	r3, r3
 c0077f8:	4013      	ands	r3, r2
 c0077fa:	b2da      	uxtb	r2, r3
 c0077fc:	69fb      	ldr	r3, [r7, #28]
 c0077fe:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 c007800:	69fb      	ldr	r3, [r7, #28]
 c007802:	3301      	adds	r3, #1
 c007804:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 c007806:	68fb      	ldr	r3, [r7, #12]
 c007808:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 c00780c:	b29b      	uxth	r3, r3
 c00780e:	3b01      	subs	r3, #1
 c007810:	b29a      	uxth	r2, r3
 c007812:	68fb      	ldr	r3, [r7, #12]
 c007814:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 c007818:	68fb      	ldr	r3, [r7, #12]
 c00781a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 c00781e:	b29b      	uxth	r3, r3
 c007820:	2b00      	cmp	r3, #0
 c007822:	d1c6      	bne.n	c0077b2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 c007824:	68fb      	ldr	r3, [r7, #12]
 c007826:	2220      	movs	r2, #32
 c007828:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 c00782c:	2300      	movs	r3, #0
 c00782e:	e000      	b.n	c007832 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 c007830:	2302      	movs	r3, #2
  }
}
 c007832:	4618      	mov	r0, r3
 c007834:	3720      	adds	r7, #32
 c007836:	46bd      	mov	sp, r7
 c007838:	bd80      	pop	{r7, pc}
	...

0c00783c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 c00783c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c007840:	b08c      	sub	sp, #48	; 0x30
 c007842:	af00      	add	r7, sp, #0
 c007844:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 c007846:	2300      	movs	r3, #0
 c007848:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c00784c:	697b      	ldr	r3, [r7, #20]
 c00784e:	689a      	ldr	r2, [r3, #8]
 c007850:	697b      	ldr	r3, [r7, #20]
 c007852:	691b      	ldr	r3, [r3, #16]
 c007854:	431a      	orrs	r2, r3
 c007856:	697b      	ldr	r3, [r7, #20]
 c007858:	695b      	ldr	r3, [r3, #20]
 c00785a:	431a      	orrs	r2, r3
 c00785c:	697b      	ldr	r3, [r7, #20]
 c00785e:	69db      	ldr	r3, [r3, #28]
 c007860:	4313      	orrs	r3, r2
 c007862:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c007864:	697b      	ldr	r3, [r7, #20]
 c007866:	681b      	ldr	r3, [r3, #0]
 c007868:	681a      	ldr	r2, [r3, #0]
 c00786a:	4baa      	ldr	r3, [pc, #680]	; (c007b14 <UART_SetConfig+0x2d8>)
 c00786c:	4013      	ands	r3, r2
 c00786e:	697a      	ldr	r2, [r7, #20]
 c007870:	6812      	ldr	r2, [r2, #0]
 c007872:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c007874:	430b      	orrs	r3, r1
 c007876:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c007878:	697b      	ldr	r3, [r7, #20]
 c00787a:	681b      	ldr	r3, [r3, #0]
 c00787c:	685b      	ldr	r3, [r3, #4]
 c00787e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 c007882:	697b      	ldr	r3, [r7, #20]
 c007884:	68da      	ldr	r2, [r3, #12]
 c007886:	697b      	ldr	r3, [r7, #20]
 c007888:	681b      	ldr	r3, [r3, #0]
 c00788a:	430a      	orrs	r2, r1
 c00788c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 c00788e:	697b      	ldr	r3, [r7, #20]
 c007890:	699b      	ldr	r3, [r3, #24]
 c007892:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c007894:	697b      	ldr	r3, [r7, #20]
 c007896:	681b      	ldr	r3, [r3, #0]
 c007898:	4a9f      	ldr	r2, [pc, #636]	; (c007b18 <UART_SetConfig+0x2dc>)
 c00789a:	4293      	cmp	r3, r2
 c00789c:	d004      	beq.n	c0078a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 c00789e:	697b      	ldr	r3, [r7, #20]
 c0078a0:	6a1b      	ldr	r3, [r3, #32]
 c0078a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c0078a4:	4313      	orrs	r3, r2
 c0078a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c0078a8:	697b      	ldr	r3, [r7, #20]
 c0078aa:	681b      	ldr	r3, [r3, #0]
 c0078ac:	689b      	ldr	r3, [r3, #8]
 c0078ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 c0078b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 c0078b6:	697a      	ldr	r2, [r7, #20]
 c0078b8:	6812      	ldr	r2, [r2, #0]
 c0078ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c0078bc:	430b      	orrs	r3, r1
 c0078be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c0078c0:	697b      	ldr	r3, [r7, #20]
 c0078c2:	681b      	ldr	r3, [r3, #0]
 c0078c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0078c6:	f023 010f 	bic.w	r1, r3, #15
 c0078ca:	697b      	ldr	r3, [r7, #20]
 c0078cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c0078ce:	697b      	ldr	r3, [r7, #20]
 c0078d0:	681b      	ldr	r3, [r3, #0]
 c0078d2:	430a      	orrs	r2, r1
 c0078d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 c0078d6:	697b      	ldr	r3, [r7, #20]
 c0078d8:	681b      	ldr	r3, [r3, #0]
 c0078da:	4a90      	ldr	r2, [pc, #576]	; (c007b1c <UART_SetConfig+0x2e0>)
 c0078dc:	4293      	cmp	r3, r2
 c0078de:	d125      	bne.n	c00792c <UART_SetConfig+0xf0>
 c0078e0:	4b8f      	ldr	r3, [pc, #572]	; (c007b20 <UART_SetConfig+0x2e4>)
 c0078e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0078e6:	f003 0303 	and.w	r3, r3, #3
 c0078ea:	2b03      	cmp	r3, #3
 c0078ec:	d81a      	bhi.n	c007924 <UART_SetConfig+0xe8>
 c0078ee:	a201      	add	r2, pc, #4	; (adr r2, c0078f4 <UART_SetConfig+0xb8>)
 c0078f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0078f4:	0c007905 	.word	0x0c007905
 c0078f8:	0c007915 	.word	0x0c007915
 c0078fc:	0c00790d 	.word	0x0c00790d
 c007900:	0c00791d 	.word	0x0c00791d
 c007904:	2301      	movs	r3, #1
 c007906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00790a:	e114      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c00790c:	2302      	movs	r3, #2
 c00790e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007912:	e110      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c007914:	2304      	movs	r3, #4
 c007916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00791a:	e10c      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c00791c:	2308      	movs	r3, #8
 c00791e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007922:	e108      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c007924:	2310      	movs	r3, #16
 c007926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00792a:	e104      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c00792c:	697b      	ldr	r3, [r7, #20]
 c00792e:	681b      	ldr	r3, [r3, #0]
 c007930:	4a7c      	ldr	r2, [pc, #496]	; (c007b24 <UART_SetConfig+0x2e8>)
 c007932:	4293      	cmp	r3, r2
 c007934:	d138      	bne.n	c0079a8 <UART_SetConfig+0x16c>
 c007936:	4b7a      	ldr	r3, [pc, #488]	; (c007b20 <UART_SetConfig+0x2e4>)
 c007938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00793c:	f003 030c 	and.w	r3, r3, #12
 c007940:	2b0c      	cmp	r3, #12
 c007942:	d82d      	bhi.n	c0079a0 <UART_SetConfig+0x164>
 c007944:	a201      	add	r2, pc, #4	; (adr r2, c00794c <UART_SetConfig+0x110>)
 c007946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00794a:	bf00      	nop
 c00794c:	0c007981 	.word	0x0c007981
 c007950:	0c0079a1 	.word	0x0c0079a1
 c007954:	0c0079a1 	.word	0x0c0079a1
 c007958:	0c0079a1 	.word	0x0c0079a1
 c00795c:	0c007991 	.word	0x0c007991
 c007960:	0c0079a1 	.word	0x0c0079a1
 c007964:	0c0079a1 	.word	0x0c0079a1
 c007968:	0c0079a1 	.word	0x0c0079a1
 c00796c:	0c007989 	.word	0x0c007989
 c007970:	0c0079a1 	.word	0x0c0079a1
 c007974:	0c0079a1 	.word	0x0c0079a1
 c007978:	0c0079a1 	.word	0x0c0079a1
 c00797c:	0c007999 	.word	0x0c007999
 c007980:	2300      	movs	r3, #0
 c007982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007986:	e0d6      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c007988:	2302      	movs	r3, #2
 c00798a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00798e:	e0d2      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c007990:	2304      	movs	r3, #4
 c007992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007996:	e0ce      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c007998:	2308      	movs	r3, #8
 c00799a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00799e:	e0ca      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c0079a0:	2310      	movs	r3, #16
 c0079a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0079a6:	e0c6      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c0079a8:	697b      	ldr	r3, [r7, #20]
 c0079aa:	681b      	ldr	r3, [r3, #0]
 c0079ac:	4a5e      	ldr	r2, [pc, #376]	; (c007b28 <UART_SetConfig+0x2ec>)
 c0079ae:	4293      	cmp	r3, r2
 c0079b0:	d125      	bne.n	c0079fe <UART_SetConfig+0x1c2>
 c0079b2:	4b5b      	ldr	r3, [pc, #364]	; (c007b20 <UART_SetConfig+0x2e4>)
 c0079b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0079b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 c0079bc:	2b30      	cmp	r3, #48	; 0x30
 c0079be:	d016      	beq.n	c0079ee <UART_SetConfig+0x1b2>
 c0079c0:	2b30      	cmp	r3, #48	; 0x30
 c0079c2:	d818      	bhi.n	c0079f6 <UART_SetConfig+0x1ba>
 c0079c4:	2b20      	cmp	r3, #32
 c0079c6:	d00a      	beq.n	c0079de <UART_SetConfig+0x1a2>
 c0079c8:	2b20      	cmp	r3, #32
 c0079ca:	d814      	bhi.n	c0079f6 <UART_SetConfig+0x1ba>
 c0079cc:	2b00      	cmp	r3, #0
 c0079ce:	d002      	beq.n	c0079d6 <UART_SetConfig+0x19a>
 c0079d0:	2b10      	cmp	r3, #16
 c0079d2:	d008      	beq.n	c0079e6 <UART_SetConfig+0x1aa>
 c0079d4:	e00f      	b.n	c0079f6 <UART_SetConfig+0x1ba>
 c0079d6:	2300      	movs	r3, #0
 c0079d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0079dc:	e0ab      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c0079de:	2302      	movs	r3, #2
 c0079e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0079e4:	e0a7      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c0079e6:	2304      	movs	r3, #4
 c0079e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0079ec:	e0a3      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c0079ee:	2308      	movs	r3, #8
 c0079f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0079f4:	e09f      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c0079f6:	2310      	movs	r3, #16
 c0079f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0079fc:	e09b      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c0079fe:	697b      	ldr	r3, [r7, #20]
 c007a00:	681b      	ldr	r3, [r3, #0]
 c007a02:	4a4a      	ldr	r2, [pc, #296]	; (c007b2c <UART_SetConfig+0x2f0>)
 c007a04:	4293      	cmp	r3, r2
 c007a06:	d125      	bne.n	c007a54 <UART_SetConfig+0x218>
 c007a08:	4b45      	ldr	r3, [pc, #276]	; (c007b20 <UART_SetConfig+0x2e4>)
 c007a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007a0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 c007a12:	2bc0      	cmp	r3, #192	; 0xc0
 c007a14:	d016      	beq.n	c007a44 <UART_SetConfig+0x208>
 c007a16:	2bc0      	cmp	r3, #192	; 0xc0
 c007a18:	d818      	bhi.n	c007a4c <UART_SetConfig+0x210>
 c007a1a:	2b80      	cmp	r3, #128	; 0x80
 c007a1c:	d00a      	beq.n	c007a34 <UART_SetConfig+0x1f8>
 c007a1e:	2b80      	cmp	r3, #128	; 0x80
 c007a20:	d814      	bhi.n	c007a4c <UART_SetConfig+0x210>
 c007a22:	2b00      	cmp	r3, #0
 c007a24:	d002      	beq.n	c007a2c <UART_SetConfig+0x1f0>
 c007a26:	2b40      	cmp	r3, #64	; 0x40
 c007a28:	d008      	beq.n	c007a3c <UART_SetConfig+0x200>
 c007a2a:	e00f      	b.n	c007a4c <UART_SetConfig+0x210>
 c007a2c:	2300      	movs	r3, #0
 c007a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007a32:	e080      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c007a34:	2302      	movs	r3, #2
 c007a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007a3a:	e07c      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c007a3c:	2304      	movs	r3, #4
 c007a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007a42:	e078      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c007a44:	2308      	movs	r3, #8
 c007a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007a4a:	e074      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c007a4c:	2310      	movs	r3, #16
 c007a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007a52:	e070      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c007a54:	697b      	ldr	r3, [r7, #20]
 c007a56:	681b      	ldr	r3, [r3, #0]
 c007a58:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 c007a5c:	d12a      	bne.n	c007ab4 <UART_SetConfig+0x278>
 c007a5e:	4b30      	ldr	r3, [pc, #192]	; (c007b20 <UART_SetConfig+0x2e4>)
 c007a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c007a68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c007a6c:	d01a      	beq.n	c007aa4 <UART_SetConfig+0x268>
 c007a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c007a72:	d81b      	bhi.n	c007aac <UART_SetConfig+0x270>
 c007a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c007a78:	d00c      	beq.n	c007a94 <UART_SetConfig+0x258>
 c007a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c007a7e:	d815      	bhi.n	c007aac <UART_SetConfig+0x270>
 c007a80:	2b00      	cmp	r3, #0
 c007a82:	d003      	beq.n	c007a8c <UART_SetConfig+0x250>
 c007a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c007a88:	d008      	beq.n	c007a9c <UART_SetConfig+0x260>
 c007a8a:	e00f      	b.n	c007aac <UART_SetConfig+0x270>
 c007a8c:	2300      	movs	r3, #0
 c007a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007a92:	e050      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c007a94:	2302      	movs	r3, #2
 c007a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007a9a:	e04c      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c007a9c:	2304      	movs	r3, #4
 c007a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007aa2:	e048      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c007aa4:	2308      	movs	r3, #8
 c007aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007aaa:	e044      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c007aac:	2310      	movs	r3, #16
 c007aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007ab2:	e040      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c007ab4:	697b      	ldr	r3, [r7, #20]
 c007ab6:	681b      	ldr	r3, [r3, #0]
 c007ab8:	4a17      	ldr	r2, [pc, #92]	; (c007b18 <UART_SetConfig+0x2dc>)
 c007aba:	4293      	cmp	r3, r2
 c007abc:	d138      	bne.n	c007b30 <UART_SetConfig+0x2f4>
 c007abe:	4b18      	ldr	r3, [pc, #96]	; (c007b20 <UART_SetConfig+0x2e4>)
 c007ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007ac4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 c007ac8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c007acc:	d01a      	beq.n	c007b04 <UART_SetConfig+0x2c8>
 c007ace:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c007ad2:	d81b      	bhi.n	c007b0c <UART_SetConfig+0x2d0>
 c007ad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c007ad8:	d00c      	beq.n	c007af4 <UART_SetConfig+0x2b8>
 c007ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c007ade:	d815      	bhi.n	c007b0c <UART_SetConfig+0x2d0>
 c007ae0:	2b00      	cmp	r3, #0
 c007ae2:	d003      	beq.n	c007aec <UART_SetConfig+0x2b0>
 c007ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c007ae8:	d008      	beq.n	c007afc <UART_SetConfig+0x2c0>
 c007aea:	e00f      	b.n	c007b0c <UART_SetConfig+0x2d0>
 c007aec:	2300      	movs	r3, #0
 c007aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007af2:	e020      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c007af4:	2302      	movs	r3, #2
 c007af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007afa:	e01c      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c007afc:	2304      	movs	r3, #4
 c007afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007b02:	e018      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c007b04:	2308      	movs	r3, #8
 c007b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007b0a:	e014      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c007b0c:	2310      	movs	r3, #16
 c007b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007b12:	e010      	b.n	c007b36 <UART_SetConfig+0x2fa>
 c007b14:	cfff69f3 	.word	0xcfff69f3
 c007b18:	50008000 	.word	0x50008000
 c007b1c:	50013800 	.word	0x50013800
 c007b20:	50021000 	.word	0x50021000
 c007b24:	50004400 	.word	0x50004400
 c007b28:	50004800 	.word	0x50004800
 c007b2c:	50004c00 	.word	0x50004c00
 c007b30:	2310      	movs	r3, #16
 c007b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 c007b36:	697b      	ldr	r3, [r7, #20]
 c007b38:	681b      	ldr	r3, [r3, #0]
 c007b3a:	4ab0      	ldr	r2, [pc, #704]	; (c007dfc <UART_SetConfig+0x5c0>)
 c007b3c:	4293      	cmp	r3, r2
 c007b3e:	f040 809b 	bne.w	c007c78 <UART_SetConfig+0x43c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 c007b42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c007b46:	2b08      	cmp	r3, #8
 c007b48:	d827      	bhi.n	c007b9a <UART_SetConfig+0x35e>
 c007b4a:	a201      	add	r2, pc, #4	; (adr r2, c007b50 <UART_SetConfig+0x314>)
 c007b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c007b50:	0c007b75 	.word	0x0c007b75
 c007b54:	0c007b7d 	.word	0x0c007b7d
 c007b58:	0c007b85 	.word	0x0c007b85
 c007b5c:	0c007b9b 	.word	0x0c007b9b
 c007b60:	0c007b8b 	.word	0x0c007b8b
 c007b64:	0c007b9b 	.word	0x0c007b9b
 c007b68:	0c007b9b 	.word	0x0c007b9b
 c007b6c:	0c007b9b 	.word	0x0c007b9b
 c007b70:	0c007b93 	.word	0x0c007b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c007b74:	f7fe fe8e 	bl	c006894 <HAL_RCC_GetPCLK1Freq>
 c007b78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c007b7a:	e014      	b.n	c007ba6 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c007b7c:	f7fe fe9e 	bl	c0068bc <HAL_RCC_GetPCLK2Freq>
 c007b80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c007b82:	e010      	b.n	c007ba6 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c007b84:	4b9e      	ldr	r3, [pc, #632]	; (c007e00 <UART_SetConfig+0x5c4>)
 c007b86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c007b88:	e00d      	b.n	c007ba6 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c007b8a:	f7fe fdd3 	bl	c006734 <HAL_RCC_GetSysClockFreq>
 c007b8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c007b90:	e009      	b.n	c007ba6 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c007b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c007b96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c007b98:	e005      	b.n	c007ba6 <UART_SetConfig+0x36a>
      default:
        pclk = 0U;
 c007b9a:	2300      	movs	r3, #0
 c007b9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c007b9e:	2301      	movs	r3, #1
 c007ba0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c007ba4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 c007ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c007ba8:	2b00      	cmp	r3, #0
 c007baa:	f000 8130 	beq.w	c007e0e <UART_SetConfig+0x5d2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c007bae:	697b      	ldr	r3, [r7, #20]
 c007bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c007bb2:	4a94      	ldr	r2, [pc, #592]	; (c007e04 <UART_SetConfig+0x5c8>)
 c007bb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c007bb8:	461a      	mov	r2, r3
 c007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c007bbc:	fbb3 f3f2 	udiv	r3, r3, r2
 c007bc0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
//      volatile uint32_t value1 = 3U * huart->Init.BaudRate;
//      volatile uint32_t value2 = 4096U * huart->Init.BaudRate;
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c007bc2:	697b      	ldr	r3, [r7, #20]
 c007bc4:	685a      	ldr	r2, [r3, #4]
 c007bc6:	4613      	mov	r3, r2
 c007bc8:	005b      	lsls	r3, r3, #1
 c007bca:	4413      	add	r3, r2
 c007bcc:	69ba      	ldr	r2, [r7, #24]
 c007bce:	429a      	cmp	r2, r3
 c007bd0:	d305      	bcc.n	c007bde <UART_SetConfig+0x3a2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 c007bd2:	697b      	ldr	r3, [r7, #20]
 c007bd4:	685b      	ldr	r3, [r3, #4]
 c007bd6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c007bd8:	69ba      	ldr	r2, [r7, #24]
 c007bda:	429a      	cmp	r2, r3
 c007bdc:	d903      	bls.n	c007be6 <UART_SetConfig+0x3aa>
      {
        ret = HAL_ERROR;
 c007bde:	2301      	movs	r3, #1
 c007be0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c007be4:	e113      	b.n	c007e0e <UART_SetConfig+0x5d2>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c007be8:	2200      	movs	r2, #0
 c007bea:	60bb      	str	r3, [r7, #8]
 c007bec:	60fa      	str	r2, [r7, #12]
 c007bee:	697b      	ldr	r3, [r7, #20]
 c007bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c007bf2:	4a84      	ldr	r2, [pc, #528]	; (c007e04 <UART_SetConfig+0x5c8>)
 c007bf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c007bf8:	b29b      	uxth	r3, r3
 c007bfa:	2200      	movs	r2, #0
 c007bfc:	603b      	str	r3, [r7, #0]
 c007bfe:	607a      	str	r2, [r7, #4]
 c007c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 c007c04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 c007c08:	f7f8 fb52 	bl	c0002b0 <__aeabi_uldivmod>
 c007c0c:	4602      	mov	r2, r0
 c007c0e:	460b      	mov	r3, r1
 c007c10:	4610      	mov	r0, r2
 c007c12:	4619      	mov	r1, r3
 c007c14:	f04f 0200 	mov.w	r2, #0
 c007c18:	f04f 0300 	mov.w	r3, #0
 c007c1c:	020b      	lsls	r3, r1, #8
 c007c1e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 c007c22:	0202      	lsls	r2, r0, #8
 c007c24:	6979      	ldr	r1, [r7, #20]
 c007c26:	6849      	ldr	r1, [r1, #4]
 c007c28:	0849      	lsrs	r1, r1, #1
 c007c2a:	2000      	movs	r0, #0
 c007c2c:	460c      	mov	r4, r1
 c007c2e:	4605      	mov	r5, r0
 c007c30:	eb12 0804 	adds.w	r8, r2, r4
 c007c34:	eb43 0905 	adc.w	r9, r3, r5
 c007c38:	697b      	ldr	r3, [r7, #20]
 c007c3a:	685b      	ldr	r3, [r3, #4]
 c007c3c:	2200      	movs	r2, #0
 c007c3e:	469a      	mov	sl, r3
 c007c40:	4693      	mov	fp, r2
 c007c42:	4652      	mov	r2, sl
 c007c44:	465b      	mov	r3, fp
 c007c46:	4640      	mov	r0, r8
 c007c48:	4649      	mov	r1, r9
 c007c4a:	f7f8 fb31 	bl	c0002b0 <__aeabi_uldivmod>
 c007c4e:	4602      	mov	r2, r0
 c007c50:	460b      	mov	r3, r1
 c007c52:	4613      	mov	r3, r2
 c007c54:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 c007c56:	6a3b      	ldr	r3, [r7, #32]
 c007c58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c007c5c:	d308      	bcc.n	c007c70 <UART_SetConfig+0x434>
 c007c5e:	6a3b      	ldr	r3, [r7, #32]
 c007c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c007c64:	d204      	bcs.n	c007c70 <UART_SetConfig+0x434>
        {
          huart->Instance->BRR = usartdiv;
 c007c66:	697b      	ldr	r3, [r7, #20]
 c007c68:	681b      	ldr	r3, [r3, #0]
 c007c6a:	6a3a      	ldr	r2, [r7, #32]
 c007c6c:	60da      	str	r2, [r3, #12]
 c007c6e:	e0ce      	b.n	c007e0e <UART_SetConfig+0x5d2>
        }
        else
        {
          ret = HAL_ERROR;
 c007c70:	2301      	movs	r3, #1
 c007c72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c007c76:	e0ca      	b.n	c007e0e <UART_SetConfig+0x5d2>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c007c78:	697b      	ldr	r3, [r7, #20]
 c007c7a:	69db      	ldr	r3, [r3, #28]
 c007c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c007c80:	d167      	bne.n	c007d52 <UART_SetConfig+0x516>
  {
    switch (clocksource)
 c007c82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c007c86:	2b08      	cmp	r3, #8
 c007c88:	d827      	bhi.n	c007cda <UART_SetConfig+0x49e>
 c007c8a:	a201      	add	r2, pc, #4	; (adr r2, c007c90 <UART_SetConfig+0x454>)
 c007c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c007c90:	0c007cb5 	.word	0x0c007cb5
 c007c94:	0c007cbd 	.word	0x0c007cbd
 c007c98:	0c007cc5 	.word	0x0c007cc5
 c007c9c:	0c007cdb 	.word	0x0c007cdb
 c007ca0:	0c007ccb 	.word	0x0c007ccb
 c007ca4:	0c007cdb 	.word	0x0c007cdb
 c007ca8:	0c007cdb 	.word	0x0c007cdb
 c007cac:	0c007cdb 	.word	0x0c007cdb
 c007cb0:	0c007cd3 	.word	0x0c007cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c007cb4:	f7fe fdee 	bl	c006894 <HAL_RCC_GetPCLK1Freq>
 c007cb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c007cba:	e014      	b.n	c007ce6 <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c007cbc:	f7fe fdfe 	bl	c0068bc <HAL_RCC_GetPCLK2Freq>
 c007cc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c007cc2:	e010      	b.n	c007ce6 <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c007cc4:	4b4e      	ldr	r3, [pc, #312]	; (c007e00 <UART_SetConfig+0x5c4>)
 c007cc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c007cc8:	e00d      	b.n	c007ce6 <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c007cca:	f7fe fd33 	bl	c006734 <HAL_RCC_GetSysClockFreq>
 c007cce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c007cd0:	e009      	b.n	c007ce6 <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c007cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c007cd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c007cd8:	e005      	b.n	c007ce6 <UART_SetConfig+0x4aa>
      default:
        pclk = 0U;
 c007cda:	2300      	movs	r3, #0
 c007cdc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c007cde:	2301      	movs	r3, #1
 c007ce0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c007ce4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 c007ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c007ce8:	2b00      	cmp	r3, #0
 c007cea:	f000 8090 	beq.w	c007e0e <UART_SetConfig+0x5d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c007cee:	697b      	ldr	r3, [r7, #20]
 c007cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c007cf2:	4a44      	ldr	r2, [pc, #272]	; (c007e04 <UART_SetConfig+0x5c8>)
 c007cf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c007cf8:	461a      	mov	r2, r3
 c007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c007cfc:	fbb3 f3f2 	udiv	r3, r3, r2
 c007d00:	005a      	lsls	r2, r3, #1
 c007d02:	697b      	ldr	r3, [r7, #20]
 c007d04:	685b      	ldr	r3, [r3, #4]
 c007d06:	085b      	lsrs	r3, r3, #1
 c007d08:	441a      	add	r2, r3
 c007d0a:	697b      	ldr	r3, [r7, #20]
 c007d0c:	685b      	ldr	r3, [r3, #4]
 c007d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 c007d12:	b29b      	uxth	r3, r3
 c007d14:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c007d16:	6a3b      	ldr	r3, [r7, #32]
 c007d18:	2b0f      	cmp	r3, #15
 c007d1a:	d916      	bls.n	c007d4a <UART_SetConfig+0x50e>
 c007d1c:	6a3b      	ldr	r3, [r7, #32]
 c007d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c007d22:	d212      	bcs.n	c007d4a <UART_SetConfig+0x50e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c007d24:	6a3b      	ldr	r3, [r7, #32]
 c007d26:	b29b      	uxth	r3, r3
 c007d28:	f023 030f 	bic.w	r3, r3, #15
 c007d2c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 c007d2e:	6a3b      	ldr	r3, [r7, #32]
 c007d30:	085b      	lsrs	r3, r3, #1
 c007d32:	b29b      	uxth	r3, r3
 c007d34:	f003 0307 	and.w	r3, r3, #7
 c007d38:	b29a      	uxth	r2, r3
 c007d3a:	8bfb      	ldrh	r3, [r7, #30]
 c007d3c:	4313      	orrs	r3, r2
 c007d3e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 c007d40:	697b      	ldr	r3, [r7, #20]
 c007d42:	681b      	ldr	r3, [r3, #0]
 c007d44:	8bfa      	ldrh	r2, [r7, #30]
 c007d46:	60da      	str	r2, [r3, #12]
 c007d48:	e061      	b.n	c007e0e <UART_SetConfig+0x5d2>
      }
      else
      {
        ret = HAL_ERROR;
 c007d4a:	2301      	movs	r3, #1
 c007d4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c007d50:	e05d      	b.n	c007e0e <UART_SetConfig+0x5d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 c007d52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c007d56:	2b08      	cmp	r3, #8
 c007d58:	d827      	bhi.n	c007daa <UART_SetConfig+0x56e>
 c007d5a:	a201      	add	r2, pc, #4	; (adr r2, c007d60 <UART_SetConfig+0x524>)
 c007d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c007d60:	0c007d85 	.word	0x0c007d85
 c007d64:	0c007d8d 	.word	0x0c007d8d
 c007d68:	0c007d95 	.word	0x0c007d95
 c007d6c:	0c007dab 	.word	0x0c007dab
 c007d70:	0c007d9b 	.word	0x0c007d9b
 c007d74:	0c007dab 	.word	0x0c007dab
 c007d78:	0c007dab 	.word	0x0c007dab
 c007d7c:	0c007dab 	.word	0x0c007dab
 c007d80:	0c007da3 	.word	0x0c007da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c007d84:	f7fe fd86 	bl	c006894 <HAL_RCC_GetPCLK1Freq>
 c007d88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c007d8a:	e014      	b.n	c007db6 <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c007d8c:	f7fe fd96 	bl	c0068bc <HAL_RCC_GetPCLK2Freq>
 c007d90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c007d92:	e010      	b.n	c007db6 <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c007d94:	4b1a      	ldr	r3, [pc, #104]	; (c007e00 <UART_SetConfig+0x5c4>)
 c007d96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c007d98:	e00d      	b.n	c007db6 <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c007d9a:	f7fe fccb 	bl	c006734 <HAL_RCC_GetSysClockFreq>
 c007d9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c007da0:	e009      	b.n	c007db6 <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c007da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c007da6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c007da8:	e005      	b.n	c007db6 <UART_SetConfig+0x57a>
      default:
        pclk = 0U;
 c007daa:	2300      	movs	r3, #0
 c007dac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c007dae:	2301      	movs	r3, #1
 c007db0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c007db4:	bf00      	nop
    }

    if (pclk != 0U)
 c007db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c007db8:	2b00      	cmp	r3, #0
 c007dba:	d028      	beq.n	c007e0e <UART_SetConfig+0x5d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c007dbc:	697b      	ldr	r3, [r7, #20]
 c007dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c007dc0:	4a10      	ldr	r2, [pc, #64]	; (c007e04 <UART_SetConfig+0x5c8>)
 c007dc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c007dc6:	461a      	mov	r2, r3
 c007dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c007dca:	fbb3 f2f2 	udiv	r2, r3, r2
 c007dce:	697b      	ldr	r3, [r7, #20]
 c007dd0:	685b      	ldr	r3, [r3, #4]
 c007dd2:	085b      	lsrs	r3, r3, #1
 c007dd4:	441a      	add	r2, r3
 c007dd6:	697b      	ldr	r3, [r7, #20]
 c007dd8:	685b      	ldr	r3, [r3, #4]
 c007dda:	fbb2 f3f3 	udiv	r3, r2, r3
 c007dde:	b29b      	uxth	r3, r3
 c007de0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c007de2:	6a3b      	ldr	r3, [r7, #32]
 c007de4:	2b0f      	cmp	r3, #15
 c007de6:	d90f      	bls.n	c007e08 <UART_SetConfig+0x5cc>
 c007de8:	6a3b      	ldr	r3, [r7, #32]
 c007dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c007dee:	d20b      	bcs.n	c007e08 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = usartdiv;
 c007df0:	697b      	ldr	r3, [r7, #20]
 c007df2:	681b      	ldr	r3, [r3, #0]
 c007df4:	6a3a      	ldr	r2, [r7, #32]
 c007df6:	60da      	str	r2, [r3, #12]
 c007df8:	e009      	b.n	c007e0e <UART_SetConfig+0x5d2>
 c007dfa:	bf00      	nop
 c007dfc:	50008000 	.word	0x50008000
 c007e00:	00f42400 	.word	0x00f42400
 c007e04:	0c009578 	.word	0x0c009578
      }
      else
      {
        ret = HAL_ERROR;
 c007e08:	2301      	movs	r3, #1
 c007e0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 c007e0e:	697b      	ldr	r3, [r7, #20]
 c007e10:	2201      	movs	r2, #1
 c007e12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 c007e16:	697b      	ldr	r3, [r7, #20]
 c007e18:	2201      	movs	r2, #1
 c007e1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 c007e1e:	697b      	ldr	r3, [r7, #20]
 c007e20:	2200      	movs	r2, #0
 c007e22:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 c007e24:	697b      	ldr	r3, [r7, #20]
 c007e26:	2200      	movs	r2, #0
 c007e28:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 c007e2a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 c007e2e:	4618      	mov	r0, r3
 c007e30:	3730      	adds	r7, #48	; 0x30
 c007e32:	46bd      	mov	sp, r7
 c007e34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0c007e38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 c007e38:	b480      	push	{r7}
 c007e3a:	b083      	sub	sp, #12
 c007e3c:	af00      	add	r7, sp, #0
 c007e3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c007e40:	687b      	ldr	r3, [r7, #4]
 c007e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c007e44:	f003 0301 	and.w	r3, r3, #1
 c007e48:	2b00      	cmp	r3, #0
 c007e4a:	d00a      	beq.n	c007e62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 c007e4c:	687b      	ldr	r3, [r7, #4]
 c007e4e:	681b      	ldr	r3, [r3, #0]
 c007e50:	685b      	ldr	r3, [r3, #4]
 c007e52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 c007e56:	687b      	ldr	r3, [r7, #4]
 c007e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c007e5a:	687b      	ldr	r3, [r7, #4]
 c007e5c:	681b      	ldr	r3, [r3, #0]
 c007e5e:	430a      	orrs	r2, r1
 c007e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 c007e62:	687b      	ldr	r3, [r7, #4]
 c007e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c007e66:	f003 0302 	and.w	r3, r3, #2
 c007e6a:	2b00      	cmp	r3, #0
 c007e6c:	d00a      	beq.n	c007e84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 c007e6e:	687b      	ldr	r3, [r7, #4]
 c007e70:	681b      	ldr	r3, [r3, #0]
 c007e72:	685b      	ldr	r3, [r3, #4]
 c007e74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 c007e78:	687b      	ldr	r3, [r7, #4]
 c007e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 c007e7c:	687b      	ldr	r3, [r7, #4]
 c007e7e:	681b      	ldr	r3, [r3, #0]
 c007e80:	430a      	orrs	r2, r1
 c007e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 c007e84:	687b      	ldr	r3, [r7, #4]
 c007e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c007e88:	f003 0304 	and.w	r3, r3, #4
 c007e8c:	2b00      	cmp	r3, #0
 c007e8e:	d00a      	beq.n	c007ea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 c007e90:	687b      	ldr	r3, [r7, #4]
 c007e92:	681b      	ldr	r3, [r3, #0]
 c007e94:	685b      	ldr	r3, [r3, #4]
 c007e96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 c007e9a:	687b      	ldr	r3, [r7, #4]
 c007e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c007e9e:	687b      	ldr	r3, [r7, #4]
 c007ea0:	681b      	ldr	r3, [r3, #0]
 c007ea2:	430a      	orrs	r2, r1
 c007ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 c007ea6:	687b      	ldr	r3, [r7, #4]
 c007ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c007eaa:	f003 0308 	and.w	r3, r3, #8
 c007eae:	2b00      	cmp	r3, #0
 c007eb0:	d00a      	beq.n	c007ec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 c007eb2:	687b      	ldr	r3, [r7, #4]
 c007eb4:	681b      	ldr	r3, [r3, #0]
 c007eb6:	685b      	ldr	r3, [r3, #4]
 c007eb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 c007ebc:	687b      	ldr	r3, [r7, #4]
 c007ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 c007ec0:	687b      	ldr	r3, [r7, #4]
 c007ec2:	681b      	ldr	r3, [r3, #0]
 c007ec4:	430a      	orrs	r2, r1
 c007ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 c007ec8:	687b      	ldr	r3, [r7, #4]
 c007eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c007ecc:	f003 0310 	and.w	r3, r3, #16
 c007ed0:	2b00      	cmp	r3, #0
 c007ed2:	d00a      	beq.n	c007eea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 c007ed4:	687b      	ldr	r3, [r7, #4]
 c007ed6:	681b      	ldr	r3, [r3, #0]
 c007ed8:	689b      	ldr	r3, [r3, #8]
 c007eda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 c007ede:	687b      	ldr	r3, [r7, #4]
 c007ee0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 c007ee2:	687b      	ldr	r3, [r7, #4]
 c007ee4:	681b      	ldr	r3, [r3, #0]
 c007ee6:	430a      	orrs	r2, r1
 c007ee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 c007eea:	687b      	ldr	r3, [r7, #4]
 c007eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c007eee:	f003 0320 	and.w	r3, r3, #32
 c007ef2:	2b00      	cmp	r3, #0
 c007ef4:	d00a      	beq.n	c007f0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 c007ef6:	687b      	ldr	r3, [r7, #4]
 c007ef8:	681b      	ldr	r3, [r3, #0]
 c007efa:	689b      	ldr	r3, [r3, #8]
 c007efc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 c007f00:	687b      	ldr	r3, [r7, #4]
 c007f02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 c007f04:	687b      	ldr	r3, [r7, #4]
 c007f06:	681b      	ldr	r3, [r3, #0]
 c007f08:	430a      	orrs	r2, r1
 c007f0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 c007f0c:	687b      	ldr	r3, [r7, #4]
 c007f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c007f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c007f14:	2b00      	cmp	r3, #0
 c007f16:	d01a      	beq.n	c007f4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c007f18:	687b      	ldr	r3, [r7, #4]
 c007f1a:	681b      	ldr	r3, [r3, #0]
 c007f1c:	685b      	ldr	r3, [r3, #4]
 c007f1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 c007f22:	687b      	ldr	r3, [r7, #4]
 c007f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 c007f26:	687b      	ldr	r3, [r7, #4]
 c007f28:	681b      	ldr	r3, [r3, #0]
 c007f2a:	430a      	orrs	r2, r1
 c007f2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c007f2e:	687b      	ldr	r3, [r7, #4]
 c007f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c007f32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c007f36:	d10a      	bne.n	c007f4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 c007f38:	687b      	ldr	r3, [r7, #4]
 c007f3a:	681b      	ldr	r3, [r3, #0]
 c007f3c:	685b      	ldr	r3, [r3, #4]
 c007f3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 c007f42:	687b      	ldr	r3, [r7, #4]
 c007f44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c007f46:	687b      	ldr	r3, [r7, #4]
 c007f48:	681b      	ldr	r3, [r3, #0]
 c007f4a:	430a      	orrs	r2, r1
 c007f4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 c007f4e:	687b      	ldr	r3, [r7, #4]
 c007f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c007f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c007f56:	2b00      	cmp	r3, #0
 c007f58:	d00a      	beq.n	c007f70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 c007f5a:	687b      	ldr	r3, [r7, #4]
 c007f5c:	681b      	ldr	r3, [r3, #0]
 c007f5e:	685b      	ldr	r3, [r3, #4]
 c007f60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 c007f64:	687b      	ldr	r3, [r7, #4]
 c007f66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c007f68:	687b      	ldr	r3, [r7, #4]
 c007f6a:	681b      	ldr	r3, [r3, #0]
 c007f6c:	430a      	orrs	r2, r1
 c007f6e:	605a      	str	r2, [r3, #4]
  }
}
 c007f70:	bf00      	nop
 c007f72:	370c      	adds	r7, #12
 c007f74:	46bd      	mov	sp, r7
 c007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007f7a:	4770      	bx	lr

0c007f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 c007f7c:	b580      	push	{r7, lr}
 c007f7e:	b086      	sub	sp, #24
 c007f80:	af02      	add	r7, sp, #8
 c007f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c007f84:	687b      	ldr	r3, [r7, #4]
 c007f86:	2200      	movs	r2, #0
 c007f88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 c007f8c:	f7fd f804 	bl	c004f98 <HAL_GetTick>
 c007f90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c007f92:	687b      	ldr	r3, [r7, #4]
 c007f94:	681b      	ldr	r3, [r3, #0]
 c007f96:	681b      	ldr	r3, [r3, #0]
 c007f98:	f003 0308 	and.w	r3, r3, #8
 c007f9c:	2b08      	cmp	r3, #8
 c007f9e:	d10e      	bne.n	c007fbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c007fa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c007fa4:	9300      	str	r3, [sp, #0]
 c007fa6:	68fb      	ldr	r3, [r7, #12]
 c007fa8:	2200      	movs	r2, #0
 c007faa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 c007fae:	6878      	ldr	r0, [r7, #4]
 c007fb0:	f000 f82f 	bl	c008012 <UART_WaitOnFlagUntilTimeout>
 c007fb4:	4603      	mov	r3, r0
 c007fb6:	2b00      	cmp	r3, #0
 c007fb8:	d001      	beq.n	c007fbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 c007fba:	2303      	movs	r3, #3
 c007fbc:	e025      	b.n	c00800a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 c007fbe:	687b      	ldr	r3, [r7, #4]
 c007fc0:	681b      	ldr	r3, [r3, #0]
 c007fc2:	681b      	ldr	r3, [r3, #0]
 c007fc4:	f003 0304 	and.w	r3, r3, #4
 c007fc8:	2b04      	cmp	r3, #4
 c007fca:	d10e      	bne.n	c007fea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c007fcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c007fd0:	9300      	str	r3, [sp, #0]
 c007fd2:	68fb      	ldr	r3, [r7, #12]
 c007fd4:	2200      	movs	r2, #0
 c007fd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 c007fda:	6878      	ldr	r0, [r7, #4]
 c007fdc:	f000 f819 	bl	c008012 <UART_WaitOnFlagUntilTimeout>
 c007fe0:	4603      	mov	r3, r0
 c007fe2:	2b00      	cmp	r3, #0
 c007fe4:	d001      	beq.n	c007fea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 c007fe6:	2303      	movs	r3, #3
 c007fe8:	e00f      	b.n	c00800a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 c007fea:	687b      	ldr	r3, [r7, #4]
 c007fec:	2220      	movs	r2, #32
 c007fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 c007ff2:	687b      	ldr	r3, [r7, #4]
 c007ff4:	2220      	movs	r2, #32
 c007ff6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c007ffa:	687b      	ldr	r3, [r7, #4]
 c007ffc:	2200      	movs	r2, #0
 c007ffe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 c008000:	687b      	ldr	r3, [r7, #4]
 c008002:	2200      	movs	r2, #0
 c008004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c008008:	2300      	movs	r3, #0
}
 c00800a:	4618      	mov	r0, r3
 c00800c:	3710      	adds	r7, #16
 c00800e:	46bd      	mov	sp, r7
 c008010:	bd80      	pop	{r7, pc}

0c008012 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 c008012:	b580      	push	{r7, lr}
 c008014:	b084      	sub	sp, #16
 c008016:	af00      	add	r7, sp, #0
 c008018:	60f8      	str	r0, [r7, #12]
 c00801a:	60b9      	str	r1, [r7, #8]
 c00801c:	603b      	str	r3, [r7, #0]
 c00801e:	4613      	mov	r3, r2
 c008020:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c008022:	e062      	b.n	c0080ea <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 c008024:	69bb      	ldr	r3, [r7, #24]
 c008026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 c00802a:	d05e      	beq.n	c0080ea <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c00802c:	f7fc ffb4 	bl	c004f98 <HAL_GetTick>
 c008030:	4602      	mov	r2, r0
 c008032:	683b      	ldr	r3, [r7, #0]
 c008034:	1ad3      	subs	r3, r2, r3
 c008036:	69ba      	ldr	r2, [r7, #24]
 c008038:	429a      	cmp	r2, r3
 c00803a:	d302      	bcc.n	c008042 <UART_WaitOnFlagUntilTimeout+0x30>
 c00803c:	69bb      	ldr	r3, [r7, #24]
 c00803e:	2b00      	cmp	r3, #0
 c008040:	d11d      	bne.n	c00807e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c008042:	68fb      	ldr	r3, [r7, #12]
 c008044:	681b      	ldr	r3, [r3, #0]
 c008046:	681a      	ldr	r2, [r3, #0]
 c008048:	68fb      	ldr	r3, [r7, #12]
 c00804a:	681b      	ldr	r3, [r3, #0]
 c00804c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 c008050:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c008052:	68fb      	ldr	r3, [r7, #12]
 c008054:	681b      	ldr	r3, [r3, #0]
 c008056:	689a      	ldr	r2, [r3, #8]
 c008058:	68fb      	ldr	r3, [r7, #12]
 c00805a:	681b      	ldr	r3, [r3, #0]
 c00805c:	f022 0201 	bic.w	r2, r2, #1
 c008060:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 c008062:	68fb      	ldr	r3, [r7, #12]
 c008064:	2220      	movs	r2, #32
 c008066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 c00806a:	68fb      	ldr	r3, [r7, #12]
 c00806c:	2220      	movs	r2, #32
 c00806e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 c008072:	68fb      	ldr	r3, [r7, #12]
 c008074:	2200      	movs	r2, #0
 c008076:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 c00807a:	2303      	movs	r3, #3
 c00807c:	e045      	b.n	c00810a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c00807e:	68fb      	ldr	r3, [r7, #12]
 c008080:	681b      	ldr	r3, [r3, #0]
 c008082:	681b      	ldr	r3, [r3, #0]
 c008084:	f003 0304 	and.w	r3, r3, #4
 c008088:	2b00      	cmp	r3, #0
 c00808a:	d02e      	beq.n	c0080ea <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c00808c:	68fb      	ldr	r3, [r7, #12]
 c00808e:	681b      	ldr	r3, [r3, #0]
 c008090:	69db      	ldr	r3, [r3, #28]
 c008092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c008096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c00809a:	d126      	bne.n	c0080ea <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c00809c:	68fb      	ldr	r3, [r7, #12]
 c00809e:	681b      	ldr	r3, [r3, #0]
 c0080a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c0080a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c0080a6:	68fb      	ldr	r3, [r7, #12]
 c0080a8:	681b      	ldr	r3, [r3, #0]
 c0080aa:	681a      	ldr	r2, [r3, #0]
 c0080ac:	68fb      	ldr	r3, [r7, #12]
 c0080ae:	681b      	ldr	r3, [r3, #0]
 c0080b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 c0080b4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c0080b6:	68fb      	ldr	r3, [r7, #12]
 c0080b8:	681b      	ldr	r3, [r3, #0]
 c0080ba:	689a      	ldr	r2, [r3, #8]
 c0080bc:	68fb      	ldr	r3, [r7, #12]
 c0080be:	681b      	ldr	r3, [r3, #0]
 c0080c0:	f022 0201 	bic.w	r2, r2, #1
 c0080c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 c0080c6:	68fb      	ldr	r3, [r7, #12]
 c0080c8:	2220      	movs	r2, #32
 c0080ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 c0080ce:	68fb      	ldr	r3, [r7, #12]
 c0080d0:	2220      	movs	r2, #32
 c0080d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c0080d6:	68fb      	ldr	r3, [r7, #12]
 c0080d8:	2220      	movs	r2, #32
 c0080da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 c0080de:	68fb      	ldr	r3, [r7, #12]
 c0080e0:	2200      	movs	r2, #0
 c0080e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 c0080e6:	2303      	movs	r3, #3
 c0080e8:	e00f      	b.n	c00810a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c0080ea:	68fb      	ldr	r3, [r7, #12]
 c0080ec:	681b      	ldr	r3, [r3, #0]
 c0080ee:	69da      	ldr	r2, [r3, #28]
 c0080f0:	68bb      	ldr	r3, [r7, #8]
 c0080f2:	4013      	ands	r3, r2
 c0080f4:	68ba      	ldr	r2, [r7, #8]
 c0080f6:	429a      	cmp	r2, r3
 c0080f8:	bf0c      	ite	eq
 c0080fa:	2301      	moveq	r3, #1
 c0080fc:	2300      	movne	r3, #0
 c0080fe:	b2db      	uxtb	r3, r3
 c008100:	461a      	mov	r2, r3
 c008102:	79fb      	ldrb	r3, [r7, #7]
 c008104:	429a      	cmp	r2, r3
 c008106:	d08d      	beq.n	c008024 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 c008108:	2300      	movs	r3, #0
}
 c00810a:	4618      	mov	r0, r3
 c00810c:	3710      	adds	r7, #16
 c00810e:	46bd      	mov	sp, r7
 c008110:	bd80      	pop	{r7, pc}

0c008112 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 c008112:	b480      	push	{r7}
 c008114:	b085      	sub	sp, #20
 c008116:	af00      	add	r7, sp, #0
 c008118:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 c00811a:	687b      	ldr	r3, [r7, #4]
 c00811c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c008120:	2b01      	cmp	r3, #1
 c008122:	d101      	bne.n	c008128 <HAL_UARTEx_DisableFifoMode+0x16>
 c008124:	2302      	movs	r3, #2
 c008126:	e027      	b.n	c008178 <HAL_UARTEx_DisableFifoMode+0x66>
 c008128:	687b      	ldr	r3, [r7, #4]
 c00812a:	2201      	movs	r2, #1
 c00812c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c008130:	687b      	ldr	r3, [r7, #4]
 c008132:	2224      	movs	r2, #36	; 0x24
 c008134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c008138:	687b      	ldr	r3, [r7, #4]
 c00813a:	681b      	ldr	r3, [r3, #0]
 c00813c:	681b      	ldr	r3, [r3, #0]
 c00813e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c008140:	687b      	ldr	r3, [r7, #4]
 c008142:	681b      	ldr	r3, [r3, #0]
 c008144:	681a      	ldr	r2, [r3, #0]
 c008146:	687b      	ldr	r3, [r7, #4]
 c008148:	681b      	ldr	r3, [r3, #0]
 c00814a:	f022 0201 	bic.w	r2, r2, #1
 c00814e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 c008150:	68fb      	ldr	r3, [r7, #12]
 c008152:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 c008156:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 c008158:	687b      	ldr	r3, [r7, #4]
 c00815a:	2200      	movs	r2, #0
 c00815c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c00815e:	687b      	ldr	r3, [r7, #4]
 c008160:	681b      	ldr	r3, [r3, #0]
 c008162:	68fa      	ldr	r2, [r7, #12]
 c008164:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c008166:	687b      	ldr	r3, [r7, #4]
 c008168:	2220      	movs	r2, #32
 c00816a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00816e:	687b      	ldr	r3, [r7, #4]
 c008170:	2200      	movs	r2, #0
 c008172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c008176:	2300      	movs	r3, #0
}
 c008178:	4618      	mov	r0, r3
 c00817a:	3714      	adds	r7, #20
 c00817c:	46bd      	mov	sp, r7
 c00817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008182:	4770      	bx	lr

0c008184 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c008184:	b580      	push	{r7, lr}
 c008186:	b084      	sub	sp, #16
 c008188:	af00      	add	r7, sp, #0
 c00818a:	6078      	str	r0, [r7, #4]
 c00818c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c00818e:	687b      	ldr	r3, [r7, #4]
 c008190:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c008194:	2b01      	cmp	r3, #1
 c008196:	d101      	bne.n	c00819c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 c008198:	2302      	movs	r3, #2
 c00819a:	e02d      	b.n	c0081f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 c00819c:	687b      	ldr	r3, [r7, #4]
 c00819e:	2201      	movs	r2, #1
 c0081a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c0081a4:	687b      	ldr	r3, [r7, #4]
 c0081a6:	2224      	movs	r2, #36	; 0x24
 c0081a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c0081ac:	687b      	ldr	r3, [r7, #4]
 c0081ae:	681b      	ldr	r3, [r3, #0]
 c0081b0:	681b      	ldr	r3, [r3, #0]
 c0081b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c0081b4:	687b      	ldr	r3, [r7, #4]
 c0081b6:	681b      	ldr	r3, [r3, #0]
 c0081b8:	681a      	ldr	r2, [r3, #0]
 c0081ba:	687b      	ldr	r3, [r7, #4]
 c0081bc:	681b      	ldr	r3, [r3, #0]
 c0081be:	f022 0201 	bic.w	r2, r2, #1
 c0081c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 c0081c4:	687b      	ldr	r3, [r7, #4]
 c0081c6:	681b      	ldr	r3, [r3, #0]
 c0081c8:	689b      	ldr	r3, [r3, #8]
 c0081ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 c0081ce:	687b      	ldr	r3, [r7, #4]
 c0081d0:	681b      	ldr	r3, [r3, #0]
 c0081d2:	683a      	ldr	r2, [r7, #0]
 c0081d4:	430a      	orrs	r2, r1
 c0081d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c0081d8:	6878      	ldr	r0, [r7, #4]
 c0081da:	f000 f84f 	bl	c00827c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c0081de:	687b      	ldr	r3, [r7, #4]
 c0081e0:	681b      	ldr	r3, [r3, #0]
 c0081e2:	68fa      	ldr	r2, [r7, #12]
 c0081e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c0081e6:	687b      	ldr	r3, [r7, #4]
 c0081e8:	2220      	movs	r2, #32
 c0081ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c0081ee:	687b      	ldr	r3, [r7, #4]
 c0081f0:	2200      	movs	r2, #0
 c0081f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c0081f6:	2300      	movs	r3, #0
}
 c0081f8:	4618      	mov	r0, r3
 c0081fa:	3710      	adds	r7, #16
 c0081fc:	46bd      	mov	sp, r7
 c0081fe:	bd80      	pop	{r7, pc}

0c008200 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c008200:	b580      	push	{r7, lr}
 c008202:	b084      	sub	sp, #16
 c008204:	af00      	add	r7, sp, #0
 c008206:	6078      	str	r0, [r7, #4]
 c008208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c00820a:	687b      	ldr	r3, [r7, #4]
 c00820c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c008210:	2b01      	cmp	r3, #1
 c008212:	d101      	bne.n	c008218 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 c008214:	2302      	movs	r3, #2
 c008216:	e02d      	b.n	c008274 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 c008218:	687b      	ldr	r3, [r7, #4]
 c00821a:	2201      	movs	r2, #1
 c00821c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c008220:	687b      	ldr	r3, [r7, #4]
 c008222:	2224      	movs	r2, #36	; 0x24
 c008224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c008228:	687b      	ldr	r3, [r7, #4]
 c00822a:	681b      	ldr	r3, [r3, #0]
 c00822c:	681b      	ldr	r3, [r3, #0]
 c00822e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c008230:	687b      	ldr	r3, [r7, #4]
 c008232:	681b      	ldr	r3, [r3, #0]
 c008234:	681a      	ldr	r2, [r3, #0]
 c008236:	687b      	ldr	r3, [r7, #4]
 c008238:	681b      	ldr	r3, [r3, #0]
 c00823a:	f022 0201 	bic.w	r2, r2, #1
 c00823e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 c008240:	687b      	ldr	r3, [r7, #4]
 c008242:	681b      	ldr	r3, [r3, #0]
 c008244:	689b      	ldr	r3, [r3, #8]
 c008246:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 c00824a:	687b      	ldr	r3, [r7, #4]
 c00824c:	681b      	ldr	r3, [r3, #0]
 c00824e:	683a      	ldr	r2, [r7, #0]
 c008250:	430a      	orrs	r2, r1
 c008252:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c008254:	6878      	ldr	r0, [r7, #4]
 c008256:	f000 f811 	bl	c00827c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c00825a:	687b      	ldr	r3, [r7, #4]
 c00825c:	681b      	ldr	r3, [r3, #0]
 c00825e:	68fa      	ldr	r2, [r7, #12]
 c008260:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c008262:	687b      	ldr	r3, [r7, #4]
 c008264:	2220      	movs	r2, #32
 c008266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00826a:	687b      	ldr	r3, [r7, #4]
 c00826c:	2200      	movs	r2, #0
 c00826e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c008272:	2300      	movs	r3, #0
}
 c008274:	4618      	mov	r0, r3
 c008276:	3710      	adds	r7, #16
 c008278:	46bd      	mov	sp, r7
 c00827a:	bd80      	pop	{r7, pc}

0c00827c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 c00827c:	b480      	push	{r7}
 c00827e:	b085      	sub	sp, #20
 c008280:	af00      	add	r7, sp, #0
 c008282:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c008284:	687b      	ldr	r3, [r7, #4]
 c008286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c008288:	2b00      	cmp	r3, #0
 c00828a:	d108      	bne.n	c00829e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 c00828c:	687b      	ldr	r3, [r7, #4]
 c00828e:	2201      	movs	r2, #1
 c008290:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 c008294:	687b      	ldr	r3, [r7, #4]
 c008296:	2201      	movs	r2, #1
 c008298:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 c00829c:	e031      	b.n	c008302 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 c00829e:	2308      	movs	r3, #8
 c0082a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 c0082a2:	2308      	movs	r3, #8
 c0082a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 c0082a6:	687b      	ldr	r3, [r7, #4]
 c0082a8:	681b      	ldr	r3, [r3, #0]
 c0082aa:	689b      	ldr	r3, [r3, #8]
 c0082ac:	0e5b      	lsrs	r3, r3, #25
 c0082ae:	b2db      	uxtb	r3, r3
 c0082b0:	f003 0307 	and.w	r3, r3, #7
 c0082b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c0082b6:	687b      	ldr	r3, [r7, #4]
 c0082b8:	681b      	ldr	r3, [r3, #0]
 c0082ba:	689b      	ldr	r3, [r3, #8]
 c0082bc:	0f5b      	lsrs	r3, r3, #29
 c0082be:	b2db      	uxtb	r3, r3
 c0082c0:	f003 0307 	and.w	r3, r3, #7
 c0082c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c0082c6:	7bbb      	ldrb	r3, [r7, #14]
 c0082c8:	7b3a      	ldrb	r2, [r7, #12]
 c0082ca:	4911      	ldr	r1, [pc, #68]	; (c008310 <UARTEx_SetNbDataToProcess+0x94>)
 c0082cc:	5c8a      	ldrb	r2, [r1, r2]
 c0082ce:	fb02 f303 	mul.w	r3, r2, r3
 c0082d2:	7b3a      	ldrb	r2, [r7, #12]
 c0082d4:	490f      	ldr	r1, [pc, #60]	; (c008314 <UARTEx_SetNbDataToProcess+0x98>)
 c0082d6:	5c8a      	ldrb	r2, [r1, r2]
 c0082d8:	fb93 f3f2 	sdiv	r3, r3, r2
 c0082dc:	b29a      	uxth	r2, r3
 c0082de:	687b      	ldr	r3, [r7, #4]
 c0082e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c0082e4:	7bfb      	ldrb	r3, [r7, #15]
 c0082e6:	7b7a      	ldrb	r2, [r7, #13]
 c0082e8:	4909      	ldr	r1, [pc, #36]	; (c008310 <UARTEx_SetNbDataToProcess+0x94>)
 c0082ea:	5c8a      	ldrb	r2, [r1, r2]
 c0082ec:	fb02 f303 	mul.w	r3, r2, r3
 c0082f0:	7b7a      	ldrb	r2, [r7, #13]
 c0082f2:	4908      	ldr	r1, [pc, #32]	; (c008314 <UARTEx_SetNbDataToProcess+0x98>)
 c0082f4:	5c8a      	ldrb	r2, [r1, r2]
 c0082f6:	fb93 f3f2 	sdiv	r3, r3, r2
 c0082fa:	b29a      	uxth	r2, r3
 c0082fc:	687b      	ldr	r3, [r7, #4]
 c0082fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 c008302:	bf00      	nop
 c008304:	3714      	adds	r7, #20
 c008306:	46bd      	mov	sp, r7
 c008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00830c:	4770      	bx	lr
 c00830e:	bf00      	nop
 c008310:	0c009590 	.word	0x0c009590
 c008314:	0c009598 	.word	0x0c009598

0c008318 <__errno>:
 c008318:	4b01      	ldr	r3, [pc, #4]	; (c008320 <__errno+0x8>)
 c00831a:	6818      	ldr	r0, [r3, #0]
 c00831c:	4770      	bx	lr
 c00831e:	bf00      	nop
 c008320:	30000074 	.word	0x30000074

0c008324 <__libc_init_array>:
 c008324:	b570      	push	{r4, r5, r6, lr}
 c008326:	4d0d      	ldr	r5, [pc, #52]	; (c00835c <__libc_init_array+0x38>)
 c008328:	2600      	movs	r6, #0
 c00832a:	4c0d      	ldr	r4, [pc, #52]	; (c008360 <__libc_init_array+0x3c>)
 c00832c:	1b64      	subs	r4, r4, r5
 c00832e:	10a4      	asrs	r4, r4, #2
 c008330:	42a6      	cmp	r6, r4
 c008332:	d109      	bne.n	c008348 <__libc_init_array+0x24>
 c008334:	4d0b      	ldr	r5, [pc, #44]	; (c008364 <__libc_init_array+0x40>)
 c008336:	2600      	movs	r6, #0
 c008338:	4c0b      	ldr	r4, [pc, #44]	; (c008368 <__libc_init_array+0x44>)
 c00833a:	f001 f873 	bl	c009424 <_init>
 c00833e:	1b64      	subs	r4, r4, r5
 c008340:	10a4      	asrs	r4, r4, #2
 c008342:	42a6      	cmp	r6, r4
 c008344:	d105      	bne.n	c008352 <__libc_init_array+0x2e>
 c008346:	bd70      	pop	{r4, r5, r6, pc}
 c008348:	f855 3b04 	ldr.w	r3, [r5], #4
 c00834c:	3601      	adds	r6, #1
 c00834e:	4798      	blx	r3
 c008350:	e7ee      	b.n	c008330 <__libc_init_array+0xc>
 c008352:	f855 3b04 	ldr.w	r3, [r5], #4
 c008356:	3601      	adds	r6, #1
 c008358:	4798      	blx	r3
 c00835a:	e7f2      	b.n	c008342 <__libc_init_array+0x1e>
 c00835c:	0c0096f0 	.word	0x0c0096f0
 c008360:	0c0096f0 	.word	0x0c0096f0
 c008364:	0c0096f0 	.word	0x0c0096f0
 c008368:	0c0096f4 	.word	0x0c0096f4

0c00836c <memcpy>:
 c00836c:	440a      	add	r2, r1
 c00836e:	1e43      	subs	r3, r0, #1
 c008370:	4291      	cmp	r1, r2
 c008372:	d100      	bne.n	c008376 <memcpy+0xa>
 c008374:	4770      	bx	lr
 c008376:	b510      	push	{r4, lr}
 c008378:	f811 4b01 	ldrb.w	r4, [r1], #1
 c00837c:	4291      	cmp	r1, r2
 c00837e:	f803 4f01 	strb.w	r4, [r3, #1]!
 c008382:	d1f9      	bne.n	c008378 <memcpy+0xc>
 c008384:	bd10      	pop	{r4, pc}

0c008386 <memset>:
 c008386:	4402      	add	r2, r0
 c008388:	4603      	mov	r3, r0
 c00838a:	4293      	cmp	r3, r2
 c00838c:	d100      	bne.n	c008390 <memset+0xa>
 c00838e:	4770      	bx	lr
 c008390:	f803 1b01 	strb.w	r1, [r3], #1
 c008394:	e7f9      	b.n	c00838a <memset+0x4>
	...

0c008398 <rand>:
 c008398:	4b16      	ldr	r3, [pc, #88]	; (c0083f4 <rand+0x5c>)
 c00839a:	b510      	push	{r4, lr}
 c00839c:	681c      	ldr	r4, [r3, #0]
 c00839e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 c0083a0:	b9b3      	cbnz	r3, c0083d0 <rand+0x38>
 c0083a2:	2018      	movs	r0, #24
 c0083a4:	f000 f95e 	bl	c008664 <malloc>
 c0083a8:	63a0      	str	r0, [r4, #56]	; 0x38
 c0083aa:	b928      	cbnz	r0, c0083b8 <rand+0x20>
 c0083ac:	4602      	mov	r2, r0
 c0083ae:	4b12      	ldr	r3, [pc, #72]	; (c0083f8 <rand+0x60>)
 c0083b0:	214e      	movs	r1, #78	; 0x4e
 c0083b2:	4812      	ldr	r0, [pc, #72]	; (c0083fc <rand+0x64>)
 c0083b4:	f000 f82e 	bl	c008414 <__assert_func>
 c0083b8:	4a11      	ldr	r2, [pc, #68]	; (c008400 <rand+0x68>)
 c0083ba:	4b12      	ldr	r3, [pc, #72]	; (c008404 <rand+0x6c>)
 c0083bc:	e9c0 2300 	strd	r2, r3, [r0]
 c0083c0:	4b11      	ldr	r3, [pc, #68]	; (c008408 <rand+0x70>)
 c0083c2:	2201      	movs	r2, #1
 c0083c4:	6083      	str	r3, [r0, #8]
 c0083c6:	230b      	movs	r3, #11
 c0083c8:	8183      	strh	r3, [r0, #12]
 c0083ca:	2300      	movs	r3, #0
 c0083cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 c0083d0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 c0083d2:	4a0e      	ldr	r2, [pc, #56]	; (c00840c <rand+0x74>)
 c0083d4:	6920      	ldr	r0, [r4, #16]
 c0083d6:	6963      	ldr	r3, [r4, #20]
 c0083d8:	490d      	ldr	r1, [pc, #52]	; (c008410 <rand+0x78>)
 c0083da:	4342      	muls	r2, r0
 c0083dc:	fb01 2203 	mla	r2, r1, r3, r2
 c0083e0:	fba0 0101 	umull	r0, r1, r0, r1
 c0083e4:	1c43      	adds	r3, r0, #1
 c0083e6:	eb42 0001 	adc.w	r0, r2, r1
 c0083ea:	e9c4 3004 	strd	r3, r0, [r4, #16]
 c0083ee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 c0083f2:	bd10      	pop	{r4, pc}
 c0083f4:	30000074 	.word	0x30000074
 c0083f8:	0c0095a4 	.word	0x0c0095a4
 c0083fc:	0c0095bb 	.word	0x0c0095bb
 c008400:	abcd330e 	.word	0xabcd330e
 c008404:	e66d1234 	.word	0xe66d1234
 c008408:	0005deec 	.word	0x0005deec
 c00840c:	5851f42d 	.word	0x5851f42d
 c008410:	4c957f2d 	.word	0x4c957f2d

0c008414 <__assert_func>:
 c008414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 c008416:	4614      	mov	r4, r2
 c008418:	461a      	mov	r2, r3
 c00841a:	4b09      	ldr	r3, [pc, #36]	; (c008440 <__assert_func+0x2c>)
 c00841c:	4605      	mov	r5, r0
 c00841e:	681b      	ldr	r3, [r3, #0]
 c008420:	68d8      	ldr	r0, [r3, #12]
 c008422:	b14c      	cbz	r4, c008438 <__assert_func+0x24>
 c008424:	4b07      	ldr	r3, [pc, #28]	; (c008444 <__assert_func+0x30>)
 c008426:	9100      	str	r1, [sp, #0]
 c008428:	4907      	ldr	r1, [pc, #28]	; (c008448 <__assert_func+0x34>)
 c00842a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 c00842e:	462b      	mov	r3, r5
 c008430:	f000 f8e4 	bl	c0085fc <fiprintf>
 c008434:	f000 fe14 	bl	c009060 <abort>
 c008438:	4b04      	ldr	r3, [pc, #16]	; (c00844c <__assert_func+0x38>)
 c00843a:	461c      	mov	r4, r3
 c00843c:	e7f3      	b.n	c008426 <__assert_func+0x12>
 c00843e:	bf00      	nop
 c008440:	30000074 	.word	0x30000074
 c008444:	0c009616 	.word	0x0c009616
 c008448:	0c009623 	.word	0x0c009623
 c00844c:	0c009651 	.word	0x0c009651

0c008450 <std>:
 c008450:	2300      	movs	r3, #0
 c008452:	b510      	push	{r4, lr}
 c008454:	4604      	mov	r4, r0
 c008456:	6083      	str	r3, [r0, #8]
 c008458:	8181      	strh	r1, [r0, #12]
 c00845a:	4619      	mov	r1, r3
 c00845c:	6643      	str	r3, [r0, #100]	; 0x64
 c00845e:	81c2      	strh	r2, [r0, #14]
 c008460:	2208      	movs	r2, #8
 c008462:	6183      	str	r3, [r0, #24]
 c008464:	e9c0 3300 	strd	r3, r3, [r0]
 c008468:	e9c0 3304 	strd	r3, r3, [r0, #16]
 c00846c:	305c      	adds	r0, #92	; 0x5c
 c00846e:	f7ff ff8a 	bl	c008386 <memset>
 c008472:	4b05      	ldr	r3, [pc, #20]	; (c008488 <std+0x38>)
 c008474:	6224      	str	r4, [r4, #32]
 c008476:	6263      	str	r3, [r4, #36]	; 0x24
 c008478:	4b04      	ldr	r3, [pc, #16]	; (c00848c <std+0x3c>)
 c00847a:	62a3      	str	r3, [r4, #40]	; 0x28
 c00847c:	4b04      	ldr	r3, [pc, #16]	; (c008490 <std+0x40>)
 c00847e:	62e3      	str	r3, [r4, #44]	; 0x2c
 c008480:	4b04      	ldr	r3, [pc, #16]	; (c008494 <std+0x44>)
 c008482:	6323      	str	r3, [r4, #48]	; 0x30
 c008484:	bd10      	pop	{r4, pc}
 c008486:	bf00      	nop
 c008488:	0c008e35 	.word	0x0c008e35
 c00848c:	0c008e57 	.word	0x0c008e57
 c008490:	0c008e8f 	.word	0x0c008e8f
 c008494:	0c008eb3 	.word	0x0c008eb3

0c008498 <_cleanup_r>:
 c008498:	4901      	ldr	r1, [pc, #4]	; (c0084a0 <_cleanup_r+0x8>)
 c00849a:	f000 b8c1 	b.w	c008620 <_fwalk_reent>
 c00849e:	bf00      	nop
 c0084a0:	0c009199 	.word	0x0c009199

0c0084a4 <__sfmoreglue>:
 c0084a4:	b570      	push	{r4, r5, r6, lr}
 c0084a6:	2268      	movs	r2, #104	; 0x68
 c0084a8:	1e4d      	subs	r5, r1, #1
 c0084aa:	460e      	mov	r6, r1
 c0084ac:	4355      	muls	r5, r2
 c0084ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 c0084b2:	f000 f94b 	bl	c00874c <_malloc_r>
 c0084b6:	4604      	mov	r4, r0
 c0084b8:	b140      	cbz	r0, c0084cc <__sfmoreglue+0x28>
 c0084ba:	2100      	movs	r1, #0
 c0084bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 c0084c0:	e9c0 1600 	strd	r1, r6, [r0]
 c0084c4:	300c      	adds	r0, #12
 c0084c6:	60a0      	str	r0, [r4, #8]
 c0084c8:	f7ff ff5d 	bl	c008386 <memset>
 c0084cc:	4620      	mov	r0, r4
 c0084ce:	bd70      	pop	{r4, r5, r6, pc}

0c0084d0 <__sfp_lock_acquire>:
 c0084d0:	4801      	ldr	r0, [pc, #4]	; (c0084d8 <__sfp_lock_acquire+0x8>)
 c0084d2:	f000 b8c5 	b.w	c008660 <__retarget_lock_acquire_recursive>
 c0084d6:	bf00      	nop
 c0084d8:	300004cd 	.word	0x300004cd

0c0084dc <__sfp_lock_release>:
 c0084dc:	4801      	ldr	r0, [pc, #4]	; (c0084e4 <__sfp_lock_release+0x8>)
 c0084de:	f000 b8c0 	b.w	c008662 <__retarget_lock_release_recursive>
 c0084e2:	bf00      	nop
 c0084e4:	300004cd 	.word	0x300004cd

0c0084e8 <__sinit_lock_acquire>:
 c0084e8:	4801      	ldr	r0, [pc, #4]	; (c0084f0 <__sinit_lock_acquire+0x8>)
 c0084ea:	f000 b8b9 	b.w	c008660 <__retarget_lock_acquire_recursive>
 c0084ee:	bf00      	nop
 c0084f0:	300004ce 	.word	0x300004ce

0c0084f4 <__sinit_lock_release>:
 c0084f4:	4801      	ldr	r0, [pc, #4]	; (c0084fc <__sinit_lock_release+0x8>)
 c0084f6:	f000 b8b4 	b.w	c008662 <__retarget_lock_release_recursive>
 c0084fa:	bf00      	nop
 c0084fc:	300004ce 	.word	0x300004ce

0c008500 <__sinit>:
 c008500:	b510      	push	{r4, lr}
 c008502:	4604      	mov	r4, r0
 c008504:	f7ff fff0 	bl	c0084e8 <__sinit_lock_acquire>
 c008508:	69a3      	ldr	r3, [r4, #24]
 c00850a:	b11b      	cbz	r3, c008514 <__sinit+0x14>
 c00850c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c008510:	f7ff bff0 	b.w	c0084f4 <__sinit_lock_release>
 c008514:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 c008518:	6523      	str	r3, [r4, #80]	; 0x50
 c00851a:	4620      	mov	r0, r4
 c00851c:	4b12      	ldr	r3, [pc, #72]	; (c008568 <__sinit+0x68>)
 c00851e:	4a13      	ldr	r2, [pc, #76]	; (c00856c <__sinit+0x6c>)
 c008520:	681b      	ldr	r3, [r3, #0]
 c008522:	62a2      	str	r2, [r4, #40]	; 0x28
 c008524:	42a3      	cmp	r3, r4
 c008526:	bf04      	itt	eq
 c008528:	2301      	moveq	r3, #1
 c00852a:	61a3      	streq	r3, [r4, #24]
 c00852c:	f000 f820 	bl	c008570 <__sfp>
 c008530:	6060      	str	r0, [r4, #4]
 c008532:	4620      	mov	r0, r4
 c008534:	f000 f81c 	bl	c008570 <__sfp>
 c008538:	60a0      	str	r0, [r4, #8]
 c00853a:	4620      	mov	r0, r4
 c00853c:	f000 f818 	bl	c008570 <__sfp>
 c008540:	2200      	movs	r2, #0
 c008542:	2104      	movs	r1, #4
 c008544:	60e0      	str	r0, [r4, #12]
 c008546:	6860      	ldr	r0, [r4, #4]
 c008548:	f7ff ff82 	bl	c008450 <std>
 c00854c:	2201      	movs	r2, #1
 c00854e:	2109      	movs	r1, #9
 c008550:	68a0      	ldr	r0, [r4, #8]
 c008552:	f7ff ff7d 	bl	c008450 <std>
 c008556:	2202      	movs	r2, #2
 c008558:	2112      	movs	r1, #18
 c00855a:	68e0      	ldr	r0, [r4, #12]
 c00855c:	f7ff ff78 	bl	c008450 <std>
 c008560:	2301      	movs	r3, #1
 c008562:	61a3      	str	r3, [r4, #24]
 c008564:	e7d2      	b.n	c00850c <__sinit+0xc>
 c008566:	bf00      	nop
 c008568:	0c0095a0 	.word	0x0c0095a0
 c00856c:	0c008499 	.word	0x0c008499

0c008570 <__sfp>:
 c008570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c008572:	4607      	mov	r7, r0
 c008574:	f7ff ffac 	bl	c0084d0 <__sfp_lock_acquire>
 c008578:	4b1e      	ldr	r3, [pc, #120]	; (c0085f4 <__sfp+0x84>)
 c00857a:	681e      	ldr	r6, [r3, #0]
 c00857c:	69b3      	ldr	r3, [r6, #24]
 c00857e:	b913      	cbnz	r3, c008586 <__sfp+0x16>
 c008580:	4630      	mov	r0, r6
 c008582:	f7ff ffbd 	bl	c008500 <__sinit>
 c008586:	3648      	adds	r6, #72	; 0x48
 c008588:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 c00858c:	3b01      	subs	r3, #1
 c00858e:	d503      	bpl.n	c008598 <__sfp+0x28>
 c008590:	6833      	ldr	r3, [r6, #0]
 c008592:	b30b      	cbz	r3, c0085d8 <__sfp+0x68>
 c008594:	6836      	ldr	r6, [r6, #0]
 c008596:	e7f7      	b.n	c008588 <__sfp+0x18>
 c008598:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 c00859c:	b9d5      	cbnz	r5, c0085d4 <__sfp+0x64>
 c00859e:	4b16      	ldr	r3, [pc, #88]	; (c0085f8 <__sfp+0x88>)
 c0085a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 c0085a4:	6665      	str	r5, [r4, #100]	; 0x64
 c0085a6:	60e3      	str	r3, [r4, #12]
 c0085a8:	f000 f859 	bl	c00865e <__retarget_lock_init_recursive>
 c0085ac:	f7ff ff96 	bl	c0084dc <__sfp_lock_release>
 c0085b0:	2208      	movs	r2, #8
 c0085b2:	4629      	mov	r1, r5
 c0085b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 c0085b8:	6025      	str	r5, [r4, #0]
 c0085ba:	61a5      	str	r5, [r4, #24]
 c0085bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 c0085c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 c0085c4:	f7ff fedf 	bl	c008386 <memset>
 c0085c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 c0085cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 c0085d0:	4620      	mov	r0, r4
 c0085d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c0085d4:	3468      	adds	r4, #104	; 0x68
 c0085d6:	e7d9      	b.n	c00858c <__sfp+0x1c>
 c0085d8:	2104      	movs	r1, #4
 c0085da:	4638      	mov	r0, r7
 c0085dc:	f7ff ff62 	bl	c0084a4 <__sfmoreglue>
 c0085e0:	4604      	mov	r4, r0
 c0085e2:	6030      	str	r0, [r6, #0]
 c0085e4:	2800      	cmp	r0, #0
 c0085e6:	d1d5      	bne.n	c008594 <__sfp+0x24>
 c0085e8:	f7ff ff78 	bl	c0084dc <__sfp_lock_release>
 c0085ec:	230c      	movs	r3, #12
 c0085ee:	603b      	str	r3, [r7, #0]
 c0085f0:	e7ee      	b.n	c0085d0 <__sfp+0x60>
 c0085f2:	bf00      	nop
 c0085f4:	0c0095a0 	.word	0x0c0095a0
 c0085f8:	ffff0001 	.word	0xffff0001

0c0085fc <fiprintf>:
 c0085fc:	b40e      	push	{r1, r2, r3}
 c0085fe:	b503      	push	{r0, r1, lr}
 c008600:	ab03      	add	r3, sp, #12
 c008602:	4601      	mov	r1, r0
 c008604:	4805      	ldr	r0, [pc, #20]	; (c00861c <fiprintf+0x20>)
 c008606:	f853 2b04 	ldr.w	r2, [r3], #4
 c00860a:	6800      	ldr	r0, [r0, #0]
 c00860c:	9301      	str	r3, [sp, #4]
 c00860e:	f000 f93b 	bl	c008888 <_vfiprintf_r>
 c008612:	b002      	add	sp, #8
 c008614:	f85d eb04 	ldr.w	lr, [sp], #4
 c008618:	b003      	add	sp, #12
 c00861a:	4770      	bx	lr
 c00861c:	30000074 	.word	0x30000074

0c008620 <_fwalk_reent>:
 c008620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c008624:	4606      	mov	r6, r0
 c008626:	4688      	mov	r8, r1
 c008628:	f100 0448 	add.w	r4, r0, #72	; 0x48
 c00862c:	2700      	movs	r7, #0
 c00862e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 c008632:	f1b9 0901 	subs.w	r9, r9, #1
 c008636:	d505      	bpl.n	c008644 <_fwalk_reent+0x24>
 c008638:	6824      	ldr	r4, [r4, #0]
 c00863a:	2c00      	cmp	r4, #0
 c00863c:	d1f7      	bne.n	c00862e <_fwalk_reent+0xe>
 c00863e:	4638      	mov	r0, r7
 c008640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c008644:	89ab      	ldrh	r3, [r5, #12]
 c008646:	2b01      	cmp	r3, #1
 c008648:	d907      	bls.n	c00865a <_fwalk_reent+0x3a>
 c00864a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 c00864e:	3301      	adds	r3, #1
 c008650:	d003      	beq.n	c00865a <_fwalk_reent+0x3a>
 c008652:	4629      	mov	r1, r5
 c008654:	4630      	mov	r0, r6
 c008656:	47c0      	blx	r8
 c008658:	4307      	orrs	r7, r0
 c00865a:	3568      	adds	r5, #104	; 0x68
 c00865c:	e7e9      	b.n	c008632 <_fwalk_reent+0x12>

0c00865e <__retarget_lock_init_recursive>:
 c00865e:	4770      	bx	lr

0c008660 <__retarget_lock_acquire_recursive>:
 c008660:	4770      	bx	lr

0c008662 <__retarget_lock_release_recursive>:
 c008662:	4770      	bx	lr

0c008664 <malloc>:
 c008664:	4b02      	ldr	r3, [pc, #8]	; (c008670 <malloc+0xc>)
 c008666:	4601      	mov	r1, r0
 c008668:	6818      	ldr	r0, [r3, #0]
 c00866a:	f000 b86f 	b.w	c00874c <_malloc_r>
 c00866e:	bf00      	nop
 c008670:	30000074 	.word	0x30000074

0c008674 <_free_r>:
 c008674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c008676:	2900      	cmp	r1, #0
 c008678:	d043      	beq.n	c008702 <_free_r+0x8e>
 c00867a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c00867e:	1f0c      	subs	r4, r1, #4
 c008680:	9001      	str	r0, [sp, #4]
 c008682:	2b00      	cmp	r3, #0
 c008684:	bfb8      	it	lt
 c008686:	18e4      	addlt	r4, r4, r3
 c008688:	f000 fe48 	bl	c00931c <__malloc_lock>
 c00868c:	4a1e      	ldr	r2, [pc, #120]	; (c008708 <_free_r+0x94>)
 c00868e:	9801      	ldr	r0, [sp, #4]
 c008690:	6813      	ldr	r3, [r2, #0]
 c008692:	b933      	cbnz	r3, c0086a2 <_free_r+0x2e>
 c008694:	6063      	str	r3, [r4, #4]
 c008696:	6014      	str	r4, [r2, #0]
 c008698:	b003      	add	sp, #12
 c00869a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 c00869e:	f000 be43 	b.w	c009328 <__malloc_unlock>
 c0086a2:	42a3      	cmp	r3, r4
 c0086a4:	d908      	bls.n	c0086b8 <_free_r+0x44>
 c0086a6:	6825      	ldr	r5, [r4, #0]
 c0086a8:	1961      	adds	r1, r4, r5
 c0086aa:	428b      	cmp	r3, r1
 c0086ac:	bf01      	itttt	eq
 c0086ae:	6819      	ldreq	r1, [r3, #0]
 c0086b0:	685b      	ldreq	r3, [r3, #4]
 c0086b2:	1949      	addeq	r1, r1, r5
 c0086b4:	6021      	streq	r1, [r4, #0]
 c0086b6:	e7ed      	b.n	c008694 <_free_r+0x20>
 c0086b8:	461a      	mov	r2, r3
 c0086ba:	685b      	ldr	r3, [r3, #4]
 c0086bc:	b10b      	cbz	r3, c0086c2 <_free_r+0x4e>
 c0086be:	42a3      	cmp	r3, r4
 c0086c0:	d9fa      	bls.n	c0086b8 <_free_r+0x44>
 c0086c2:	6811      	ldr	r1, [r2, #0]
 c0086c4:	1855      	adds	r5, r2, r1
 c0086c6:	42a5      	cmp	r5, r4
 c0086c8:	d10b      	bne.n	c0086e2 <_free_r+0x6e>
 c0086ca:	6824      	ldr	r4, [r4, #0]
 c0086cc:	4421      	add	r1, r4
 c0086ce:	1854      	adds	r4, r2, r1
 c0086d0:	6011      	str	r1, [r2, #0]
 c0086d2:	42a3      	cmp	r3, r4
 c0086d4:	d1e0      	bne.n	c008698 <_free_r+0x24>
 c0086d6:	681c      	ldr	r4, [r3, #0]
 c0086d8:	685b      	ldr	r3, [r3, #4]
 c0086da:	4421      	add	r1, r4
 c0086dc:	6053      	str	r3, [r2, #4]
 c0086de:	6011      	str	r1, [r2, #0]
 c0086e0:	e7da      	b.n	c008698 <_free_r+0x24>
 c0086e2:	d902      	bls.n	c0086ea <_free_r+0x76>
 c0086e4:	230c      	movs	r3, #12
 c0086e6:	6003      	str	r3, [r0, #0]
 c0086e8:	e7d6      	b.n	c008698 <_free_r+0x24>
 c0086ea:	6825      	ldr	r5, [r4, #0]
 c0086ec:	1961      	adds	r1, r4, r5
 c0086ee:	428b      	cmp	r3, r1
 c0086f0:	bf02      	ittt	eq
 c0086f2:	6819      	ldreq	r1, [r3, #0]
 c0086f4:	685b      	ldreq	r3, [r3, #4]
 c0086f6:	1949      	addeq	r1, r1, r5
 c0086f8:	6063      	str	r3, [r4, #4]
 c0086fa:	bf08      	it	eq
 c0086fc:	6021      	streq	r1, [r4, #0]
 c0086fe:	6054      	str	r4, [r2, #4]
 c008700:	e7ca      	b.n	c008698 <_free_r+0x24>
 c008702:	b003      	add	sp, #12
 c008704:	bd30      	pop	{r4, r5, pc}
 c008706:	bf00      	nop
 c008708:	300004d0 	.word	0x300004d0

0c00870c <sbrk_aligned>:
 c00870c:	b570      	push	{r4, r5, r6, lr}
 c00870e:	4e0e      	ldr	r6, [pc, #56]	; (c008748 <sbrk_aligned+0x3c>)
 c008710:	460c      	mov	r4, r1
 c008712:	4605      	mov	r5, r0
 c008714:	6831      	ldr	r1, [r6, #0]
 c008716:	b911      	cbnz	r1, c00871e <sbrk_aligned+0x12>
 c008718:	f000 fb7c 	bl	c008e14 <_sbrk_r>
 c00871c:	6030      	str	r0, [r6, #0]
 c00871e:	4621      	mov	r1, r4
 c008720:	4628      	mov	r0, r5
 c008722:	f000 fb77 	bl	c008e14 <_sbrk_r>
 c008726:	1c43      	adds	r3, r0, #1
 c008728:	d00a      	beq.n	c008740 <sbrk_aligned+0x34>
 c00872a:	1cc4      	adds	r4, r0, #3
 c00872c:	f024 0403 	bic.w	r4, r4, #3
 c008730:	42a0      	cmp	r0, r4
 c008732:	d007      	beq.n	c008744 <sbrk_aligned+0x38>
 c008734:	1a21      	subs	r1, r4, r0
 c008736:	4628      	mov	r0, r5
 c008738:	f000 fb6c 	bl	c008e14 <_sbrk_r>
 c00873c:	3001      	adds	r0, #1
 c00873e:	d101      	bne.n	c008744 <sbrk_aligned+0x38>
 c008740:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 c008744:	4620      	mov	r0, r4
 c008746:	bd70      	pop	{r4, r5, r6, pc}
 c008748:	300004d4 	.word	0x300004d4

0c00874c <_malloc_r>:
 c00874c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c008750:	1ccd      	adds	r5, r1, #3
 c008752:	4607      	mov	r7, r0
 c008754:	f025 0503 	bic.w	r5, r5, #3
 c008758:	3508      	adds	r5, #8
 c00875a:	2d0c      	cmp	r5, #12
 c00875c:	bf38      	it	cc
 c00875e:	250c      	movcc	r5, #12
 c008760:	2d00      	cmp	r5, #0
 c008762:	db01      	blt.n	c008768 <_malloc_r+0x1c>
 c008764:	42a9      	cmp	r1, r5
 c008766:	d905      	bls.n	c008774 <_malloc_r+0x28>
 c008768:	230c      	movs	r3, #12
 c00876a:	2600      	movs	r6, #0
 c00876c:	603b      	str	r3, [r7, #0]
 c00876e:	4630      	mov	r0, r6
 c008770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c008774:	4e2e      	ldr	r6, [pc, #184]	; (c008830 <_malloc_r+0xe4>)
 c008776:	f000 fdd1 	bl	c00931c <__malloc_lock>
 c00877a:	6833      	ldr	r3, [r6, #0]
 c00877c:	461c      	mov	r4, r3
 c00877e:	bb34      	cbnz	r4, c0087ce <_malloc_r+0x82>
 c008780:	4629      	mov	r1, r5
 c008782:	4638      	mov	r0, r7
 c008784:	f7ff ffc2 	bl	c00870c <sbrk_aligned>
 c008788:	1c43      	adds	r3, r0, #1
 c00878a:	4604      	mov	r4, r0
 c00878c:	d14d      	bne.n	c00882a <_malloc_r+0xde>
 c00878e:	6834      	ldr	r4, [r6, #0]
 c008790:	4626      	mov	r6, r4
 c008792:	2e00      	cmp	r6, #0
 c008794:	d140      	bne.n	c008818 <_malloc_r+0xcc>
 c008796:	6823      	ldr	r3, [r4, #0]
 c008798:	4631      	mov	r1, r6
 c00879a:	4638      	mov	r0, r7
 c00879c:	eb04 0803 	add.w	r8, r4, r3
 c0087a0:	f000 fb38 	bl	c008e14 <_sbrk_r>
 c0087a4:	4580      	cmp	r8, r0
 c0087a6:	d13a      	bne.n	c00881e <_malloc_r+0xd2>
 c0087a8:	6821      	ldr	r1, [r4, #0]
 c0087aa:	3503      	adds	r5, #3
 c0087ac:	4638      	mov	r0, r7
 c0087ae:	1a6d      	subs	r5, r5, r1
 c0087b0:	f025 0503 	bic.w	r5, r5, #3
 c0087b4:	3508      	adds	r5, #8
 c0087b6:	2d0c      	cmp	r5, #12
 c0087b8:	bf38      	it	cc
 c0087ba:	250c      	movcc	r5, #12
 c0087bc:	4629      	mov	r1, r5
 c0087be:	f7ff ffa5 	bl	c00870c <sbrk_aligned>
 c0087c2:	3001      	adds	r0, #1
 c0087c4:	d02b      	beq.n	c00881e <_malloc_r+0xd2>
 c0087c6:	6823      	ldr	r3, [r4, #0]
 c0087c8:	442b      	add	r3, r5
 c0087ca:	6023      	str	r3, [r4, #0]
 c0087cc:	e00e      	b.n	c0087ec <_malloc_r+0xa0>
 c0087ce:	6822      	ldr	r2, [r4, #0]
 c0087d0:	1b52      	subs	r2, r2, r5
 c0087d2:	d41e      	bmi.n	c008812 <_malloc_r+0xc6>
 c0087d4:	2a0b      	cmp	r2, #11
 c0087d6:	d916      	bls.n	c008806 <_malloc_r+0xba>
 c0087d8:	1961      	adds	r1, r4, r5
 c0087da:	42a3      	cmp	r3, r4
 c0087dc:	6025      	str	r5, [r4, #0]
 c0087de:	bf18      	it	ne
 c0087e0:	6059      	strne	r1, [r3, #4]
 c0087e2:	6863      	ldr	r3, [r4, #4]
 c0087e4:	bf08      	it	eq
 c0087e6:	6031      	streq	r1, [r6, #0]
 c0087e8:	5162      	str	r2, [r4, r5]
 c0087ea:	604b      	str	r3, [r1, #4]
 c0087ec:	f104 060b 	add.w	r6, r4, #11
 c0087f0:	4638      	mov	r0, r7
 c0087f2:	f000 fd99 	bl	c009328 <__malloc_unlock>
 c0087f6:	1d23      	adds	r3, r4, #4
 c0087f8:	f026 0607 	bic.w	r6, r6, #7
 c0087fc:	1af2      	subs	r2, r6, r3
 c0087fe:	d0b6      	beq.n	c00876e <_malloc_r+0x22>
 c008800:	1b9b      	subs	r3, r3, r6
 c008802:	50a3      	str	r3, [r4, r2]
 c008804:	e7b3      	b.n	c00876e <_malloc_r+0x22>
 c008806:	6862      	ldr	r2, [r4, #4]
 c008808:	42a3      	cmp	r3, r4
 c00880a:	bf0c      	ite	eq
 c00880c:	6032      	streq	r2, [r6, #0]
 c00880e:	605a      	strne	r2, [r3, #4]
 c008810:	e7ec      	b.n	c0087ec <_malloc_r+0xa0>
 c008812:	4623      	mov	r3, r4
 c008814:	6864      	ldr	r4, [r4, #4]
 c008816:	e7b2      	b.n	c00877e <_malloc_r+0x32>
 c008818:	4634      	mov	r4, r6
 c00881a:	6876      	ldr	r6, [r6, #4]
 c00881c:	e7b9      	b.n	c008792 <_malloc_r+0x46>
 c00881e:	230c      	movs	r3, #12
 c008820:	4638      	mov	r0, r7
 c008822:	603b      	str	r3, [r7, #0]
 c008824:	f000 fd80 	bl	c009328 <__malloc_unlock>
 c008828:	e7a1      	b.n	c00876e <_malloc_r+0x22>
 c00882a:	6025      	str	r5, [r4, #0]
 c00882c:	e7de      	b.n	c0087ec <_malloc_r+0xa0>
 c00882e:	bf00      	nop
 c008830:	300004d0 	.word	0x300004d0

0c008834 <__sfputc_r>:
 c008834:	6893      	ldr	r3, [r2, #8]
 c008836:	3b01      	subs	r3, #1
 c008838:	2b00      	cmp	r3, #0
 c00883a:	6093      	str	r3, [r2, #8]
 c00883c:	b410      	push	{r4}
 c00883e:	da08      	bge.n	c008852 <__sfputc_r+0x1e>
 c008840:	6994      	ldr	r4, [r2, #24]
 c008842:	42a3      	cmp	r3, r4
 c008844:	db01      	blt.n	c00884a <__sfputc_r+0x16>
 c008846:	290a      	cmp	r1, #10
 c008848:	d103      	bne.n	c008852 <__sfputc_r+0x1e>
 c00884a:	f85d 4b04 	ldr.w	r4, [sp], #4
 c00884e:	f000 bb35 	b.w	c008ebc <__swbuf_r>
 c008852:	6813      	ldr	r3, [r2, #0]
 c008854:	1c58      	adds	r0, r3, #1
 c008856:	6010      	str	r0, [r2, #0]
 c008858:	4608      	mov	r0, r1
 c00885a:	7019      	strb	r1, [r3, #0]
 c00885c:	f85d 4b04 	ldr.w	r4, [sp], #4
 c008860:	4770      	bx	lr

0c008862 <__sfputs_r>:
 c008862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c008864:	4606      	mov	r6, r0
 c008866:	460f      	mov	r7, r1
 c008868:	4614      	mov	r4, r2
 c00886a:	18d5      	adds	r5, r2, r3
 c00886c:	42ac      	cmp	r4, r5
 c00886e:	d101      	bne.n	c008874 <__sfputs_r+0x12>
 c008870:	2000      	movs	r0, #0
 c008872:	e007      	b.n	c008884 <__sfputs_r+0x22>
 c008874:	463a      	mov	r2, r7
 c008876:	f814 1b01 	ldrb.w	r1, [r4], #1
 c00887a:	4630      	mov	r0, r6
 c00887c:	f7ff ffda 	bl	c008834 <__sfputc_r>
 c008880:	1c43      	adds	r3, r0, #1
 c008882:	d1f3      	bne.n	c00886c <__sfputs_r+0xa>
 c008884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0c008888 <_vfiprintf_r>:
 c008888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c00888c:	460d      	mov	r5, r1
 c00888e:	b09d      	sub	sp, #116	; 0x74
 c008890:	4614      	mov	r4, r2
 c008892:	4698      	mov	r8, r3
 c008894:	4606      	mov	r6, r0
 c008896:	b118      	cbz	r0, c0088a0 <_vfiprintf_r+0x18>
 c008898:	6983      	ldr	r3, [r0, #24]
 c00889a:	b90b      	cbnz	r3, c0088a0 <_vfiprintf_r+0x18>
 c00889c:	f7ff fe30 	bl	c008500 <__sinit>
 c0088a0:	4b89      	ldr	r3, [pc, #548]	; (c008ac8 <_vfiprintf_r+0x240>)
 c0088a2:	429d      	cmp	r5, r3
 c0088a4:	d11b      	bne.n	c0088de <_vfiprintf_r+0x56>
 c0088a6:	6875      	ldr	r5, [r6, #4]
 c0088a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c0088aa:	07d9      	lsls	r1, r3, #31
 c0088ac:	d405      	bmi.n	c0088ba <_vfiprintf_r+0x32>
 c0088ae:	89ab      	ldrh	r3, [r5, #12]
 c0088b0:	059a      	lsls	r2, r3, #22
 c0088b2:	d402      	bmi.n	c0088ba <_vfiprintf_r+0x32>
 c0088b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c0088b6:	f7ff fed3 	bl	c008660 <__retarget_lock_acquire_recursive>
 c0088ba:	89ab      	ldrh	r3, [r5, #12]
 c0088bc:	071b      	lsls	r3, r3, #28
 c0088be:	d501      	bpl.n	c0088c4 <_vfiprintf_r+0x3c>
 c0088c0:	692b      	ldr	r3, [r5, #16]
 c0088c2:	b9eb      	cbnz	r3, c008900 <_vfiprintf_r+0x78>
 c0088c4:	4629      	mov	r1, r5
 c0088c6:	4630      	mov	r0, r6
 c0088c8:	f000 fb5c 	bl	c008f84 <__swsetup_r>
 c0088cc:	b1c0      	cbz	r0, c008900 <_vfiprintf_r+0x78>
 c0088ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c0088d0:	07dc      	lsls	r4, r3, #31
 c0088d2:	d50e      	bpl.n	c0088f2 <_vfiprintf_r+0x6a>
 c0088d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c0088d8:	b01d      	add	sp, #116	; 0x74
 c0088da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c0088de:	4b7b      	ldr	r3, [pc, #492]	; (c008acc <_vfiprintf_r+0x244>)
 c0088e0:	429d      	cmp	r5, r3
 c0088e2:	d101      	bne.n	c0088e8 <_vfiprintf_r+0x60>
 c0088e4:	68b5      	ldr	r5, [r6, #8]
 c0088e6:	e7df      	b.n	c0088a8 <_vfiprintf_r+0x20>
 c0088e8:	4b79      	ldr	r3, [pc, #484]	; (c008ad0 <_vfiprintf_r+0x248>)
 c0088ea:	429d      	cmp	r5, r3
 c0088ec:	bf08      	it	eq
 c0088ee:	68f5      	ldreq	r5, [r6, #12]
 c0088f0:	e7da      	b.n	c0088a8 <_vfiprintf_r+0x20>
 c0088f2:	89ab      	ldrh	r3, [r5, #12]
 c0088f4:	0598      	lsls	r0, r3, #22
 c0088f6:	d4ed      	bmi.n	c0088d4 <_vfiprintf_r+0x4c>
 c0088f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c0088fa:	f7ff feb2 	bl	c008662 <__retarget_lock_release_recursive>
 c0088fe:	e7e9      	b.n	c0088d4 <_vfiprintf_r+0x4c>
 c008900:	2300      	movs	r3, #0
 c008902:	f8cd 800c 	str.w	r8, [sp, #12]
 c008906:	f04f 0901 	mov.w	r9, #1
 c00890a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; c008ad4 <_vfiprintf_r+0x24c>
 c00890e:	9309      	str	r3, [sp, #36]	; 0x24
 c008910:	2320      	movs	r3, #32
 c008912:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 c008916:	2330      	movs	r3, #48	; 0x30
 c008918:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 c00891c:	4623      	mov	r3, r4
 c00891e:	469a      	mov	sl, r3
 c008920:	f813 2b01 	ldrb.w	r2, [r3], #1
 c008924:	b10a      	cbz	r2, c00892a <_vfiprintf_r+0xa2>
 c008926:	2a25      	cmp	r2, #37	; 0x25
 c008928:	d1f9      	bne.n	c00891e <_vfiprintf_r+0x96>
 c00892a:	ebba 0b04 	subs.w	fp, sl, r4
 c00892e:	d00b      	beq.n	c008948 <_vfiprintf_r+0xc0>
 c008930:	465b      	mov	r3, fp
 c008932:	4622      	mov	r2, r4
 c008934:	4629      	mov	r1, r5
 c008936:	4630      	mov	r0, r6
 c008938:	f7ff ff93 	bl	c008862 <__sfputs_r>
 c00893c:	3001      	adds	r0, #1
 c00893e:	f000 80aa 	beq.w	c008a96 <_vfiprintf_r+0x20e>
 c008942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c008944:	445a      	add	r2, fp
 c008946:	9209      	str	r2, [sp, #36]	; 0x24
 c008948:	f89a 3000 	ldrb.w	r3, [sl]
 c00894c:	2b00      	cmp	r3, #0
 c00894e:	f000 80a2 	beq.w	c008a96 <_vfiprintf_r+0x20e>
 c008952:	2300      	movs	r3, #0
 c008954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c008958:	f10a 0a01 	add.w	sl, sl, #1
 c00895c:	9304      	str	r3, [sp, #16]
 c00895e:	9307      	str	r3, [sp, #28]
 c008960:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 c008964:	931a      	str	r3, [sp, #104]	; 0x68
 c008966:	e9cd 2305 	strd	r2, r3, [sp, #20]
 c00896a:	4654      	mov	r4, sl
 c00896c:	2205      	movs	r2, #5
 c00896e:	4859      	ldr	r0, [pc, #356]	; (c008ad4 <_vfiprintf_r+0x24c>)
 c008970:	f814 1b01 	ldrb.w	r1, [r4], #1
 c008974:	f000 fcc4 	bl	c009300 <memchr>
 c008978:	9a04      	ldr	r2, [sp, #16]
 c00897a:	b9d8      	cbnz	r0, c0089b4 <_vfiprintf_r+0x12c>
 c00897c:	06d1      	lsls	r1, r2, #27
 c00897e:	bf44      	itt	mi
 c008980:	2320      	movmi	r3, #32
 c008982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c008986:	0713      	lsls	r3, r2, #28
 c008988:	bf44      	itt	mi
 c00898a:	232b      	movmi	r3, #43	; 0x2b
 c00898c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c008990:	f89a 3000 	ldrb.w	r3, [sl]
 c008994:	2b2a      	cmp	r3, #42	; 0x2a
 c008996:	d015      	beq.n	c0089c4 <_vfiprintf_r+0x13c>
 c008998:	9a07      	ldr	r2, [sp, #28]
 c00899a:	4654      	mov	r4, sl
 c00899c:	2000      	movs	r0, #0
 c00899e:	f04f 0c0a 	mov.w	ip, #10
 c0089a2:	4621      	mov	r1, r4
 c0089a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 c0089a8:	3b30      	subs	r3, #48	; 0x30
 c0089aa:	2b09      	cmp	r3, #9
 c0089ac:	d94e      	bls.n	c008a4c <_vfiprintf_r+0x1c4>
 c0089ae:	b1b0      	cbz	r0, c0089de <_vfiprintf_r+0x156>
 c0089b0:	9207      	str	r2, [sp, #28]
 c0089b2:	e014      	b.n	c0089de <_vfiprintf_r+0x156>
 c0089b4:	eba0 0308 	sub.w	r3, r0, r8
 c0089b8:	46a2      	mov	sl, r4
 c0089ba:	fa09 f303 	lsl.w	r3, r9, r3
 c0089be:	4313      	orrs	r3, r2
 c0089c0:	9304      	str	r3, [sp, #16]
 c0089c2:	e7d2      	b.n	c00896a <_vfiprintf_r+0xe2>
 c0089c4:	9b03      	ldr	r3, [sp, #12]
 c0089c6:	1d19      	adds	r1, r3, #4
 c0089c8:	681b      	ldr	r3, [r3, #0]
 c0089ca:	2b00      	cmp	r3, #0
 c0089cc:	9103      	str	r1, [sp, #12]
 c0089ce:	bfbb      	ittet	lt
 c0089d0:	425b      	neglt	r3, r3
 c0089d2:	f042 0202 	orrlt.w	r2, r2, #2
 c0089d6:	9307      	strge	r3, [sp, #28]
 c0089d8:	9307      	strlt	r3, [sp, #28]
 c0089da:	bfb8      	it	lt
 c0089dc:	9204      	strlt	r2, [sp, #16]
 c0089de:	7823      	ldrb	r3, [r4, #0]
 c0089e0:	2b2e      	cmp	r3, #46	; 0x2e
 c0089e2:	d10c      	bne.n	c0089fe <_vfiprintf_r+0x176>
 c0089e4:	7863      	ldrb	r3, [r4, #1]
 c0089e6:	2b2a      	cmp	r3, #42	; 0x2a
 c0089e8:	d135      	bne.n	c008a56 <_vfiprintf_r+0x1ce>
 c0089ea:	9b03      	ldr	r3, [sp, #12]
 c0089ec:	3402      	adds	r4, #2
 c0089ee:	1d1a      	adds	r2, r3, #4
 c0089f0:	681b      	ldr	r3, [r3, #0]
 c0089f2:	2b00      	cmp	r3, #0
 c0089f4:	9203      	str	r2, [sp, #12]
 c0089f6:	bfb8      	it	lt
 c0089f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 c0089fc:	9305      	str	r3, [sp, #20]
 c0089fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; c008ae4 <_vfiprintf_r+0x25c>
 c008a02:	2203      	movs	r2, #3
 c008a04:	7821      	ldrb	r1, [r4, #0]
 c008a06:	4650      	mov	r0, sl
 c008a08:	f000 fc7a 	bl	c009300 <memchr>
 c008a0c:	b140      	cbz	r0, c008a20 <_vfiprintf_r+0x198>
 c008a0e:	2340      	movs	r3, #64	; 0x40
 c008a10:	eba0 000a 	sub.w	r0, r0, sl
 c008a14:	3401      	adds	r4, #1
 c008a16:	fa03 f000 	lsl.w	r0, r3, r0
 c008a1a:	9b04      	ldr	r3, [sp, #16]
 c008a1c:	4303      	orrs	r3, r0
 c008a1e:	9304      	str	r3, [sp, #16]
 c008a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 c008a24:	2206      	movs	r2, #6
 c008a26:	482c      	ldr	r0, [pc, #176]	; (c008ad8 <_vfiprintf_r+0x250>)
 c008a28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 c008a2c:	f000 fc68 	bl	c009300 <memchr>
 c008a30:	2800      	cmp	r0, #0
 c008a32:	d03f      	beq.n	c008ab4 <_vfiprintf_r+0x22c>
 c008a34:	4b29      	ldr	r3, [pc, #164]	; (c008adc <_vfiprintf_r+0x254>)
 c008a36:	bb1b      	cbnz	r3, c008a80 <_vfiprintf_r+0x1f8>
 c008a38:	9b03      	ldr	r3, [sp, #12]
 c008a3a:	3307      	adds	r3, #7
 c008a3c:	f023 0307 	bic.w	r3, r3, #7
 c008a40:	3308      	adds	r3, #8
 c008a42:	9303      	str	r3, [sp, #12]
 c008a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c008a46:	443b      	add	r3, r7
 c008a48:	9309      	str	r3, [sp, #36]	; 0x24
 c008a4a:	e767      	b.n	c00891c <_vfiprintf_r+0x94>
 c008a4c:	fb0c 3202 	mla	r2, ip, r2, r3
 c008a50:	460c      	mov	r4, r1
 c008a52:	2001      	movs	r0, #1
 c008a54:	e7a5      	b.n	c0089a2 <_vfiprintf_r+0x11a>
 c008a56:	2300      	movs	r3, #0
 c008a58:	3401      	adds	r4, #1
 c008a5a:	f04f 0c0a 	mov.w	ip, #10
 c008a5e:	4619      	mov	r1, r3
 c008a60:	9305      	str	r3, [sp, #20]
 c008a62:	4620      	mov	r0, r4
 c008a64:	f810 2b01 	ldrb.w	r2, [r0], #1
 c008a68:	3a30      	subs	r2, #48	; 0x30
 c008a6a:	2a09      	cmp	r2, #9
 c008a6c:	d903      	bls.n	c008a76 <_vfiprintf_r+0x1ee>
 c008a6e:	2b00      	cmp	r3, #0
 c008a70:	d0c5      	beq.n	c0089fe <_vfiprintf_r+0x176>
 c008a72:	9105      	str	r1, [sp, #20]
 c008a74:	e7c3      	b.n	c0089fe <_vfiprintf_r+0x176>
 c008a76:	fb0c 2101 	mla	r1, ip, r1, r2
 c008a7a:	4604      	mov	r4, r0
 c008a7c:	2301      	movs	r3, #1
 c008a7e:	e7f0      	b.n	c008a62 <_vfiprintf_r+0x1da>
 c008a80:	ab03      	add	r3, sp, #12
 c008a82:	462a      	mov	r2, r5
 c008a84:	a904      	add	r1, sp, #16
 c008a86:	4630      	mov	r0, r6
 c008a88:	9300      	str	r3, [sp, #0]
 c008a8a:	4b15      	ldr	r3, [pc, #84]	; (c008ae0 <_vfiprintf_r+0x258>)
 c008a8c:	e000      	b.n	c008a90 <_vfiprintf_r+0x208>
 c008a8e:	bf00      	nop
 c008a90:	4607      	mov	r7, r0
 c008a92:	1c78      	adds	r0, r7, #1
 c008a94:	d1d6      	bne.n	c008a44 <_vfiprintf_r+0x1bc>
 c008a96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c008a98:	07d9      	lsls	r1, r3, #31
 c008a9a:	d405      	bmi.n	c008aa8 <_vfiprintf_r+0x220>
 c008a9c:	89ab      	ldrh	r3, [r5, #12]
 c008a9e:	059a      	lsls	r2, r3, #22
 c008aa0:	d402      	bmi.n	c008aa8 <_vfiprintf_r+0x220>
 c008aa2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c008aa4:	f7ff fddd 	bl	c008662 <__retarget_lock_release_recursive>
 c008aa8:	89ab      	ldrh	r3, [r5, #12]
 c008aaa:	065b      	lsls	r3, r3, #25
 c008aac:	f53f af12 	bmi.w	c0088d4 <_vfiprintf_r+0x4c>
 c008ab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 c008ab2:	e711      	b.n	c0088d8 <_vfiprintf_r+0x50>
 c008ab4:	ab03      	add	r3, sp, #12
 c008ab6:	462a      	mov	r2, r5
 c008ab8:	a904      	add	r1, sp, #16
 c008aba:	4630      	mov	r0, r6
 c008abc:	9300      	str	r3, [sp, #0]
 c008abe:	4b08      	ldr	r3, [pc, #32]	; (c008ae0 <_vfiprintf_r+0x258>)
 c008ac0:	f000 f882 	bl	c008bc8 <_printf_i>
 c008ac4:	e7e4      	b.n	c008a90 <_vfiprintf_r+0x208>
 c008ac6:	bf00      	nop
 c008ac8:	0c009674 	.word	0x0c009674
 c008acc:	0c009694 	.word	0x0c009694
 c008ad0:	0c009654 	.word	0x0c009654
 c008ad4:	0c0096b4 	.word	0x0c0096b4
 c008ad8:	0c0096be 	.word	0x0c0096be
 c008adc:	00000000 	.word	0x00000000
 c008ae0:	0c008863 	.word	0x0c008863
 c008ae4:	0c0096ba 	.word	0x0c0096ba

0c008ae8 <_printf_common>:
 c008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c008aec:	4616      	mov	r6, r2
 c008aee:	4699      	mov	r9, r3
 c008af0:	688a      	ldr	r2, [r1, #8]
 c008af2:	4607      	mov	r7, r0
 c008af4:	690b      	ldr	r3, [r1, #16]
 c008af6:	460c      	mov	r4, r1
 c008af8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 c008afc:	4293      	cmp	r3, r2
 c008afe:	bfb8      	it	lt
 c008b00:	4613      	movlt	r3, r2
 c008b02:	6033      	str	r3, [r6, #0]
 c008b04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 c008b08:	b10a      	cbz	r2, c008b0e <_printf_common+0x26>
 c008b0a:	3301      	adds	r3, #1
 c008b0c:	6033      	str	r3, [r6, #0]
 c008b0e:	6823      	ldr	r3, [r4, #0]
 c008b10:	0699      	lsls	r1, r3, #26
 c008b12:	bf42      	ittt	mi
 c008b14:	6833      	ldrmi	r3, [r6, #0]
 c008b16:	3302      	addmi	r3, #2
 c008b18:	6033      	strmi	r3, [r6, #0]
 c008b1a:	6825      	ldr	r5, [r4, #0]
 c008b1c:	f015 0506 	ands.w	r5, r5, #6
 c008b20:	d106      	bne.n	c008b30 <_printf_common+0x48>
 c008b22:	f104 0a19 	add.w	sl, r4, #25
 c008b26:	68e3      	ldr	r3, [r4, #12]
 c008b28:	6832      	ldr	r2, [r6, #0]
 c008b2a:	1a9b      	subs	r3, r3, r2
 c008b2c:	42ab      	cmp	r3, r5
 c008b2e:	dc29      	bgt.n	c008b84 <_printf_common+0x9c>
 c008b30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 c008b34:	1e13      	subs	r3, r2, #0
 c008b36:	6822      	ldr	r2, [r4, #0]
 c008b38:	bf18      	it	ne
 c008b3a:	2301      	movne	r3, #1
 c008b3c:	0692      	lsls	r2, r2, #26
 c008b3e:	d42e      	bmi.n	c008b9e <_printf_common+0xb6>
 c008b40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 c008b44:	4649      	mov	r1, r9
 c008b46:	4638      	mov	r0, r7
 c008b48:	47c0      	blx	r8
 c008b4a:	3001      	adds	r0, #1
 c008b4c:	d021      	beq.n	c008b92 <_printf_common+0xaa>
 c008b4e:	6823      	ldr	r3, [r4, #0]
 c008b50:	341a      	adds	r4, #26
 c008b52:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 c008b56:	f003 0306 	and.w	r3, r3, #6
 c008b5a:	6832      	ldr	r2, [r6, #0]
 c008b5c:	2600      	movs	r6, #0
 c008b5e:	2b04      	cmp	r3, #4
 c008b60:	f854 3c12 	ldr.w	r3, [r4, #-18]
 c008b64:	bf08      	it	eq
 c008b66:	1aad      	subeq	r5, r5, r2
 c008b68:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 c008b6c:	bf14      	ite	ne
 c008b6e:	2500      	movne	r5, #0
 c008b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 c008b74:	4293      	cmp	r3, r2
 c008b76:	bfc4      	itt	gt
 c008b78:	1a9b      	subgt	r3, r3, r2
 c008b7a:	18ed      	addgt	r5, r5, r3
 c008b7c:	42b5      	cmp	r5, r6
 c008b7e:	d11a      	bne.n	c008bb6 <_printf_common+0xce>
 c008b80:	2000      	movs	r0, #0
 c008b82:	e008      	b.n	c008b96 <_printf_common+0xae>
 c008b84:	2301      	movs	r3, #1
 c008b86:	4652      	mov	r2, sl
 c008b88:	4649      	mov	r1, r9
 c008b8a:	4638      	mov	r0, r7
 c008b8c:	47c0      	blx	r8
 c008b8e:	3001      	adds	r0, #1
 c008b90:	d103      	bne.n	c008b9a <_printf_common+0xb2>
 c008b92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c008b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c008b9a:	3501      	adds	r5, #1
 c008b9c:	e7c3      	b.n	c008b26 <_printf_common+0x3e>
 c008b9e:	18e1      	adds	r1, r4, r3
 c008ba0:	1c5a      	adds	r2, r3, #1
 c008ba2:	2030      	movs	r0, #48	; 0x30
 c008ba4:	3302      	adds	r3, #2
 c008ba6:	4422      	add	r2, r4
 c008ba8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 c008bac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 c008bb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 c008bb4:	e7c4      	b.n	c008b40 <_printf_common+0x58>
 c008bb6:	2301      	movs	r3, #1
 c008bb8:	4622      	mov	r2, r4
 c008bba:	4649      	mov	r1, r9
 c008bbc:	4638      	mov	r0, r7
 c008bbe:	47c0      	blx	r8
 c008bc0:	3001      	adds	r0, #1
 c008bc2:	d0e6      	beq.n	c008b92 <_printf_common+0xaa>
 c008bc4:	3601      	adds	r6, #1
 c008bc6:	e7d9      	b.n	c008b7c <_printf_common+0x94>

0c008bc8 <_printf_i>:
 c008bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c008bcc:	7e0f      	ldrb	r7, [r1, #24]
 c008bce:	4691      	mov	r9, r2
 c008bd0:	4680      	mov	r8, r0
 c008bd2:	460c      	mov	r4, r1
 c008bd4:	2f78      	cmp	r7, #120	; 0x78
 c008bd6:	469a      	mov	sl, r3
 c008bd8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 c008bda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 c008bde:	d807      	bhi.n	c008bf0 <_printf_i+0x28>
 c008be0:	2f62      	cmp	r7, #98	; 0x62
 c008be2:	d80a      	bhi.n	c008bfa <_printf_i+0x32>
 c008be4:	2f00      	cmp	r7, #0
 c008be6:	f000 80d8 	beq.w	c008d9a <_printf_i+0x1d2>
 c008bea:	2f58      	cmp	r7, #88	; 0x58
 c008bec:	f000 80a3 	beq.w	c008d36 <_printf_i+0x16e>
 c008bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c008bf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 c008bf8:	e03a      	b.n	c008c70 <_printf_i+0xa8>
 c008bfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 c008bfe:	2b15      	cmp	r3, #21
 c008c00:	d8f6      	bhi.n	c008bf0 <_printf_i+0x28>
 c008c02:	a101      	add	r1, pc, #4	; (adr r1, c008c08 <_printf_i+0x40>)
 c008c04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 c008c08:	0c008c61 	.word	0x0c008c61
 c008c0c:	0c008c75 	.word	0x0c008c75
 c008c10:	0c008bf1 	.word	0x0c008bf1
 c008c14:	0c008bf1 	.word	0x0c008bf1
 c008c18:	0c008bf1 	.word	0x0c008bf1
 c008c1c:	0c008bf1 	.word	0x0c008bf1
 c008c20:	0c008c75 	.word	0x0c008c75
 c008c24:	0c008bf1 	.word	0x0c008bf1
 c008c28:	0c008bf1 	.word	0x0c008bf1
 c008c2c:	0c008bf1 	.word	0x0c008bf1
 c008c30:	0c008bf1 	.word	0x0c008bf1
 c008c34:	0c008d81 	.word	0x0c008d81
 c008c38:	0c008ca5 	.word	0x0c008ca5
 c008c3c:	0c008d63 	.word	0x0c008d63
 c008c40:	0c008bf1 	.word	0x0c008bf1
 c008c44:	0c008bf1 	.word	0x0c008bf1
 c008c48:	0c008da3 	.word	0x0c008da3
 c008c4c:	0c008bf1 	.word	0x0c008bf1
 c008c50:	0c008ca5 	.word	0x0c008ca5
 c008c54:	0c008bf1 	.word	0x0c008bf1
 c008c58:	0c008bf1 	.word	0x0c008bf1
 c008c5c:	0c008d6b 	.word	0x0c008d6b
 c008c60:	682b      	ldr	r3, [r5, #0]
 c008c62:	1d1a      	adds	r2, r3, #4
 c008c64:	681b      	ldr	r3, [r3, #0]
 c008c66:	602a      	str	r2, [r5, #0]
 c008c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c008c6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 c008c70:	2301      	movs	r3, #1
 c008c72:	e0a3      	b.n	c008dbc <_printf_i+0x1f4>
 c008c74:	6820      	ldr	r0, [r4, #0]
 c008c76:	6829      	ldr	r1, [r5, #0]
 c008c78:	0606      	lsls	r6, r0, #24
 c008c7a:	f101 0304 	add.w	r3, r1, #4
 c008c7e:	d50a      	bpl.n	c008c96 <_printf_i+0xce>
 c008c80:	680e      	ldr	r6, [r1, #0]
 c008c82:	602b      	str	r3, [r5, #0]
 c008c84:	2e00      	cmp	r6, #0
 c008c86:	da03      	bge.n	c008c90 <_printf_i+0xc8>
 c008c88:	232d      	movs	r3, #45	; 0x2d
 c008c8a:	4276      	negs	r6, r6
 c008c8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c008c90:	485e      	ldr	r0, [pc, #376]	; (c008e0c <_printf_i+0x244>)
 c008c92:	230a      	movs	r3, #10
 c008c94:	e019      	b.n	c008cca <_printf_i+0x102>
 c008c96:	680e      	ldr	r6, [r1, #0]
 c008c98:	f010 0f40 	tst.w	r0, #64	; 0x40
 c008c9c:	602b      	str	r3, [r5, #0]
 c008c9e:	bf18      	it	ne
 c008ca0:	b236      	sxthne	r6, r6
 c008ca2:	e7ef      	b.n	c008c84 <_printf_i+0xbc>
 c008ca4:	682b      	ldr	r3, [r5, #0]
 c008ca6:	6820      	ldr	r0, [r4, #0]
 c008ca8:	1d19      	adds	r1, r3, #4
 c008caa:	6029      	str	r1, [r5, #0]
 c008cac:	0601      	lsls	r1, r0, #24
 c008cae:	d501      	bpl.n	c008cb4 <_printf_i+0xec>
 c008cb0:	681e      	ldr	r6, [r3, #0]
 c008cb2:	e002      	b.n	c008cba <_printf_i+0xf2>
 c008cb4:	0646      	lsls	r6, r0, #25
 c008cb6:	d5fb      	bpl.n	c008cb0 <_printf_i+0xe8>
 c008cb8:	881e      	ldrh	r6, [r3, #0]
 c008cba:	2f6f      	cmp	r7, #111	; 0x6f
 c008cbc:	4853      	ldr	r0, [pc, #332]	; (c008e0c <_printf_i+0x244>)
 c008cbe:	bf0c      	ite	eq
 c008cc0:	2308      	moveq	r3, #8
 c008cc2:	230a      	movne	r3, #10
 c008cc4:	2100      	movs	r1, #0
 c008cc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 c008cca:	6865      	ldr	r5, [r4, #4]
 c008ccc:	2d00      	cmp	r5, #0
 c008cce:	60a5      	str	r5, [r4, #8]
 c008cd0:	bfa2      	ittt	ge
 c008cd2:	6821      	ldrge	r1, [r4, #0]
 c008cd4:	f021 0104 	bicge.w	r1, r1, #4
 c008cd8:	6021      	strge	r1, [r4, #0]
 c008cda:	b90e      	cbnz	r6, c008ce0 <_printf_i+0x118>
 c008cdc:	2d00      	cmp	r5, #0
 c008cde:	d04d      	beq.n	c008d7c <_printf_i+0x1b4>
 c008ce0:	4615      	mov	r5, r2
 c008ce2:	fbb6 f1f3 	udiv	r1, r6, r3
 c008ce6:	fb03 6711 	mls	r7, r3, r1, r6
 c008cea:	5dc7      	ldrb	r7, [r0, r7]
 c008cec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 c008cf0:	4637      	mov	r7, r6
 c008cf2:	460e      	mov	r6, r1
 c008cf4:	42bb      	cmp	r3, r7
 c008cf6:	d9f4      	bls.n	c008ce2 <_printf_i+0x11a>
 c008cf8:	2b08      	cmp	r3, #8
 c008cfa:	d10b      	bne.n	c008d14 <_printf_i+0x14c>
 c008cfc:	6823      	ldr	r3, [r4, #0]
 c008cfe:	07de      	lsls	r6, r3, #31
 c008d00:	d508      	bpl.n	c008d14 <_printf_i+0x14c>
 c008d02:	6923      	ldr	r3, [r4, #16]
 c008d04:	6861      	ldr	r1, [r4, #4]
 c008d06:	4299      	cmp	r1, r3
 c008d08:	bfde      	ittt	le
 c008d0a:	2330      	movle	r3, #48	; 0x30
 c008d0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 c008d10:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 c008d14:	1b52      	subs	r2, r2, r5
 c008d16:	6122      	str	r2, [r4, #16]
 c008d18:	464b      	mov	r3, r9
 c008d1a:	aa03      	add	r2, sp, #12
 c008d1c:	4621      	mov	r1, r4
 c008d1e:	4640      	mov	r0, r8
 c008d20:	f8cd a000 	str.w	sl, [sp]
 c008d24:	f7ff fee0 	bl	c008ae8 <_printf_common>
 c008d28:	3001      	adds	r0, #1
 c008d2a:	d14c      	bne.n	c008dc6 <_printf_i+0x1fe>
 c008d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c008d30:	b004      	add	sp, #16
 c008d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c008d36:	4835      	ldr	r0, [pc, #212]	; (c008e0c <_printf_i+0x244>)
 c008d38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 c008d3c:	6829      	ldr	r1, [r5, #0]
 c008d3e:	6823      	ldr	r3, [r4, #0]
 c008d40:	f851 6b04 	ldr.w	r6, [r1], #4
 c008d44:	6029      	str	r1, [r5, #0]
 c008d46:	061d      	lsls	r5, r3, #24
 c008d48:	d514      	bpl.n	c008d74 <_printf_i+0x1ac>
 c008d4a:	07df      	lsls	r7, r3, #31
 c008d4c:	bf44      	itt	mi
 c008d4e:	f043 0320 	orrmi.w	r3, r3, #32
 c008d52:	6023      	strmi	r3, [r4, #0]
 c008d54:	b91e      	cbnz	r6, c008d5e <_printf_i+0x196>
 c008d56:	6823      	ldr	r3, [r4, #0]
 c008d58:	f023 0320 	bic.w	r3, r3, #32
 c008d5c:	6023      	str	r3, [r4, #0]
 c008d5e:	2310      	movs	r3, #16
 c008d60:	e7b0      	b.n	c008cc4 <_printf_i+0xfc>
 c008d62:	6823      	ldr	r3, [r4, #0]
 c008d64:	f043 0320 	orr.w	r3, r3, #32
 c008d68:	6023      	str	r3, [r4, #0]
 c008d6a:	2378      	movs	r3, #120	; 0x78
 c008d6c:	4828      	ldr	r0, [pc, #160]	; (c008e10 <_printf_i+0x248>)
 c008d6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 c008d72:	e7e3      	b.n	c008d3c <_printf_i+0x174>
 c008d74:	0659      	lsls	r1, r3, #25
 c008d76:	bf48      	it	mi
 c008d78:	b2b6      	uxthmi	r6, r6
 c008d7a:	e7e6      	b.n	c008d4a <_printf_i+0x182>
 c008d7c:	4615      	mov	r5, r2
 c008d7e:	e7bb      	b.n	c008cf8 <_printf_i+0x130>
 c008d80:	682b      	ldr	r3, [r5, #0]
 c008d82:	6826      	ldr	r6, [r4, #0]
 c008d84:	1d18      	adds	r0, r3, #4
 c008d86:	6961      	ldr	r1, [r4, #20]
 c008d88:	6028      	str	r0, [r5, #0]
 c008d8a:	0635      	lsls	r5, r6, #24
 c008d8c:	681b      	ldr	r3, [r3, #0]
 c008d8e:	d501      	bpl.n	c008d94 <_printf_i+0x1cc>
 c008d90:	6019      	str	r1, [r3, #0]
 c008d92:	e002      	b.n	c008d9a <_printf_i+0x1d2>
 c008d94:	0670      	lsls	r0, r6, #25
 c008d96:	d5fb      	bpl.n	c008d90 <_printf_i+0x1c8>
 c008d98:	8019      	strh	r1, [r3, #0]
 c008d9a:	2300      	movs	r3, #0
 c008d9c:	4615      	mov	r5, r2
 c008d9e:	6123      	str	r3, [r4, #16]
 c008da0:	e7ba      	b.n	c008d18 <_printf_i+0x150>
 c008da2:	682b      	ldr	r3, [r5, #0]
 c008da4:	2100      	movs	r1, #0
 c008da6:	1d1a      	adds	r2, r3, #4
 c008da8:	602a      	str	r2, [r5, #0]
 c008daa:	681d      	ldr	r5, [r3, #0]
 c008dac:	6862      	ldr	r2, [r4, #4]
 c008dae:	4628      	mov	r0, r5
 c008db0:	f000 faa6 	bl	c009300 <memchr>
 c008db4:	b108      	cbz	r0, c008dba <_printf_i+0x1f2>
 c008db6:	1b40      	subs	r0, r0, r5
 c008db8:	6060      	str	r0, [r4, #4]
 c008dba:	6863      	ldr	r3, [r4, #4]
 c008dbc:	6123      	str	r3, [r4, #16]
 c008dbe:	2300      	movs	r3, #0
 c008dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c008dc4:	e7a8      	b.n	c008d18 <_printf_i+0x150>
 c008dc6:	6923      	ldr	r3, [r4, #16]
 c008dc8:	462a      	mov	r2, r5
 c008dca:	4649      	mov	r1, r9
 c008dcc:	4640      	mov	r0, r8
 c008dce:	47d0      	blx	sl
 c008dd0:	3001      	adds	r0, #1
 c008dd2:	d0ab      	beq.n	c008d2c <_printf_i+0x164>
 c008dd4:	6823      	ldr	r3, [r4, #0]
 c008dd6:	079b      	lsls	r3, r3, #30
 c008dd8:	d413      	bmi.n	c008e02 <_printf_i+0x23a>
 c008dda:	68e0      	ldr	r0, [r4, #12]
 c008ddc:	9b03      	ldr	r3, [sp, #12]
 c008dde:	4298      	cmp	r0, r3
 c008de0:	bfb8      	it	lt
 c008de2:	4618      	movlt	r0, r3
 c008de4:	e7a4      	b.n	c008d30 <_printf_i+0x168>
 c008de6:	2301      	movs	r3, #1
 c008de8:	4632      	mov	r2, r6
 c008dea:	4649      	mov	r1, r9
 c008dec:	4640      	mov	r0, r8
 c008dee:	47d0      	blx	sl
 c008df0:	3001      	adds	r0, #1
 c008df2:	d09b      	beq.n	c008d2c <_printf_i+0x164>
 c008df4:	3501      	adds	r5, #1
 c008df6:	68e3      	ldr	r3, [r4, #12]
 c008df8:	9903      	ldr	r1, [sp, #12]
 c008dfa:	1a5b      	subs	r3, r3, r1
 c008dfc:	42ab      	cmp	r3, r5
 c008dfe:	dcf2      	bgt.n	c008de6 <_printf_i+0x21e>
 c008e00:	e7eb      	b.n	c008dda <_printf_i+0x212>
 c008e02:	2500      	movs	r5, #0
 c008e04:	f104 0619 	add.w	r6, r4, #25
 c008e08:	e7f5      	b.n	c008df6 <_printf_i+0x22e>
 c008e0a:	bf00      	nop
 c008e0c:	0c0096c5 	.word	0x0c0096c5
 c008e10:	0c0096d6 	.word	0x0c0096d6

0c008e14 <_sbrk_r>:
 c008e14:	b538      	push	{r3, r4, r5, lr}
 c008e16:	2300      	movs	r3, #0
 c008e18:	4d05      	ldr	r5, [pc, #20]	; (c008e30 <_sbrk_r+0x1c>)
 c008e1a:	4604      	mov	r4, r0
 c008e1c:	4608      	mov	r0, r1
 c008e1e:	602b      	str	r3, [r5, #0]
 c008e20:	f7f9 fb8e 	bl	c002540 <_sbrk>
 c008e24:	1c43      	adds	r3, r0, #1
 c008e26:	d102      	bne.n	c008e2e <_sbrk_r+0x1a>
 c008e28:	682b      	ldr	r3, [r5, #0]
 c008e2a:	b103      	cbz	r3, c008e2e <_sbrk_r+0x1a>
 c008e2c:	6023      	str	r3, [r4, #0]
 c008e2e:	bd38      	pop	{r3, r4, r5, pc}
 c008e30:	300004d8 	.word	0x300004d8

0c008e34 <__sread>:
 c008e34:	b510      	push	{r4, lr}
 c008e36:	460c      	mov	r4, r1
 c008e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c008e3c:	f000 fa7a 	bl	c009334 <_read_r>
 c008e40:	2800      	cmp	r0, #0
 c008e42:	bfab      	itete	ge
 c008e44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 c008e46:	89a3      	ldrhlt	r3, [r4, #12]
 c008e48:	181b      	addge	r3, r3, r0
 c008e4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 c008e4e:	bfac      	ite	ge
 c008e50:	6563      	strge	r3, [r4, #84]	; 0x54
 c008e52:	81a3      	strhlt	r3, [r4, #12]
 c008e54:	bd10      	pop	{r4, pc}

0c008e56 <__swrite>:
 c008e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c008e5a:	461f      	mov	r7, r3
 c008e5c:	898b      	ldrh	r3, [r1, #12]
 c008e5e:	4605      	mov	r5, r0
 c008e60:	460c      	mov	r4, r1
 c008e62:	05db      	lsls	r3, r3, #23
 c008e64:	4616      	mov	r6, r2
 c008e66:	d505      	bpl.n	c008e74 <__swrite+0x1e>
 c008e68:	2302      	movs	r3, #2
 c008e6a:	2200      	movs	r2, #0
 c008e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c008e70:	f000 f9ce 	bl	c009210 <_lseek_r>
 c008e74:	89a3      	ldrh	r3, [r4, #12]
 c008e76:	4632      	mov	r2, r6
 c008e78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c008e7c:	4628      	mov	r0, r5
 c008e7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 c008e82:	81a3      	strh	r3, [r4, #12]
 c008e84:	463b      	mov	r3, r7
 c008e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 c008e8a:	f000 b869 	b.w	c008f60 <_write_r>

0c008e8e <__sseek>:
 c008e8e:	b510      	push	{r4, lr}
 c008e90:	460c      	mov	r4, r1
 c008e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c008e96:	f000 f9bb 	bl	c009210 <_lseek_r>
 c008e9a:	1c43      	adds	r3, r0, #1
 c008e9c:	89a3      	ldrh	r3, [r4, #12]
 c008e9e:	bf15      	itete	ne
 c008ea0:	6560      	strne	r0, [r4, #84]	; 0x54
 c008ea2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 c008ea6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 c008eaa:	81a3      	strheq	r3, [r4, #12]
 c008eac:	bf18      	it	ne
 c008eae:	81a3      	strhne	r3, [r4, #12]
 c008eb0:	bd10      	pop	{r4, pc}

0c008eb2 <__sclose>:
 c008eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c008eb6:	f000 b8db 	b.w	c009070 <_close_r>
	...

0c008ebc <__swbuf_r>:
 c008ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c008ebe:	460e      	mov	r6, r1
 c008ec0:	4614      	mov	r4, r2
 c008ec2:	4605      	mov	r5, r0
 c008ec4:	b118      	cbz	r0, c008ece <__swbuf_r+0x12>
 c008ec6:	6983      	ldr	r3, [r0, #24]
 c008ec8:	b90b      	cbnz	r3, c008ece <__swbuf_r+0x12>
 c008eca:	f7ff fb19 	bl	c008500 <__sinit>
 c008ece:	4b21      	ldr	r3, [pc, #132]	; (c008f54 <__swbuf_r+0x98>)
 c008ed0:	429c      	cmp	r4, r3
 c008ed2:	d12b      	bne.n	c008f2c <__swbuf_r+0x70>
 c008ed4:	686c      	ldr	r4, [r5, #4]
 c008ed6:	69a3      	ldr	r3, [r4, #24]
 c008ed8:	60a3      	str	r3, [r4, #8]
 c008eda:	89a3      	ldrh	r3, [r4, #12]
 c008edc:	071a      	lsls	r2, r3, #28
 c008ede:	d52f      	bpl.n	c008f40 <__swbuf_r+0x84>
 c008ee0:	6923      	ldr	r3, [r4, #16]
 c008ee2:	b36b      	cbz	r3, c008f40 <__swbuf_r+0x84>
 c008ee4:	6923      	ldr	r3, [r4, #16]
 c008ee6:	b2f6      	uxtb	r6, r6
 c008ee8:	6820      	ldr	r0, [r4, #0]
 c008eea:	4637      	mov	r7, r6
 c008eec:	1ac0      	subs	r0, r0, r3
 c008eee:	6963      	ldr	r3, [r4, #20]
 c008ef0:	4283      	cmp	r3, r0
 c008ef2:	dc04      	bgt.n	c008efe <__swbuf_r+0x42>
 c008ef4:	4621      	mov	r1, r4
 c008ef6:	4628      	mov	r0, r5
 c008ef8:	f000 f94e 	bl	c009198 <_fflush_r>
 c008efc:	bb30      	cbnz	r0, c008f4c <__swbuf_r+0x90>
 c008efe:	68a3      	ldr	r3, [r4, #8]
 c008f00:	3001      	adds	r0, #1
 c008f02:	3b01      	subs	r3, #1
 c008f04:	60a3      	str	r3, [r4, #8]
 c008f06:	6823      	ldr	r3, [r4, #0]
 c008f08:	1c5a      	adds	r2, r3, #1
 c008f0a:	6022      	str	r2, [r4, #0]
 c008f0c:	701e      	strb	r6, [r3, #0]
 c008f0e:	6963      	ldr	r3, [r4, #20]
 c008f10:	4283      	cmp	r3, r0
 c008f12:	d004      	beq.n	c008f1e <__swbuf_r+0x62>
 c008f14:	89a3      	ldrh	r3, [r4, #12]
 c008f16:	07db      	lsls	r3, r3, #31
 c008f18:	d506      	bpl.n	c008f28 <__swbuf_r+0x6c>
 c008f1a:	2e0a      	cmp	r6, #10
 c008f1c:	d104      	bne.n	c008f28 <__swbuf_r+0x6c>
 c008f1e:	4621      	mov	r1, r4
 c008f20:	4628      	mov	r0, r5
 c008f22:	f000 f939 	bl	c009198 <_fflush_r>
 c008f26:	b988      	cbnz	r0, c008f4c <__swbuf_r+0x90>
 c008f28:	4638      	mov	r0, r7
 c008f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c008f2c:	4b0a      	ldr	r3, [pc, #40]	; (c008f58 <__swbuf_r+0x9c>)
 c008f2e:	429c      	cmp	r4, r3
 c008f30:	d101      	bne.n	c008f36 <__swbuf_r+0x7a>
 c008f32:	68ac      	ldr	r4, [r5, #8]
 c008f34:	e7cf      	b.n	c008ed6 <__swbuf_r+0x1a>
 c008f36:	4b09      	ldr	r3, [pc, #36]	; (c008f5c <__swbuf_r+0xa0>)
 c008f38:	429c      	cmp	r4, r3
 c008f3a:	bf08      	it	eq
 c008f3c:	68ec      	ldreq	r4, [r5, #12]
 c008f3e:	e7ca      	b.n	c008ed6 <__swbuf_r+0x1a>
 c008f40:	4621      	mov	r1, r4
 c008f42:	4628      	mov	r0, r5
 c008f44:	f000 f81e 	bl	c008f84 <__swsetup_r>
 c008f48:	2800      	cmp	r0, #0
 c008f4a:	d0cb      	beq.n	c008ee4 <__swbuf_r+0x28>
 c008f4c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 c008f50:	e7ea      	b.n	c008f28 <__swbuf_r+0x6c>
 c008f52:	bf00      	nop
 c008f54:	0c009674 	.word	0x0c009674
 c008f58:	0c009694 	.word	0x0c009694
 c008f5c:	0c009654 	.word	0x0c009654

0c008f60 <_write_r>:
 c008f60:	b538      	push	{r3, r4, r5, lr}
 c008f62:	4604      	mov	r4, r0
 c008f64:	4d06      	ldr	r5, [pc, #24]	; (c008f80 <_write_r+0x20>)
 c008f66:	4608      	mov	r0, r1
 c008f68:	4611      	mov	r1, r2
 c008f6a:	2200      	movs	r2, #0
 c008f6c:	602a      	str	r2, [r5, #0]
 c008f6e:	461a      	mov	r2, r3
 c008f70:	f7f9 fa96 	bl	c0024a0 <_write>
 c008f74:	1c43      	adds	r3, r0, #1
 c008f76:	d102      	bne.n	c008f7e <_write_r+0x1e>
 c008f78:	682b      	ldr	r3, [r5, #0]
 c008f7a:	b103      	cbz	r3, c008f7e <_write_r+0x1e>
 c008f7c:	6023      	str	r3, [r4, #0]
 c008f7e:	bd38      	pop	{r3, r4, r5, pc}
 c008f80:	300004d8 	.word	0x300004d8

0c008f84 <__swsetup_r>:
 c008f84:	4b32      	ldr	r3, [pc, #200]	; (c009050 <__swsetup_r+0xcc>)
 c008f86:	b570      	push	{r4, r5, r6, lr}
 c008f88:	681d      	ldr	r5, [r3, #0]
 c008f8a:	4606      	mov	r6, r0
 c008f8c:	460c      	mov	r4, r1
 c008f8e:	b125      	cbz	r5, c008f9a <__swsetup_r+0x16>
 c008f90:	69ab      	ldr	r3, [r5, #24]
 c008f92:	b913      	cbnz	r3, c008f9a <__swsetup_r+0x16>
 c008f94:	4628      	mov	r0, r5
 c008f96:	f7ff fab3 	bl	c008500 <__sinit>
 c008f9a:	4b2e      	ldr	r3, [pc, #184]	; (c009054 <__swsetup_r+0xd0>)
 c008f9c:	429c      	cmp	r4, r3
 c008f9e:	d10f      	bne.n	c008fc0 <__swsetup_r+0x3c>
 c008fa0:	686c      	ldr	r4, [r5, #4]
 c008fa2:	89a3      	ldrh	r3, [r4, #12]
 c008fa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c008fa8:	0719      	lsls	r1, r3, #28
 c008faa:	d42c      	bmi.n	c009006 <__swsetup_r+0x82>
 c008fac:	06dd      	lsls	r5, r3, #27
 c008fae:	d411      	bmi.n	c008fd4 <__swsetup_r+0x50>
 c008fb0:	2309      	movs	r3, #9
 c008fb2:	6033      	str	r3, [r6, #0]
 c008fb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 c008fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c008fbc:	81a3      	strh	r3, [r4, #12]
 c008fbe:	e03e      	b.n	c00903e <__swsetup_r+0xba>
 c008fc0:	4b25      	ldr	r3, [pc, #148]	; (c009058 <__swsetup_r+0xd4>)
 c008fc2:	429c      	cmp	r4, r3
 c008fc4:	d101      	bne.n	c008fca <__swsetup_r+0x46>
 c008fc6:	68ac      	ldr	r4, [r5, #8]
 c008fc8:	e7eb      	b.n	c008fa2 <__swsetup_r+0x1e>
 c008fca:	4b24      	ldr	r3, [pc, #144]	; (c00905c <__swsetup_r+0xd8>)
 c008fcc:	429c      	cmp	r4, r3
 c008fce:	bf08      	it	eq
 c008fd0:	68ec      	ldreq	r4, [r5, #12]
 c008fd2:	e7e6      	b.n	c008fa2 <__swsetup_r+0x1e>
 c008fd4:	0758      	lsls	r0, r3, #29
 c008fd6:	d512      	bpl.n	c008ffe <__swsetup_r+0x7a>
 c008fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c008fda:	b141      	cbz	r1, c008fee <__swsetup_r+0x6a>
 c008fdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c008fe0:	4299      	cmp	r1, r3
 c008fe2:	d002      	beq.n	c008fea <__swsetup_r+0x66>
 c008fe4:	4630      	mov	r0, r6
 c008fe6:	f7ff fb45 	bl	c008674 <_free_r>
 c008fea:	2300      	movs	r3, #0
 c008fec:	6363      	str	r3, [r4, #52]	; 0x34
 c008fee:	89a3      	ldrh	r3, [r4, #12]
 c008ff0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 c008ff4:	81a3      	strh	r3, [r4, #12]
 c008ff6:	2300      	movs	r3, #0
 c008ff8:	6063      	str	r3, [r4, #4]
 c008ffa:	6923      	ldr	r3, [r4, #16]
 c008ffc:	6023      	str	r3, [r4, #0]
 c008ffe:	89a3      	ldrh	r3, [r4, #12]
 c009000:	f043 0308 	orr.w	r3, r3, #8
 c009004:	81a3      	strh	r3, [r4, #12]
 c009006:	6923      	ldr	r3, [r4, #16]
 c009008:	b94b      	cbnz	r3, c00901e <__swsetup_r+0x9a>
 c00900a:	89a3      	ldrh	r3, [r4, #12]
 c00900c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 c009010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c009014:	d003      	beq.n	c00901e <__swsetup_r+0x9a>
 c009016:	4621      	mov	r1, r4
 c009018:	4630      	mov	r0, r6
 c00901a:	f000 f931 	bl	c009280 <__smakebuf_r>
 c00901e:	89a0      	ldrh	r0, [r4, #12]
 c009020:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c009024:	f010 0301 	ands.w	r3, r0, #1
 c009028:	d00a      	beq.n	c009040 <__swsetup_r+0xbc>
 c00902a:	2300      	movs	r3, #0
 c00902c:	60a3      	str	r3, [r4, #8]
 c00902e:	6963      	ldr	r3, [r4, #20]
 c009030:	425b      	negs	r3, r3
 c009032:	61a3      	str	r3, [r4, #24]
 c009034:	6923      	ldr	r3, [r4, #16]
 c009036:	b943      	cbnz	r3, c00904a <__swsetup_r+0xc6>
 c009038:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 c00903c:	d1ba      	bne.n	c008fb4 <__swsetup_r+0x30>
 c00903e:	bd70      	pop	{r4, r5, r6, pc}
 c009040:	0781      	lsls	r1, r0, #30
 c009042:	bf58      	it	pl
 c009044:	6963      	ldrpl	r3, [r4, #20]
 c009046:	60a3      	str	r3, [r4, #8]
 c009048:	e7f4      	b.n	c009034 <__swsetup_r+0xb0>
 c00904a:	2000      	movs	r0, #0
 c00904c:	e7f7      	b.n	c00903e <__swsetup_r+0xba>
 c00904e:	bf00      	nop
 c009050:	30000074 	.word	0x30000074
 c009054:	0c009674 	.word	0x0c009674
 c009058:	0c009694 	.word	0x0c009694
 c00905c:	0c009654 	.word	0x0c009654

0c009060 <abort>:
 c009060:	2006      	movs	r0, #6
 c009062:	b508      	push	{r3, lr}
 c009064:	f000 f9a0 	bl	c0093a8 <raise>
 c009068:	2001      	movs	r0, #1
 c00906a:	f7f9 f9f2 	bl	c002452 <_exit>
	...

0c009070 <_close_r>:
 c009070:	b538      	push	{r3, r4, r5, lr}
 c009072:	2300      	movs	r3, #0
 c009074:	4d05      	ldr	r5, [pc, #20]	; (c00908c <_close_r+0x1c>)
 c009076:	4604      	mov	r4, r0
 c009078:	4608      	mov	r0, r1
 c00907a:	602b      	str	r3, [r5, #0]
 c00907c:	f7f9 fa2c 	bl	c0024d8 <_close>
 c009080:	1c43      	adds	r3, r0, #1
 c009082:	d102      	bne.n	c00908a <_close_r+0x1a>
 c009084:	682b      	ldr	r3, [r5, #0]
 c009086:	b103      	cbz	r3, c00908a <_close_r+0x1a>
 c009088:	6023      	str	r3, [r4, #0]
 c00908a:	bd38      	pop	{r3, r4, r5, pc}
 c00908c:	300004d8 	.word	0x300004d8

0c009090 <__sflush_r>:
 c009090:	898a      	ldrh	r2, [r1, #12]
 c009092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c009096:	4605      	mov	r5, r0
 c009098:	0710      	lsls	r0, r2, #28
 c00909a:	460c      	mov	r4, r1
 c00909c:	d458      	bmi.n	c009150 <__sflush_r+0xc0>
 c00909e:	684b      	ldr	r3, [r1, #4]
 c0090a0:	2b00      	cmp	r3, #0
 c0090a2:	dc05      	bgt.n	c0090b0 <__sflush_r+0x20>
 c0090a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 c0090a6:	2b00      	cmp	r3, #0
 c0090a8:	dc02      	bgt.n	c0090b0 <__sflush_r+0x20>
 c0090aa:	2000      	movs	r0, #0
 c0090ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c0090b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c0090b2:	2e00      	cmp	r6, #0
 c0090b4:	d0f9      	beq.n	c0090aa <__sflush_r+0x1a>
 c0090b6:	2300      	movs	r3, #0
 c0090b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 c0090bc:	682f      	ldr	r7, [r5, #0]
 c0090be:	602b      	str	r3, [r5, #0]
 c0090c0:	d032      	beq.n	c009128 <__sflush_r+0x98>
 c0090c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 c0090c4:	89a3      	ldrh	r3, [r4, #12]
 c0090c6:	075a      	lsls	r2, r3, #29
 c0090c8:	d505      	bpl.n	c0090d6 <__sflush_r+0x46>
 c0090ca:	6863      	ldr	r3, [r4, #4]
 c0090cc:	1ac0      	subs	r0, r0, r3
 c0090ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 c0090d0:	b10b      	cbz	r3, c0090d6 <__sflush_r+0x46>
 c0090d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 c0090d4:	1ac0      	subs	r0, r0, r3
 c0090d6:	2300      	movs	r3, #0
 c0090d8:	4602      	mov	r2, r0
 c0090da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c0090dc:	4628      	mov	r0, r5
 c0090de:	6a21      	ldr	r1, [r4, #32]
 c0090e0:	47b0      	blx	r6
 c0090e2:	1c43      	adds	r3, r0, #1
 c0090e4:	89a3      	ldrh	r3, [r4, #12]
 c0090e6:	d106      	bne.n	c0090f6 <__sflush_r+0x66>
 c0090e8:	6829      	ldr	r1, [r5, #0]
 c0090ea:	291d      	cmp	r1, #29
 c0090ec:	d82c      	bhi.n	c009148 <__sflush_r+0xb8>
 c0090ee:	4a29      	ldr	r2, [pc, #164]	; (c009194 <__sflush_r+0x104>)
 c0090f0:	40ca      	lsrs	r2, r1
 c0090f2:	07d6      	lsls	r6, r2, #31
 c0090f4:	d528      	bpl.n	c009148 <__sflush_r+0xb8>
 c0090f6:	2200      	movs	r2, #0
 c0090f8:	04d9      	lsls	r1, r3, #19
 c0090fa:	6062      	str	r2, [r4, #4]
 c0090fc:	6922      	ldr	r2, [r4, #16]
 c0090fe:	6022      	str	r2, [r4, #0]
 c009100:	d504      	bpl.n	c00910c <__sflush_r+0x7c>
 c009102:	1c42      	adds	r2, r0, #1
 c009104:	d101      	bne.n	c00910a <__sflush_r+0x7a>
 c009106:	682b      	ldr	r3, [r5, #0]
 c009108:	b903      	cbnz	r3, c00910c <__sflush_r+0x7c>
 c00910a:	6560      	str	r0, [r4, #84]	; 0x54
 c00910c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c00910e:	602f      	str	r7, [r5, #0]
 c009110:	2900      	cmp	r1, #0
 c009112:	d0ca      	beq.n	c0090aa <__sflush_r+0x1a>
 c009114:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c009118:	4299      	cmp	r1, r3
 c00911a:	d002      	beq.n	c009122 <__sflush_r+0x92>
 c00911c:	4628      	mov	r0, r5
 c00911e:	f7ff faa9 	bl	c008674 <_free_r>
 c009122:	2000      	movs	r0, #0
 c009124:	6360      	str	r0, [r4, #52]	; 0x34
 c009126:	e7c1      	b.n	c0090ac <__sflush_r+0x1c>
 c009128:	6a21      	ldr	r1, [r4, #32]
 c00912a:	2301      	movs	r3, #1
 c00912c:	4628      	mov	r0, r5
 c00912e:	47b0      	blx	r6
 c009130:	1c41      	adds	r1, r0, #1
 c009132:	d1c7      	bne.n	c0090c4 <__sflush_r+0x34>
 c009134:	682b      	ldr	r3, [r5, #0]
 c009136:	2b00      	cmp	r3, #0
 c009138:	d0c4      	beq.n	c0090c4 <__sflush_r+0x34>
 c00913a:	2b1d      	cmp	r3, #29
 c00913c:	d001      	beq.n	c009142 <__sflush_r+0xb2>
 c00913e:	2b16      	cmp	r3, #22
 c009140:	d101      	bne.n	c009146 <__sflush_r+0xb6>
 c009142:	602f      	str	r7, [r5, #0]
 c009144:	e7b1      	b.n	c0090aa <__sflush_r+0x1a>
 c009146:	89a3      	ldrh	r3, [r4, #12]
 c009148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c00914c:	81a3      	strh	r3, [r4, #12]
 c00914e:	e7ad      	b.n	c0090ac <__sflush_r+0x1c>
 c009150:	690f      	ldr	r7, [r1, #16]
 c009152:	2f00      	cmp	r7, #0
 c009154:	d0a9      	beq.n	c0090aa <__sflush_r+0x1a>
 c009156:	0793      	lsls	r3, r2, #30
 c009158:	680e      	ldr	r6, [r1, #0]
 c00915a:	600f      	str	r7, [r1, #0]
 c00915c:	bf0c      	ite	eq
 c00915e:	694b      	ldreq	r3, [r1, #20]
 c009160:	2300      	movne	r3, #0
 c009162:	eba6 0807 	sub.w	r8, r6, r7
 c009166:	608b      	str	r3, [r1, #8]
 c009168:	f1b8 0f00 	cmp.w	r8, #0
 c00916c:	dd9d      	ble.n	c0090aa <__sflush_r+0x1a>
 c00916e:	4643      	mov	r3, r8
 c009170:	463a      	mov	r2, r7
 c009172:	6a21      	ldr	r1, [r4, #32]
 c009174:	4628      	mov	r0, r5
 c009176:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 c009178:	47b0      	blx	r6
 c00917a:	2800      	cmp	r0, #0
 c00917c:	dc06      	bgt.n	c00918c <__sflush_r+0xfc>
 c00917e:	89a3      	ldrh	r3, [r4, #12]
 c009180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c009184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c009188:	81a3      	strh	r3, [r4, #12]
 c00918a:	e78f      	b.n	c0090ac <__sflush_r+0x1c>
 c00918c:	4407      	add	r7, r0
 c00918e:	eba8 0800 	sub.w	r8, r8, r0
 c009192:	e7e9      	b.n	c009168 <__sflush_r+0xd8>
 c009194:	20400001 	.word	0x20400001

0c009198 <_fflush_r>:
 c009198:	b538      	push	{r3, r4, r5, lr}
 c00919a:	690b      	ldr	r3, [r1, #16]
 c00919c:	4605      	mov	r5, r0
 c00919e:	460c      	mov	r4, r1
 c0091a0:	b913      	cbnz	r3, c0091a8 <_fflush_r+0x10>
 c0091a2:	2500      	movs	r5, #0
 c0091a4:	4628      	mov	r0, r5
 c0091a6:	bd38      	pop	{r3, r4, r5, pc}
 c0091a8:	b118      	cbz	r0, c0091b2 <_fflush_r+0x1a>
 c0091aa:	6983      	ldr	r3, [r0, #24]
 c0091ac:	b90b      	cbnz	r3, c0091b2 <_fflush_r+0x1a>
 c0091ae:	f7ff f9a7 	bl	c008500 <__sinit>
 c0091b2:	4b14      	ldr	r3, [pc, #80]	; (c009204 <_fflush_r+0x6c>)
 c0091b4:	429c      	cmp	r4, r3
 c0091b6:	d11b      	bne.n	c0091f0 <_fflush_r+0x58>
 c0091b8:	686c      	ldr	r4, [r5, #4]
 c0091ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c0091be:	2b00      	cmp	r3, #0
 c0091c0:	d0ef      	beq.n	c0091a2 <_fflush_r+0xa>
 c0091c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 c0091c4:	07d0      	lsls	r0, r2, #31
 c0091c6:	d404      	bmi.n	c0091d2 <_fflush_r+0x3a>
 c0091c8:	0599      	lsls	r1, r3, #22
 c0091ca:	d402      	bmi.n	c0091d2 <_fflush_r+0x3a>
 c0091cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c0091ce:	f7ff fa47 	bl	c008660 <__retarget_lock_acquire_recursive>
 c0091d2:	4628      	mov	r0, r5
 c0091d4:	4621      	mov	r1, r4
 c0091d6:	f7ff ff5b 	bl	c009090 <__sflush_r>
 c0091da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c0091dc:	4605      	mov	r5, r0
 c0091de:	07da      	lsls	r2, r3, #31
 c0091e0:	d4e0      	bmi.n	c0091a4 <_fflush_r+0xc>
 c0091e2:	89a3      	ldrh	r3, [r4, #12]
 c0091e4:	059b      	lsls	r3, r3, #22
 c0091e6:	d4dd      	bmi.n	c0091a4 <_fflush_r+0xc>
 c0091e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c0091ea:	f7ff fa3a 	bl	c008662 <__retarget_lock_release_recursive>
 c0091ee:	e7d9      	b.n	c0091a4 <_fflush_r+0xc>
 c0091f0:	4b05      	ldr	r3, [pc, #20]	; (c009208 <_fflush_r+0x70>)
 c0091f2:	429c      	cmp	r4, r3
 c0091f4:	d101      	bne.n	c0091fa <_fflush_r+0x62>
 c0091f6:	68ac      	ldr	r4, [r5, #8]
 c0091f8:	e7df      	b.n	c0091ba <_fflush_r+0x22>
 c0091fa:	4b04      	ldr	r3, [pc, #16]	; (c00920c <_fflush_r+0x74>)
 c0091fc:	429c      	cmp	r4, r3
 c0091fe:	bf08      	it	eq
 c009200:	68ec      	ldreq	r4, [r5, #12]
 c009202:	e7da      	b.n	c0091ba <_fflush_r+0x22>
 c009204:	0c009674 	.word	0x0c009674
 c009208:	0c009694 	.word	0x0c009694
 c00920c:	0c009654 	.word	0x0c009654

0c009210 <_lseek_r>:
 c009210:	b538      	push	{r3, r4, r5, lr}
 c009212:	4604      	mov	r4, r0
 c009214:	4d06      	ldr	r5, [pc, #24]	; (c009230 <_lseek_r+0x20>)
 c009216:	4608      	mov	r0, r1
 c009218:	4611      	mov	r1, r2
 c00921a:	2200      	movs	r2, #0
 c00921c:	602a      	str	r2, [r5, #0]
 c00921e:	461a      	mov	r2, r3
 c009220:	f7f9 f981 	bl	c002526 <_lseek>
 c009224:	1c43      	adds	r3, r0, #1
 c009226:	d102      	bne.n	c00922e <_lseek_r+0x1e>
 c009228:	682b      	ldr	r3, [r5, #0]
 c00922a:	b103      	cbz	r3, c00922e <_lseek_r+0x1e>
 c00922c:	6023      	str	r3, [r4, #0]
 c00922e:	bd38      	pop	{r3, r4, r5, pc}
 c009230:	300004d8 	.word	0x300004d8

0c009234 <__swhatbuf_r>:
 c009234:	b570      	push	{r4, r5, r6, lr}
 c009236:	460e      	mov	r6, r1
 c009238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c00923c:	b096      	sub	sp, #88	; 0x58
 c00923e:	4614      	mov	r4, r2
 c009240:	2900      	cmp	r1, #0
 c009242:	461d      	mov	r5, r3
 c009244:	da08      	bge.n	c009258 <__swhatbuf_r+0x24>
 c009246:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 c00924a:	2200      	movs	r2, #0
 c00924c:	602a      	str	r2, [r5, #0]
 c00924e:	061a      	lsls	r2, r3, #24
 c009250:	d410      	bmi.n	c009274 <__swhatbuf_r+0x40>
 c009252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c009256:	e00e      	b.n	c009276 <__swhatbuf_r+0x42>
 c009258:	466a      	mov	r2, sp
 c00925a:	f000 f8c1 	bl	c0093e0 <_fstat_r>
 c00925e:	2800      	cmp	r0, #0
 c009260:	dbf1      	blt.n	c009246 <__swhatbuf_r+0x12>
 c009262:	9a01      	ldr	r2, [sp, #4]
 c009264:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 c009268:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 c00926c:	425a      	negs	r2, r3
 c00926e:	415a      	adcs	r2, r3
 c009270:	602a      	str	r2, [r5, #0]
 c009272:	e7ee      	b.n	c009252 <__swhatbuf_r+0x1e>
 c009274:	2340      	movs	r3, #64	; 0x40
 c009276:	2000      	movs	r0, #0
 c009278:	6023      	str	r3, [r4, #0]
 c00927a:	b016      	add	sp, #88	; 0x58
 c00927c:	bd70      	pop	{r4, r5, r6, pc}
	...

0c009280 <__smakebuf_r>:
 c009280:	898b      	ldrh	r3, [r1, #12]
 c009282:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c009284:	079d      	lsls	r5, r3, #30
 c009286:	4606      	mov	r6, r0
 c009288:	460c      	mov	r4, r1
 c00928a:	d507      	bpl.n	c00929c <__smakebuf_r+0x1c>
 c00928c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 c009290:	6023      	str	r3, [r4, #0]
 c009292:	6123      	str	r3, [r4, #16]
 c009294:	2301      	movs	r3, #1
 c009296:	6163      	str	r3, [r4, #20]
 c009298:	b002      	add	sp, #8
 c00929a:	bd70      	pop	{r4, r5, r6, pc}
 c00929c:	ab01      	add	r3, sp, #4
 c00929e:	466a      	mov	r2, sp
 c0092a0:	f7ff ffc8 	bl	c009234 <__swhatbuf_r>
 c0092a4:	9900      	ldr	r1, [sp, #0]
 c0092a6:	4605      	mov	r5, r0
 c0092a8:	4630      	mov	r0, r6
 c0092aa:	f7ff fa4f 	bl	c00874c <_malloc_r>
 c0092ae:	b948      	cbnz	r0, c0092c4 <__smakebuf_r+0x44>
 c0092b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c0092b4:	059a      	lsls	r2, r3, #22
 c0092b6:	d4ef      	bmi.n	c009298 <__smakebuf_r+0x18>
 c0092b8:	f023 0303 	bic.w	r3, r3, #3
 c0092bc:	f043 0302 	orr.w	r3, r3, #2
 c0092c0:	81a3      	strh	r3, [r4, #12]
 c0092c2:	e7e3      	b.n	c00928c <__smakebuf_r+0xc>
 c0092c4:	4b0d      	ldr	r3, [pc, #52]	; (c0092fc <__smakebuf_r+0x7c>)
 c0092c6:	62b3      	str	r3, [r6, #40]	; 0x28
 c0092c8:	89a3      	ldrh	r3, [r4, #12]
 c0092ca:	6020      	str	r0, [r4, #0]
 c0092cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c0092d0:	6120      	str	r0, [r4, #16]
 c0092d2:	81a3      	strh	r3, [r4, #12]
 c0092d4:	9b00      	ldr	r3, [sp, #0]
 c0092d6:	6163      	str	r3, [r4, #20]
 c0092d8:	9b01      	ldr	r3, [sp, #4]
 c0092da:	b15b      	cbz	r3, c0092f4 <__smakebuf_r+0x74>
 c0092dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c0092e0:	4630      	mov	r0, r6
 c0092e2:	f000 f88f 	bl	c009404 <_isatty_r>
 c0092e6:	b128      	cbz	r0, c0092f4 <__smakebuf_r+0x74>
 c0092e8:	89a3      	ldrh	r3, [r4, #12]
 c0092ea:	f023 0303 	bic.w	r3, r3, #3
 c0092ee:	f043 0301 	orr.w	r3, r3, #1
 c0092f2:	81a3      	strh	r3, [r4, #12]
 c0092f4:	89a0      	ldrh	r0, [r4, #12]
 c0092f6:	4305      	orrs	r5, r0
 c0092f8:	81a5      	strh	r5, [r4, #12]
 c0092fa:	e7cd      	b.n	c009298 <__smakebuf_r+0x18>
 c0092fc:	0c008499 	.word	0x0c008499

0c009300 <memchr>:
 c009300:	b2c9      	uxtb	r1, r1
 c009302:	4402      	add	r2, r0
 c009304:	b510      	push	{r4, lr}
 c009306:	4290      	cmp	r0, r2
 c009308:	4603      	mov	r3, r0
 c00930a:	d101      	bne.n	c009310 <memchr+0x10>
 c00930c:	2300      	movs	r3, #0
 c00930e:	e003      	b.n	c009318 <memchr+0x18>
 c009310:	781c      	ldrb	r4, [r3, #0]
 c009312:	3001      	adds	r0, #1
 c009314:	428c      	cmp	r4, r1
 c009316:	d1f6      	bne.n	c009306 <memchr+0x6>
 c009318:	4618      	mov	r0, r3
 c00931a:	bd10      	pop	{r4, pc}

0c00931c <__malloc_lock>:
 c00931c:	4801      	ldr	r0, [pc, #4]	; (c009324 <__malloc_lock+0x8>)
 c00931e:	f7ff b99f 	b.w	c008660 <__retarget_lock_acquire_recursive>
 c009322:	bf00      	nop
 c009324:	300004cc 	.word	0x300004cc

0c009328 <__malloc_unlock>:
 c009328:	4801      	ldr	r0, [pc, #4]	; (c009330 <__malloc_unlock+0x8>)
 c00932a:	f7ff b99a 	b.w	c008662 <__retarget_lock_release_recursive>
 c00932e:	bf00      	nop
 c009330:	300004cc 	.word	0x300004cc

0c009334 <_read_r>:
 c009334:	b538      	push	{r3, r4, r5, lr}
 c009336:	4604      	mov	r4, r0
 c009338:	4d06      	ldr	r5, [pc, #24]	; (c009354 <_read_r+0x20>)
 c00933a:	4608      	mov	r0, r1
 c00933c:	4611      	mov	r1, r2
 c00933e:	2200      	movs	r2, #0
 c009340:	602a      	str	r2, [r5, #0]
 c009342:	461a      	mov	r2, r3
 c009344:	f7f9 f88f 	bl	c002466 <_read>
 c009348:	1c43      	adds	r3, r0, #1
 c00934a:	d102      	bne.n	c009352 <_read_r+0x1e>
 c00934c:	682b      	ldr	r3, [r5, #0]
 c00934e:	b103      	cbz	r3, c009352 <_read_r+0x1e>
 c009350:	6023      	str	r3, [r4, #0]
 c009352:	bd38      	pop	{r3, r4, r5, pc}
 c009354:	300004d8 	.word	0x300004d8

0c009358 <_raise_r>:
 c009358:	291f      	cmp	r1, #31
 c00935a:	b538      	push	{r3, r4, r5, lr}
 c00935c:	4604      	mov	r4, r0
 c00935e:	460d      	mov	r5, r1
 c009360:	d904      	bls.n	c00936c <_raise_r+0x14>
 c009362:	2316      	movs	r3, #22
 c009364:	6003      	str	r3, [r0, #0]
 c009366:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c00936a:	bd38      	pop	{r3, r4, r5, pc}
 c00936c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 c00936e:	b112      	cbz	r2, c009376 <_raise_r+0x1e>
 c009370:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 c009374:	b94b      	cbnz	r3, c00938a <_raise_r+0x32>
 c009376:	4620      	mov	r0, r4
 c009378:	f000 f830 	bl	c0093dc <_getpid_r>
 c00937c:	462a      	mov	r2, r5
 c00937e:	4601      	mov	r1, r0
 c009380:	4620      	mov	r0, r4
 c009382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 c009386:	f000 b817 	b.w	c0093b8 <_kill_r>
 c00938a:	2b01      	cmp	r3, #1
 c00938c:	d00a      	beq.n	c0093a4 <_raise_r+0x4c>
 c00938e:	1c59      	adds	r1, r3, #1
 c009390:	d103      	bne.n	c00939a <_raise_r+0x42>
 c009392:	2316      	movs	r3, #22
 c009394:	6003      	str	r3, [r0, #0]
 c009396:	2001      	movs	r0, #1
 c009398:	e7e7      	b.n	c00936a <_raise_r+0x12>
 c00939a:	2400      	movs	r4, #0
 c00939c:	4628      	mov	r0, r5
 c00939e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 c0093a2:	4798      	blx	r3
 c0093a4:	2000      	movs	r0, #0
 c0093a6:	e7e0      	b.n	c00936a <_raise_r+0x12>

0c0093a8 <raise>:
 c0093a8:	4b02      	ldr	r3, [pc, #8]	; (c0093b4 <raise+0xc>)
 c0093aa:	4601      	mov	r1, r0
 c0093ac:	6818      	ldr	r0, [r3, #0]
 c0093ae:	f7ff bfd3 	b.w	c009358 <_raise_r>
 c0093b2:	bf00      	nop
 c0093b4:	30000074 	.word	0x30000074

0c0093b8 <_kill_r>:
 c0093b8:	b538      	push	{r3, r4, r5, lr}
 c0093ba:	2300      	movs	r3, #0
 c0093bc:	4d06      	ldr	r5, [pc, #24]	; (c0093d8 <_kill_r+0x20>)
 c0093be:	4604      	mov	r4, r0
 c0093c0:	4608      	mov	r0, r1
 c0093c2:	4611      	mov	r1, r2
 c0093c4:	602b      	str	r3, [r5, #0]
 c0093c6:	f7f9 f834 	bl	c002432 <_kill>
 c0093ca:	1c43      	adds	r3, r0, #1
 c0093cc:	d102      	bne.n	c0093d4 <_kill_r+0x1c>
 c0093ce:	682b      	ldr	r3, [r5, #0]
 c0093d0:	b103      	cbz	r3, c0093d4 <_kill_r+0x1c>
 c0093d2:	6023      	str	r3, [r4, #0]
 c0093d4:	bd38      	pop	{r3, r4, r5, pc}
 c0093d6:	bf00      	nop
 c0093d8:	300004d8 	.word	0x300004d8

0c0093dc <_getpid_r>:
 c0093dc:	f7f9 b821 	b.w	c002422 <_getpid>

0c0093e0 <_fstat_r>:
 c0093e0:	b538      	push	{r3, r4, r5, lr}
 c0093e2:	2300      	movs	r3, #0
 c0093e4:	4d06      	ldr	r5, [pc, #24]	; (c009400 <_fstat_r+0x20>)
 c0093e6:	4604      	mov	r4, r0
 c0093e8:	4608      	mov	r0, r1
 c0093ea:	4611      	mov	r1, r2
 c0093ec:	602b      	str	r3, [r5, #0]
 c0093ee:	f7f9 f87f 	bl	c0024f0 <_fstat>
 c0093f2:	1c43      	adds	r3, r0, #1
 c0093f4:	d102      	bne.n	c0093fc <_fstat_r+0x1c>
 c0093f6:	682b      	ldr	r3, [r5, #0]
 c0093f8:	b103      	cbz	r3, c0093fc <_fstat_r+0x1c>
 c0093fa:	6023      	str	r3, [r4, #0]
 c0093fc:	bd38      	pop	{r3, r4, r5, pc}
 c0093fe:	bf00      	nop
 c009400:	300004d8 	.word	0x300004d8

0c009404 <_isatty_r>:
 c009404:	b538      	push	{r3, r4, r5, lr}
 c009406:	2300      	movs	r3, #0
 c009408:	4d05      	ldr	r5, [pc, #20]	; (c009420 <_isatty_r+0x1c>)
 c00940a:	4604      	mov	r4, r0
 c00940c:	4608      	mov	r0, r1
 c00940e:	602b      	str	r3, [r5, #0]
 c009410:	f7f9 f87e 	bl	c002510 <_isatty>
 c009414:	1c43      	adds	r3, r0, #1
 c009416:	d102      	bne.n	c00941e <_isatty_r+0x1a>
 c009418:	682b      	ldr	r3, [r5, #0]
 c00941a:	b103      	cbz	r3, c00941e <_isatty_r+0x1a>
 c00941c:	6023      	str	r3, [r4, #0]
 c00941e:	bd38      	pop	{r3, r4, r5, pc}
 c009420:	300004d8 	.word	0x300004d8

0c009424 <_init>:
 c009424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c009426:	bf00      	nop
 c009428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00942a:	bc08      	pop	{r3}
 c00942c:	469e      	mov	lr, r3
 c00942e:	4770      	bx	lr

0c009430 <_fini>:
 c009430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c009432:	bf00      	nop
 c009434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c009436:	bc08      	pop	{r3}
 c009438:	469e      	mov	lr, r3
 c00943a:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <SECURE_SystemCoreClockUpdate>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c4 bc16 	b.w	c002834 <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e008 <SECURE_log_cond_br>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c4 b845 	b.w	c00209a <__acle_se_SECURE_log_cond_br>

0c03e010 <SECURE_RunCallback>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c3 bef6 	b.w	c001e04 <__acle_se_SECURE_RunCallback>

0c03e018 <SECURE_log_call>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c3 bff4 	b.w	c002008 <__acle_se_SECURE_log_call>

0c03e020 <SECURE_record_output_data>:
 c03e020:	e97f e97f 	sg
 c03e024:	f7c4 b8c2 	b.w	c0021ac <__acle_se_SECURE_record_output_data>

0c03e028 <SECURE_Initialize_CFA_engine>:
 c03e028:	e97f e97f 	sg
 c03e02c:	f7c3 bf28 	b.w	c001e80 <__acle_se_SECURE_Initialize_CFA_engine>

0c03e030 <SECURE_Initialize_Attestation>:
 c03e030:	e97f e97f 	sg
 c03e034:	f7c3 bf60 	b.w	c001ef8 <__acle_se_SECURE_Initialize_Attestation>

0c03e038 <SECURE_log_ret>:
 c03e038:	e97f e97f 	sg
 c03e03c:	f7c3 bf98 	b.w	c001f70 <__acle_se_SECURE_log_ret>

0c03e040 <SECURE_RegisterCallback>:
 c03e040:	e97f e97f 	sg
 c03e044:	f7c3 be7a 	b.w	c001d3c <__acle_se_SECURE_RegisterCallback>

0c03e048 <SECURE_run_attestation_wait_mode>:
 c03e048:	e97f e97f 	sg
 c03e04c:	f7c4 b872 	b.w	c002134 <__acle_se_SECURE_run_attestation_wait_mode>
	...
